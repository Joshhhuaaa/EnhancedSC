/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef ECHELONINGREDIENT_API
#define ECHELONINGREDIENT_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ECHELONINGREDIENT_API FName ECHELONINGREDIENT_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(GetSensorPosition)
AUTOGENERATE_NAME(GetSensorDirection)

#ifndef NAMES_ONLY


class ECHELONINGREDIENT_API AESBPatchActor : public AESoftBodyActor
{
public:
    FLOAT scaleU;
    FLOAT scaleV;
    INT nbU;
    INT nbV;
    FLOAT Ulength;
    FLOAT Vlength;
    BITFIELD TopLeftFixed:1 GCC_PACK(4);
    BITFIELD TopRightFixed:1;
    BITFIELD BottomLeftFixed:1;
    BITFIELD BottomRightFixed:1;
    BITFIELD TopFixed:1;
    BITFIELD BottomFixed:1;
    BITFIELD LeftFixed:1;
    BITFIELD RightFixed:1;
    BITFIELD prevTopLeftFixed:1;
    BITFIELD prevTopRightFixed:1;
    BITFIELD prevBottomLeftFixed:1;
    BITFIELD prevBottomRightFixed:1;
    BITFIELD prevTopFixed:1;
    BITFIELD prevBottomFixed:1;
    BITFIELD prevLeftFixed:1;
    BITFIELD prevRightFixed:1;
    INT prevNbU GCC_PACK(4);
    INT prevNbV;
    FLOAT prevUlength;
    FLOAT prevVlength;
    DECLARE_CLASS(AESBPatchActor,AESoftBodyActor,0,EchelonIngredient)
    NO_DEFAULT_CONSTRUCTOR(AESBPatchActor)
};


class ECHELONINGREDIENT_API AESBStripDoorActor : public AESBPatchActor
{
public:
    DECLARE_CLASS(AESBStripDoorActor,AESBPatchActor,0,EchelonIngredient)
    NO_DEFAULT_CONSTRUCTOR(AESBStripDoorActor)
};


class ECHELONINGREDIENT_API AESBRopeActor : public AESoftBodyActor
{
public:
    FLOAT scaleU;
    FLOAT lengthV;
    INT nbSeg;
    FLOAT Length;
    FLOAT Radius;
    INT prevNbSeg;
    FLOAT prevLength;
    DECLARE_CLASS(AESBRopeActor,AESoftBodyActor,0,EchelonIngredient)
    NO_DEFAULT_CONSTRUCTOR(AESBRopeActor)
};


class ECHELONINGREDIENT_API AESBChainActor : public AESBRopeActor
{
public:
    class UStaticMesh* linkMesh;
    BITFIELD MakesAINoise:1 GCC_PACK(4);
    DECLARE_CLASS(AESBChainActor,AESBRopeActor,0,EchelonIngredient)
    NO_DEFAULT_CONSTRUCTOR(AESBChainActor)
};


class ECHELONINGREDIENT_API AEWallMine : public AEInventoryItem
{
public:
    INT DetectionRadius;
    INT DetectionHeight;
    FLOAT ExplosionDelay;
    FLOAT ActivationDelay;
    INT MovementThreshold;
    FLOAT TickNoiseRadius;
    BITFIELD Emitting:1 GCC_PACK(4);
    class AController* Defuser GCC_PACK(4);
    class AEVolumeTrigger* DetectionVolume;
    DECLARE_CLASS(AEWallMine,AEInventoryItem,0|CLASS_Config,EchelonIngredient)
    NO_DEFAULT_CONSTRUCTOR(AEWallMine)
};


class ECHELONINGREDIENT_API AEFlare : public AEInventoryItem
{
public:
    FLOAT Lifetime;
    BITFIELD BurnedUp:1 GCC_PACK(4);
    class AEFlareParticle* FlareLight GCC_PACK(4);
    DECLARE_CLASS(AEFlare,AEInventoryItem,0|CLASS_Config,EchelonIngredient)
    NO_DEFAULT_CONSTRUCTOR(AEFlare)
};


struct AESensor_eventGetSensorDirection_Parms
{
    FVector ReturnValue;
};
struct AESensor_eventGetSensorPosition_Parms
{
    FVector ReturnValue;
};
class ECHELONINGREDIENT_API AESensor : public AEGameplayObject
{
public:
    FDegRot NeutralRotation;
    INT PatrolAngle;
    INT PatrolSpeed;
    INT RotationVelocity;
    FLOAT VisibilityConeAngle;
    FLOAT VisibilityMaxDistance;
    BYTE SensorType;
    FLOAT SensorThreshold;
    BYTE SensorDetectionType;
    BITFIELD FollowUponDetection:1 GCC_PACK(4);
    BITFIELD ZoomUponDetection:1;
    BITFIELD ShootUponDetection:1;
    FLOAT ShootDetectionDelay GCC_PACK(4);
    FLOAT AlarmDetectionDelay;
    FLOAT BulletsPerMinute;
    INT BulletDamage;
    INT DamageMinAmount;
    FRotator InitialRotation;
    FRotator PrevRotation;
    INT RealRotationSpeed;
    INT RealPatrolAngle;
    class AActor* Target;
    FLOAT fDetectionElapsedTime;
    BITFIELD bAlarmMsgSent:1 GCC_PACK(4);
    FLOAT fGrower GCC_PACK(4);
    FLOAT fBulletElapsedTime;
    FName HeadBone;
    FRotator CurrentRotation;
    TArrayNoInit<FDPInfo> DetectedActors;
    class USound* Sound_Rot_Loop;
    class USound* Sound_Rot_End;
    class USound* SoundAlert;
    class USound* SoundFire;
    class USound* SoundFire_End;
    class USound* SoundZoom;
    class USound* SoundReverse;
    class USound* SoundDisable;
    class USound* DetectedSound;
    class USound* BodySound;
    BITFIELD bRotationSoundPlaying:1 GCC_PACK(4);
    class USound* BulletSound GCC_PACK(4);
    class UMaterial* BulletMaterial;
    DECLARE_FUNCTION(execTargetStillVisible);
    FVector eventGetSensorDirection()
    {
        AESensor_eventGetSensorDirection_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELONINGREDIENT_GetSensorDirection),&Parms);
        return Parms.ReturnValue;
    }
    FVector eventGetSensorPosition()
    {
        AESensor_eventGetSensorPosition_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELONINGREDIENT_GetSensorPosition),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AESensor,AEGameplayObject,0|CLASS_Config,EchelonIngredient)
    NO_DEFAULT_CONSTRUCTOR(AESensor)
};

#endif

AUTOGENERATE_FUNCTION(AESensor,1250,execTargetStillVisible);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
