/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(PlayerInput)
AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(PhysicsVolumeChange)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(MayFall)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(SeePlayer)
AUTOGENERATE_NAME(EnemyNotVisible)
AUTOGENERATE_NAME(HearNoise)
AUTOGENERATE_NAME(UpdateEyeHeight)
AUTOGENERATE_NAME(SeeMonster)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(NotifyBump)
AUTOGENERATE_NAME(NotifyPhysicsVolumeChange)
AUTOGENERATE_NAME(AIHearSound)
AUTOGENERATE_NAME(NotifyHeadVolumeChange)
AUTOGENERATE_NAME(NotifyLanded)
AUTOGENERATE_NAME(NotifyHitWall)
AUTOGENERATE_NAME(SceneStarted)
AUTOGENERATE_NAME(SceneEnded)
AUTOGENERATE_NAME(KeyEvent)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(LongFall)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(Accept)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(EndCrouch)
AUTOGENERATE_NAME(SpecialCost)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(UpdateTactics)
AUTOGENERATE_NAME(NotifyHitMover)
AUTOGENERATE_NAME(StartCrouch)
AUTOGENERATE_NAME(PrepareForMove)
AUTOGENERATE_NAME(InitInputSystem)
AUTOGENERATE_NAME(KeyFrameReached)
AUTOGENERATE_NAME(PlayerSeesMe)
AUTOGENERATE_NAME(SuggestMovePreparation)
AUTOGENERATE_NAME(ActorEnteredVolume)
AUTOGENERATE_NAME(ActorLeavingVolume)
AUTOGENERATE_NAME(PawnEnteredVolume)
AUTOGENERATE_NAME(PawnLeavingVolume)
AUTOGENERATE_NAME(TriggerEvent)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(Process_KeyType)
AUTOGENERATE_NAME(Process_KeyEvent)
AUTOGENERATE_NAME(Process_PreRender)
AUTOGENERATE_NAME(Process_PostRender)
AUTOGENERATE_NAME(Initialized)
AUTOGENERATE_NAME(AddInteraction)
AUTOGENERATE_NAME(RemoveInteraction)
AUTOGENERATE_NAME(SetFocusTo)
AUTOGENERATE_NAME(Process_Tick)
AUTOGENERATE_NAME(Process_Message)
AUTOGENERATE_NAME(PlayDying)
AUTOGENERATE_NAME(UsedBy)
AUTOGENERATE_NAME(VisibilityTableLookup)
AUTOGENERATE_NAME(GetActorVisibility)
AUTOGENERATE_NAME(AttachedMoved)
AUTOGENERATE_NAME(PlayerCalcEye)
AUTOGENERATE_NAME(GetNext)
AUTOGENERATE_NAME(MoveToDestinationFailed)
AUTOGENERATE_NAME(MoveToDestinationSucceeded)
AUTOGENERATE_NAME(PlayerGiven)
AUTOGENERATE_NAME(GetTurnSpeed)
AUTOGENERATE_NAME(Update)
AUTOGENERATE_NAME(BulletWentTru)
AUTOGENERATE_NAME(CollidedBy)
AUTOGENERATE_NAME(GetBasePos)
AUTOGENERATE_NAME(HitFakeBackDrop)
AUTOGENERATE_NAME(WorldSpaceOverlays)
AUTOGENERATE_NAME(RealKeyEvent)
AUTOGENERATE_NAME(SetPause)
AUTOGENERATE_NAME(SendConsoleCommand)
AUTOGENERATE_NAME(InitLoadGame)
AUTOGENERATE_NAME(GameSaved)
AUTOGENERATE_NAME(ShowFakeWindow)
AUTOGENERATE_NAME(HideFakeWindow)
AUTOGENERATE_NAME(ShowMainMenu)
AUTOGENERATE_NAME(ExitAltTab)
AUTOGENERATE_NAME(EnterAltTab)
AUTOGENERATE_NAME(ShowGameMenu)
AUTOGENERATE_NAME(CanSaveGame)
AUTOGENERATE_NAME(CanGoBackToGame)
AUTOGENERATE_NAME(LeaveGame)
AUTOGENERATE_NAME(ResetMainMenu)
AUTOGENERATE_NAME(CanLoadGame)
AUTOGENERATE_NAME(EmptyRecons)
AUTOGENERATE_NAME(GameLoaded)
AUTOGENERATE_NAME(PopCD)

#ifndef NAMES_ONLY


class ENGINE_API UShadowBitmapMaterial : public UBitmapMaterial
{
public:
    INT TextureInterfaces[3];
    INT NumStaticMesh;
    INT StaticMeshCount[50];
    BITFIELD bFirstFrame:1 GCC_PACK(4);
    BITFIELD bHaveSoftBody:1;
    FLOAT last_pos[3] GCC_PACK(4);
    INT last_rot[3];
    FLOAT proj_zdist;
    FLOAT proj_radius;
    class AProjector* proj;
    BITFIELD Dirty:1 GCC_PACK(4);
    class UMaterial* SpotTexture GCC_PACK(4);
    DECLARE_CLASS(UShadowBitmapMaterial,UBitmapMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UShadowBitmapMaterial)
};

enum EOutputBlending
{
    OB_Normal               =0,
    OB_Masked               =1,
    OB_Modulate             =2,
    OB_Translucent          =3,
    OB_Invisible            =4,
    OB_MAX                  =5,
};

class ENGINE_API UShader : public URenderedMaterial
{
public:
    class UMaterial* Diffuse;
    class UMaterial* Opacity;
    class UMaterial* Specular;
    class UMaterial* SpecularityMask;
    class UMaterial* SelfIllumination;
    class UMaterial* SelfIlluminationMask;
    class UMaterial* Detail;
    BYTE OutputBlending;
    BITFIELD TwoSided:1 GCC_PACK(4);
    BITFIELD Wireframe:1;
    BITFIELD ModulateStaticLighting2X:1;
    BITFIELD SpecialGlassShader:1;
    DECLARE_CLASS(UShader,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UShader)
};


class ENGINE_API UParticleMaterial : public URenderedMaterial
{
public:
    INT ParticleBlending;
    INT BlendBetweenSubdivisions;
    INT RenderTwoSided;
    INT UseTFactor;
    class UBitmapMaterial* BitmapMaterial;
    INT AlphaTest;
    INT AlphaRef;
    INT ZTest;
    INT ZWrite;
    INT Wireframe;
    BITFIELD AcceptsProjectors:1 GCC_PACK(4);
    INT NumProjectors GCC_PACK(4);
    FParticleProjectorInfo Projectors[8];
    FColor GlowScale;
    BITFIELD IsGlowing:1 GCC_PACK(4);
    DECLARE_CLASS(UParticleMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UParticleMaterial)
};


class ENGINE_API UERainMaterial : public URenderedMaterial
{
public:
    class UMaterial* rain;
    BITFIELD ModulateStaticLighting2X:1 GCC_PACK(4);
    DECLARE_CLASS(UERainMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UERainMaterial)
};


class ENGINE_API UConstantMaterial : public URenderedMaterial
{
public:
    DECLARE_CLASS(UConstantMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConstantMaterial)
};

enum EColorFadeType
{
    FC_Linear               =0,
    FC_Sinusoidal           =1,
    FC_MAX                  =2,
};

class ENGINE_API UFadeColor : public UConstantMaterial
{
public:
    FColor Color1;
    FColor Color2;
    FLOAT FadePeriod;
    FLOAT FadePhase;
    BYTE ColorFadeType;
    DECLARE_CLASS(UFadeColor,UConstantMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFadeColor)
};


class ENGINE_API UConstantColor : public UConstantMaterial
{
public:
    FColor Color;
    DECLARE_CLASS(UConstantColor,UConstantMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConstantColor)
};


class ENGINE_API UELightBeamMaterial : public UMaterial
{
public:
    class UTexture* LightMaterialProj;
    class UTexture* LightMaterialEnvFX;
    DECLARE_CLASS(UELightBeamMaterial,UMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UELightBeamMaterial)
};


class ENGINE_API UModifier : public UMaterial
{
public:
    class UMaterial* Material;
    DECLARE_CLASS(UModifier,UMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UModifier)
};

enum EPixelShaderType
{
    EPST_ThermalScreenBlt   =0,
    EPST_MAX                =1,
};

class ENGINE_API UEPixelShader : public UModifier
{
public:
    BYTE PixelShaderType;
    DECLARE_CLASS(UEPixelShader,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UEPixelShader)
};


class ENGINE_API UEGlow : public UModifier
{
public:
    class UMaterial* GlowMaterial;
    FColor GlowColorScale;
    BITFIELD bUnlit:1 GCC_PACK(4);
    DECLARE_CLASS(UEGlow,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UEGlow)
};

enum EZTest
{
    ZT_None                 =0,
    ZT_LessEqual            =1,
    ZT_Equal                =2,
    ZT_MAX                  =3,
};
enum EFrameBufferBlending
{
    FB_Overwrite            =0,
    FB_Modulate             =1,
    FB_AlphaBlend           =2,
    FB_AlphaModulate_MightNotFogCorrectly=3,
    FB_Translucent          =4,
    FB_Darken               =5,
    FB_Brighten             =6,
    FB_Invisible            =7,
    FB_MAX                  =8,
};

class ENGINE_API UFinalBlend : public UModifier
{
public:
    BYTE FrameBufferBlending;
    BITFIELD ZWrite:1 GCC_PACK(4);
    BYTE ZTest GCC_PACK(4);
    BITFIELD AlphaTest:1 GCC_PACK(4);
    BITFIELD TwoSided:1;
    BYTE AlphaRef GCC_PACK(4);
    DECLARE_CLASS(UFinalBlend,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFinalBlend)
};

enum ETexCoordCount
{
    TCN_2DCoords            =0,
    TCN_3DCoords            =1,
    TCN_4DCoords            =2,
    TCN_MAX                 =3,
};
enum ETexCoordSrc
{
    TCS_Stream0             =0,
    TCS_Stream1             =1,
    TCS_Stream2             =2,
    TCS_Stream3             =3,
    TCS_Stream4             =4,
    TCS_Stream5             =5,
    TCS_Stream6             =6,
    TCS_Stream7             =7,
    TCS_WorldCoords         =8,
    TCS_CameraCoords        =9,
    TCS_WorldEnvMapCoords   =10,
    TCS_CameraEnvMapCoords  =11,
    TCS_ProjectorCoords     =12,
    TCS_NoChange            =13,
    TCS_NormalViewSpaceEnvMap=14,
    TCS_MAX                 =15,
};

class ENGINE_API UTexModifier : public UModifier
{
public:
    BYTE TexCoordSource;
    BYTE TexCoordCount;
    BITFIELD TexCoordProjected:1 GCC_PACK(4);
    DECLARE_CLASS(UTexModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexModifier)
};


class ENGINE_API UTexMatrix : public UTexModifier
{
public:
    FMatrix Matrix;
    DECLARE_CLASS(UTexMatrix,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexMatrix)
};

enum ETexEnvMapType
{
    EM_WorldSpace           =0,
    EM_CameraSpace          =1,
    EM_MAX                  =2,
};

class ENGINE_API UTexEnvMap : public UTexModifier
{
public:
    BYTE EnvMapType;
    DECLARE_CLASS(UTexEnvMap,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexEnvMap)
};

enum ETexOscillationType
{
    OT_Pan                  =0,
    OT_Stretch              =1,
    OT_MAX                  =2,
};

class ENGINE_API UTexOscillator : public UTexModifier
{
public:
    FLOAT UOscillationRate;
    FLOAT VOscillationRate;
    FLOAT UOscillationPhase;
    FLOAT VOscillationPhase;
    FLOAT UOscillationAmplitude;
    FLOAT VOscillationAmplitude;
    BYTE UOscillationType;
    BYTE VOscillationType;
    FMatrix M;
    DECLARE_CLASS(UTexOscillator,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexOscillator)
};


class ENGINE_API UTexRotator : public UTexModifier
{
public:
    FMatrix M;
    FRotator Rotation;
    BITFIELD ConstantRotation:1 GCC_PACK(4);
    DECLARE_CLASS(UTexRotator,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexRotator)
};


class ENGINE_API UTexScaler : public UTexModifier
{
public:
    FMatrix M;
    FLOAT UScale;
    FLOAT VScale;
    FLOAT UOffset;
    FLOAT VOffset;
    DECLARE_CLASS(UTexScaler,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexScaler)
};


class ENGINE_API UTexPanner : public UTexModifier
{
public:
    FRotator PanDirection;
    FLOAT PanRate;
    FMatrix M;
    DECLARE_CLASS(UTexPanner,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexPanner)
};


class ENGINE_API UColorModifier : public UModifier
{
public:
    FColor Color;
    BITFIELD RenderTwoSided:1 GCC_PACK(4);
    BITFIELD AlphaBlend:1;
    DECLARE_CLASS(UColorModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UColorModifier)
};

enum EColorOperation
{
    CO_Use_Color_From_Material1=0,
    CO_Use_Color_From_Material2=1,
    CO_Multiply             =2,
    CO_Add                  =3,
    CO_Subtract             =4,
    CO_AlphaBlend_With_Mask =5,
    CO_Add_With_Mask_Modulation=6,
    CO_MAX                  =7,
};

class ENGINE_API UCombiner : public UMaterial
{
public:
    BYTE CombineOperation;
    class UMaterial* Material1;
    class UMaterial* Material2;
    class UMaterial* Mask;
    BITFIELD InvertMask:1 GCC_PACK(4);
    BITFIELD Modulate2X:1;
    BITFIELD UseVertexAlpha:1;
    BITFIELD DontChangeForLowEndCard:1;
    DECLARE_CLASS(UCombiner,UMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCombiner)
};

enum ETravelType
{
    TRAVEL_Absolute         =0,
    TRAVEL_Partial          =1,
    TRAVEL_Relative         =2,
    TRAVEL_MAX              =3,
};
enum EForceType
{
    FT_None                 =0,
    FT_DragAlong            =1,
    FT_MAX                  =2,
};
enum MoveFlags
{
    MOVE_NotSpecified       =0,
    MOVE_WalkRelaxed        =1,
    MOVE_WalkNormal         =2,
    MOVE_WalkAlert          =3,
    MOVE_JogAlert           =4,
    MOVE_CrouchWalk         =5,
    MOVE_CrouchJog          =6,
    MOVE_Search             =7,
    MOVE_Snipe              =8,
    MOVE_JogNoWeapon        =9,
    MOVE_Sit                =10,
    MOVE_DesignerWalk       =11,
    MOVE_MAX                =12,
};
enum NoiseType
{
    NOISE_None              =0,
    NOISE_LightFootstep     =1,
    NOISE_HeavyFootstep     =2,
    NOISE_DoorOpening       =3,
    NOISE_Object_Falling    =4,
    NOISE_Object_Breaking   =5,
    NOISE_GrenadeWarning    =6,
    NOISE_Alarm             =7,
    NOISE_WallMineTick      =8,
    NOISE_InfoBarkAware     =9,
    NOISE_InfoBarkAlert     =10,
    NOISE_DogBarking        =11,
    NOISE_BackupBarkInvestigate=12,
    NOISE_TurretGunfire     =13,
    NOISE_Scream            =14,
    NOISE_DyingGasp         =15,
    NOISE_TakeCover         =16,
    NOISE_BackUpBarkAttack  =17,
    NOISE_Explosion         =18,
    NOISE_Gunfire           =19,
    NOISE_Ricochet          =20,
    NOISE_MAX               =21,
};
enum eInvCategory
{
    CAT_NONE                =0,
    CAT_MAINGUN             =1,
    CAT_GADGETS             =2,
    CAT_ITEMS               =3,
    CAT_INFO                =4,
    CAT_MAX                 =5,
};
enum VisibilityRating
{
    VIS_Invisible           =0,
    VIS_Barely              =1,
    VIS_Partially           =2,
    VIS_Mostly              =3,
    VIS_Fully               =4,
    VIS_MAX                 =5,
};
enum BroadCastType
{
    BC_SELF_DIRECTED        =0,
    BC_INFO_BARK_AWARE      =1,
    BC_INFO_BARK_ALERT      =2,
    BC_BACKUP_BARK_INVESTIGATE=3,
    BC_BACKUP_BARK_ATTACK   =4,
    BC_INFO_RADIO_AWARE     =5,
    BC_INFO_RADIO_ALERT     =6,
    BC_BACKUP_RADIO_INVESTIGATE=7,
    BC_BACKUP_RADIO_ATTACK  =8,
    BC_INFO_BARK_COVER      =9,
    BC_MAX                  =10,
};
enum eReactionAnimGroup
{
    REACT_None              =0,
    REACT_CuriousNoise      =1,
    REACT_AlarmingNoise     =2,
    REACT_DistantThreat     =3,
    REACT_ImmediateThreat   =4,
    REACT_CuriousObject     =5,
    REACT_MovingObject      =6,
    REACT_BrokenObject      =7,
    REACT_SeeUnknownPerson  =8,
    REACT_SeeBody           =9,
    REACT_SeeGrenade        =10,
    REACT_SeeWallMine       =11,
    REACT_SeeLightsOut      =12,
    REACT_Blinded           =13,
    REACT_SearchFailed      =14,
    REACT_SeeInterrogation  =15,
    REACT_Surprised         =16,
    REACT_AboutToDie        =17,
    REACT_TempA             =18,
    REACT_TempB             =19,
    REACT_TempC             =20,
    REACT_TempD             =21,
    REACT_MAX               =22,
};
enum AIEventType
{
    AI_NONE                 =0,
    AI_INVESTIGATE          =1,
    AI_ATTACK               =2,
    AI_EXTERN_EVENTS        =3,
    AI_SEE_NPC              =4,
    AI_SEE_CHANGED_ACTOR    =5,
    AI_SEE_INTERROGATION    =6,
    AI_SEE_PLAYER_INVESTIGATE=7,
    AI_HEAR_SOMETHING       =8,
    AI_SMELL_SOMETHING      =9,
    AI_SHOT_JUST_MISSED     =10,
    AI_TAKE_DAMAGE          =11,
    AI_SEE_PLAYER_SURPRISED =12,
    AI_SEE_PLAYER_ALERT     =13,
    AI_INTERN_EVENTS        =14,
    AI_GOAL_COMPLETE        =15,
    AI_GOAL_FAILURE         =16,
    AI_DEAD                 =17,
    AI_UNCONSCIOUS          =18,
    AI_REVIVED              =19,
    AI_GRABBED              =20,
    AI_RELEASED             =21,
    AI_LOST_PLAYER          =22,
    AI_LOST_PLAYER_AFTER    =23,
    AI_SEE_PLAYER_AGAIN     =24,
    AI_UPDATE_SEARCH        =25,
    AI_SHOT_BLOCKED         =26,
    AI_STUCK                =27,
    AI_NEARLY_DEAD          =28,
    AI_WEAPON_INEFFECTIVE   =29,
    AI_LOW_AMMO             =30,
    AI_NO_AMMO              =31,
    AI_PLAYER_FAR           =32,
    AI_PLAYER_CLOSE         =33,
    AI_PLAYER_VERYCLOSE     =34,
    AI_PLAYER_DEAD          =35,
    AI_UPDATE_STRATEGY_REQUEST=36,
    AI_ALARM_ON_PRIMARY     =37,
    AI_ALARM_ON_SECONDARY   =38,
    AI_ALARM_UPDATE_POSITION=39,
    AI_ALARM_OFF            =40,
    AI_INTERROGATION_QUERY_NPC=41,
    AI_INTERROGATION_QUERY_SAM=42,
    AI_FORCED_RETINAL_SCAN  =43,
    AI_OUT_OF_DEFEND_RADIUS =44,
    AI_PATROL_TIMEOUT       =45,
    AI_GET_DOWN             =46,
    AI_COVERPOINT_TOUCHED   =47,
    AI_COVER_LOST_PLAYER    =48,
    AI_GROUP_LAST_MEMBER    =49,
    AI_GROUP_LOST_PLAYER    =50,
    AI_GROUP_SEE_PLAYER_AGAIN=51,
    AI_MASTER_OUT_OF_RADIUS =52,
    AI_MASTER_DEAD          =53,
    AI_HEAR_RICOCHET        =54,
    AI_COMMUNICATION_EVENTS =55,
    AI_ARE_YOU_OK           =56,
    AI_LET_HIM_GO           =57,
    AI_INVESTIGATE_GREETINGS=58,
    AI_MAX                  =59,
};
enum eClimbingHand
{
    CHNONE                  =0,
    CHLEFT                  =1,
    CHRIGHT                 =2,
};
enum eAimAtType
{
    AAFULL                  =0,
    AAVERT                  =1,
    AAHOH                   =2,
    AABTW                   =3,
};
enum eLookAtType
{
    LANORMAL                =0,
    LAHOH                   =1,
};
enum ECamMode
{
    ECM_Walking             =0,
    ECM_WalkingCr           =1,
    ECM_FirstPerson         =2,
    ECM_FirstPersonCr       =3,
    ECM_Grab                =4,
    ECM_GrabFP              =5,
    ECM_Carry               =6,
    ECM_CarryCr             =7,
    ECM_Throw               =8,
    ECM_ThrowCr             =9,
    ECM_Sniping             =10,
    ECM_HSphere             =11,
    ECM_FSphere             =12,
    ECM_HOH                 =13,
    ECM_HOHFU               =14,
    ECM_HOHFP               =15,
    ECM_BTW                 =16,
    ECM_BTWPeakLeft         =17,
    ECM_BTWPeakRight        =18,
    ECM_BTWLeftFP           =19,
    ECM_BTWRightFP          =20,
    ECM_Rapel               =21,
    ECM_RapelFP             =22,
    ECM_DoorPeekRight       =23,
    ECM_DoorPeekLeft        =24,
    ECM_SplitJump           =25,
    ECM_SplitJumpFP         =26,
    ECM_MAX                 =27,
};
enum ETransitionType
{
    TRAN_None               =0,
    TRAN_Investigate        =1,
    TRAN_Alert              =2,
    TRAN_Surprised          =3,
    TRAN_MAX                =4,
};
enum EVolumeSize
{
    EVS_Normal              =0,
    EVS_Small               =1,
    EVS_Tiny                =2,
    EVS_Minute              =3,
    EVS_MAX                 =4,
};
enum EChangeType
{
    CHANGE_None             =0,
    CHANGE_Footprints       =1,
    CHANGE_DisabledTurret   =2,
    CHANGE_DisabledCamera   =3,
    CHANGE_BrokenObject     =4,
    CHANGE_BrokenDoor       =5,
    CHANGE_Object           =6,
    CHANGE_AirCamera        =7,
    CHANGE_ScorchMark       =8,
    CHANGE_BloodStain       =9,
    CHANGE_Flare            =10,
    CHANGE_LightTurnedOff   =11,
    CHANGE_LightShotOut     =12,
    CHANGE_Unconscious      =13,
    CHANGE_Bleeding         =14,
    CHANGE_Dead             =15,
    CHANGE_Fire             =16,
    CHANGE_WallMine         =17,
    CHANGE_Grenade          =18,
    CHANGE_MAX              =19,
};
enum ELightEffect
{
    LE_None                 =0,
    LE_TorchWaver           =1,
    LE_FireWaver            =2,
    LE_WateryShimmer        =3,
    LE_Searchlight          =4,
    LE_SlowWave             =5,
    LE_FastWave             =6,
    LE_CloudCast            =7,
    LE_StaticSpot           =8,
    LE_Shock                =9,
    LE_Disco                =10,
    LE_Warp                 =11,
    LE_Spotlight            =12,
    LE_NonIncidence         =13,
    LE_Shell                =14,
    LE_OmniBumpMap          =15,
    LE_Interference         =16,
    LE_Cylinder             =17,
    LE_Rotor                =18,
    LE_Unused               =19,
    LE_Sunlight             =20,
    LE_EOceanSunLight       =21,
    LE_EUnused01            =22,
    LE_ESpotShadow          =23,
    LE_EUnused02            =24,
    LE_EUnused03            =25,
    LE_ESpotShadowDistAtten =26,
    LE_EUnused04            =27,
    LE_ESpot                =28,
    LE_EUnused05            =29,
    LE_EUnused06            =30,
    LE_EOmniAtten           =31,
    LE_EUnused07            =32,
    LE_EUnused08            =33,
    LE_ESpotOrthoShadow     =34,
    LE_EUnused09            =35,
    LE_EUnused10            =36,
    LE_ESpotOrthoShadowDistAtten=37,
    LE_EUnused11            =38,
    LE_ESpotOrtho           =39,
    LE_MAX                  =40,
};
enum ELightType
{
    LT_None                 =0,
    LT_Steady               =1,
    LT_Pulse                =2,
    LT_Blink                =3,
    LT_Flicker              =4,
    LT_Strobe               =5,
    LT_BackdropLight        =6,
    LT_SubtlePulse          =7,
    LT_TexturePaletteOnce   =8,
    LT_TexturePaletteLoop   =9,
    LT_MAX                  =10,
};
enum ESoundSlot
{
    SLOT_SFX                =0,
    SLOT_Barks              =1,
    SLOT_Voice              =2,
    SLOT_Interface          =3,
    SLOT_Music              =4,
    SLOT_Ambient            =5,
    SLOT_Fisher             =6,
    SLOT_Lambert            =7,
    SLOT_MAX                =8,
};
enum EQuickLoadType
{
    EQLoad_None             =0,
    EQLoad_Slot1            =1,
    EQLoad_Slot2            =2,
    EQLoad_Slot3            =3,
    EQLoad_MapStart         =4,
    EQLoad_MAX              =5,
};
enum ERenderStyle
{
    STY_None                =0,
    STY_Normal              =1,
    STY_Masked              =2,
    STY_Translucent         =3,
    STY_Modulated           =4,
    STY_Alpha               =5,
    STY_Particle            =6,
    STY_MAX                 =7,
};
enum EShadowCastType
{
    STC_None                =0,
    STC_MeshAndBSP          =1,
    STC_BSP                 =2,
    STC_MAX                 =3,
};
enum EShadowReceiveType
{
    STR_None                =0,
    STR_Mesh                =1,
    STR_BSP                 =2,
    STR_MAX                 =3,
};
enum EDrawType
{
    DT_None                 =0,
    DT_Sprite               =1,
    DT_Mesh                 =2,
    DT_Brush                =3,
    DT_RopeSprite           =4,
    DT_VerticalSprite       =5,
    DT_Terraform            =6,
    DT_SpriteAnimOnce       =7,
    DT_StaticMesh           =8,
    DT_DrawType             =9,
    DT_Particle             =10,
    DT_AntiPortal           =11,
    DT_Rain                 =12,
    DT_MAX                  =13,
};
enum EPhysics
{
    PHYS_None               =0,
    PHYS_Walking            =1,
    PHYS_Falling            =2,
    PHYS_Flying             =3,
    PHYS_Rotating           =4,
    PHYS_Projectile         =5,
    PHYS_Interpolating      =6,
    PHYS_MovingBrush        =7,
    PHYS_Trailer            =8,
    PHYS_RootMotion         =9,
    PHYS_Linear             =10,
    PHYS_Fence              =11,
    PHYS_MAX                =12,
};
#define UCONST_MAXSTEPHEIGHT 35.0
#define UCONST_NUMCAMMODE 27
#define UCONST_NUMVOLUMESIZE 4

struct AActor_eventAttachedMoved_Parms
{
};
struct AActor_eventGetActorVisibility_Parms
{
    BYTE ReturnValue;
};
struct AActor_eventVisibilityTableLookup_Parms
{
    FLOAT BaseVisibility;
    BYTE ReturnValue;
};
struct AActor_eventTriggerEvent_Parms
{
    FName EventName;
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventSetInitialState_Parms
{
};
struct AActor_eventPostBeginPlay_Parms
{
};
struct AActor_eventPreBeginPlay_Parms
{
};
struct AActor_eventBeginPlay_Parms
{
};
struct AActor_eventPostTeleport_Parms
{
    class ATeleporter* OutTeleporter;
};
struct AActor_eventPreTeleport_Parms
{
    class ATeleporter* InTeleporter;
    BITFIELD ReturnValue;
};
struct AActor_eventBulletWentTru_Parms
{
    class AActor* Instigator;
    FVector HitLocation;
    FVector HitNormal;
    FVector Momentum;
    class UMaterial* HitMaterial;
};
struct AActor_eventTakeDamage_Parms
{
    INT Damage;
    class APawn* EventInstigator;
    FVector HitLocation;
    FVector HitNormal;
    FVector Momentum;
    class UClass* DamageType;
    INT PillTag;
};
struct AActor_eventKilledBy_Parms
{
    class APawn* EventInstigator;
};
struct AActor_eventFellOutOfWorld_Parms
{
};
struct AActor_eventUsedBy_Parms
{
    class APawn* User;
};
struct AActor_eventEndedRotation_Parms
{
};
struct AActor_eventEncroachedBy_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachingOn_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AActor_eventSpecialHandling_Parms
{
    class APawn* Other;
    class AActor* ReturnValue;
};
struct AActor_eventDetach_Parms
{
    class AActor* Other;
};
struct AActor_eventAttach_Parms
{
    class AActor* Other;
};
struct AActor_eventBaseChange_Parms
{
};
struct AActor_eventBump_Parms
{
    class AActor* Other;
    INT Pill;
};
struct AActor_eventUnTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPostTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPhysicsVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
};
struct AActor_eventZoneChange_Parms
{
    class AZoneInfo* NewZone;
};
struct AActor_eventLanded_Parms
{
    FVector HitNormal;
};
struct AActor_eventFalling_Parms
{
};
struct AActor_eventHitWall_Parms
{
    FVector HitNormal;
    class AActor* HitWall;
};
struct AActor_eventTimer_Parms
{
};
struct AActor_eventEndEvent_Parms
{
};
struct AActor_eventBeginEvent_Parms
{
};
struct AActor_eventHitFakeBackDrop_Parms
{
};
struct AActor_eventUnTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
    FName InTag;
};
struct AActor_eventTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
    FName InTag;
};
struct AActor_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct AActor_eventLostChild_Parms
{
    class AActor* Other;
};
struct AActor_eventGainedChild_Parms
{
    class AActor* Other;
};
struct AActor_eventDestroyed_Parms
{
};
struct AActor_eventAnimEnd_Parms
{
    INT Channel;
};
class ENGINE_API AActor : public UObject
{
public:
    BITFIELD bStatic:1 GCC_PACK(4);
    BITFIELD bHidden:1;
    BITFIELD bNoDelete:1;
    BITFIELD bAnimFinished:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bTicked:1;
    BITFIELD bDynamicLight:1;
    BITFIELD bTimerLoop:1;
    BITFIELD bAlwaysTick:1;
    BITFIELD bHighDetail:1;
    BITFIELD bStasis:1;
    BITFIELD bTrailerSameRotation:1;
    BITFIELD bTrailerPrePivot:1;
    BITFIELD bWorldGeometry:1;
    BITFIELD bAcceptsProjectors:1;
    BITFIELD bDontUseFrustum:1;
    BITFIELD bOrientOnSlope:1;
    BITFIELD bHiddenButCastShadow:1;
    BITFIELD bResortLightByDistance:1;
    BITFIELD bForceShowReflection:1;
    BITFIELD bForceGlowPassThrough:1;
    BITFIELD bForceThisActorDrawLater:1;
    FLOAT fZOffsetAdjust GCC_PACK(4);
    BYTE GlassAmbientColor;
    FLOAT Zbias;
    BITFIELD bRenderObjectInGF2Only:1 GCC_PACK(4);
    BYTE Physics GCC_PACK(4);
    BYTE DrawType;
    BYTE ShadowReceiveType;
    BYTE ShadowCastType;
    FLOAT LastRenderTime;
    FName Tag;
    FLOAT TimerRate;
    FLOAT TimerCounter;
    FLOAT LifeSpan;
    class UMeshInstance* MeshInstance;
    class UAnimInfo* AnimInfo;
    class AActor* Owner;
    FName InitialState;
    FName Group;
    class ALevelInfo* Level;
    class ULevel* XLevel;
    FName Event;
    class APawn* Instigator;
    class USound* AmbientPlaySound;
    class USound* AmbientStopSound;
    TArrayNoInit<class AZoneInfo*> m_ListOfZoneInfo;
    BITFIELD m_bPlayIfSameZone:1 GCC_PACK(4);
    BITFIELD m_bIfDirectLineOfSight:1;
    BITFIELD bInAmbientRange:1;
    class AActor* Base GCC_PACK(4);
    FPointRegion Region;
    TArrayNoInit<INT> Leaves;
    FLOAT LatentFloat;
    TArrayNoInit<class AActor*> Touching;
    class AActor* Deleted;
    INT CollisionTag;
    INT LightingTag;
    INT ActorTag;
    class APhysicsVolume* PhysicsVolume;
    FVector Location;
    FRotator Rotation;
    FVector Velocity;
    FVector Acceleration;
    FName AttachTag;
    TArrayNoInit<class AActor*> Attached;
    FVector RelativeLocation;
    FRotator RelativeRotation;
    FName AttachmentBone;
    TArrayNoInit<class UProjectorRenderInfo*> Projectors;
    class UMaterial* Texture;
    class UMesh* Mesh;
    class UStaticMesh* StaticMesh;
    class UStaticMeshInstance* StaticMeshInstance;
    class UModel* Brush;
    FLOAT DrawScale;
    FVector DrawScale3D;
    FVector PrePivot;
    TArrayNoInit<class UMaterial*> Skins;
    BYTE AmbientGlow;
    class UConvexVolume* AntiPortal;
    BYTE Style;
    TArrayNoInit<class AActor*> DontAffectEchelonLighting;
    TArrayNoInit<class AActor*> ForcedLightsHack;
    BITFIELD bUnlit:1 GCC_PACK(4);
    BITFIELD bShadowCast:1;
    BITFIELD bStaticLighting:1;
    BITFIELD bDontAffectEchelonLighting:1;
    BITFIELD bJustVisibleNight:1;
    BITFIELD bJustVisibleHeat:1;
    BITFIELD bHurtEntry:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bTravel:1;
    BITFIELD bMovable:1;
    BITFIELD bLocalGameEvent:1;
    BITFIELD bTravelGameEvent:1;
    BITFIELD bPendingDelete:1;
    BITFIELD bAttachViaSkel:1;
    BITFIELD StopSoundsWhenKilled:1;
    BITFIELD CurrentFoot:1;
    BITFIELD bClimbable:1;
    BITFIELD bNoSplitJump:1;
    BITFIELD bNoBTW:1;
    BITFIELD bBatmanHack:1;
    BITFIELD bNPCBulletGoTru:1;
    BITFIELD bPlayerBulletGoTru:1;
    FLOAT SoundRadiusSaturation GCC_PACK(4);
    FLOAT SoundRadiusBackground;
    BYTE SurfaceType;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    class UStaticMesh* CollisionPrimitive;
    BITFIELD bCollideActors:1 GCC_PACK(4);
    BITFIELD bCollideWorld:1;
    BITFIELD bStaticMeshCylColl:1;
    BITFIELD bCollideSB:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockProj:1;
    BITFIELD bBlockBullet:1;
    BITFIELD bBlockCamera:1;
    BITFIELD bBlockNPCShot:1;
    BITFIELD bBlockNPCVision:1;
    BITFIELD bBlockPeeking:1;
    BITFIELD bCPBlockPlayers:1;
    BITFIELD bCPBlockActors:1;
    BITFIELD bCPBlockProj:1;
    BITFIELD bCPBlockBullet:1;
    BITFIELD bCPBlockCamera:1;
    BITFIELD bCPBlockNPCShot:1;
    BITFIELD bCPBlockNPCVision:1;
    BITFIELD bSpecialLit:1;
    BITFIELD bCorona:1;
    BITFIELD bLightChanged:1;
    BYTE LightType GCC_PACK(4);
    BYTE ELightTypeInitial;
    BITFIELD RestoreInitialLightType:1 GCC_PACK(4);
    BITFIELD DisableIfOppositeShadowMode:1;
    BYTE LightEffect GCC_PACK(4);
    BYTE LightBrightness;
    BYTE LightHue;
    BYTE LightSaturation;
    BYTE LightRadius;
    BYTE LightPeriod;
    BYTE LightPhase;
    BYTE LightCone;
    BYTE VolumeBrightness;
    BYTE VolumeRadius;
    BYTE VolumeFog;
    TArrayNoInit<INT> LightLeaves;
    TArrayNoInit<INT> LightZones;
    TArrayNoInit<FCacheSurfaceInfo> LightNodes;
    BITFIELD bLightCachingValid:1 GCC_PACK(4);
    BITFIELD bSideFadeEffect:1;
    BITFIELD bJustInGlow:1;
    BITFIELD bGlowDisplay:1;
    BITFIELD bInvalidateLightCachingIfMoved:1;
    BITFIELD UsesSpotLightBeam:1;
    class UStaticMesh* VolumeLightMesh GCC_PACK(4);
    FLOAT VolumeTotalFalloffScale;
    BYTE VolumeInitialAlpha;
    BYTE AmbientBrightness;
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    FLOAT TurnOffDistance;
    FLOAT TurnOffDistancePercentageFadeIn;
    FLOAT MinDistance;
    FLOAT MaxDistance;
    FLOAT GF2LightBeamMaxDistance;
    FLOAT SpotHeight;
    FLOAT SpotWidth;
    class UELightBeamMaterial* SpotProjectedMaterial;
    INT FrustumPointer;
    FLOAT HeatOpacity;
    FLOAT HeatRadius;
    FLOAT HeatIntensity;
    class UEModifier* Modifier;
    BYTE ChangeType;
    class AActor* nextChangedActor;
    FVector TrailerOffset;
    BITFIELD bIsSoftBody:1 GCC_PACK(4);
    BITFIELD bIsRope:1;
    BITFIELD bIsPawn:1;
    BITFIELD bIsPlayerPawn:1;
    BITFIELD bIsNPCPawn:1;
    BITFIELD bIsMover:1;
    BITFIELD bIsTrapMover:1;
    BITFIELD bIsVolume:1;
    BITFIELD bIsNavPoint:1;
    BITFIELD bIsNavMarker:1;
    BITFIELD bIsEchelonLight:1;
    BITFIELD bIsGamePlayObject:1;
    BITFIELD bIsProjectile:1;
    BITFIELD bIsProjector:1;
    BITFIELD bIsCollisionMesh:1;
    BITFIELD bIsTouchable:1;
    BITFIELD bIsNPCRelevant:1;
    BITFIELD bIsPlayerRelevant:1;
    BITFIELD bRenderLast:1;
    BITFIELD bVisibilityCalculated:1;
    FLOAT VisibilityFactor GCC_PACK(4);
    FLOAT AmbientPlayRadius;
    FLOAT AmbientStopRadius;
    class UClass* InteractionClass;
    class AEInteractObject* Interaction;
    FLOAT Mass;
    FRotator RotationRate;
    FRotator DesiredRotation;
    class AActor* PendingTouch;
    FVector ColLocation;
    FRotator ColRotation;
    BITFIELD bBounce:1 GCC_PACK(4);
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotateToDesired:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    BITFIELD bHiddenEd:1;
    BITFIELD bHiddenEdGroup:1;
    BITFIELD bDirectional:1;
    BITFIELD bSelected:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    BITFIELD bObsolete:1;
    BITFIELD bPathColliding:1;
    BITFIELD bPathTemp:1;
    BITFIELD bScriptInitialized:1;
    BITFIELD bRenderAtEndOfFrame:1;
    BITFIELD bAffectOwnZoneOnly:1;
    INT iRenderPriority GCC_PACK(4);
    BITFIELD HideInLowQuality:1 GCC_PACK(4);
    DECLARE_FUNCTION(execMakeNoise);
    DECLARE_FUNCTION(execRemoveChangedActor);
    DECLARE_FUNCTION(execAddChangedActor);
    DECLARE_FUNCTION(execFastPointCheck);
    DECLARE_FUNCTION(execTraceTarget);
    DECLARE_FUNCTION(execTraceBone);
    DECLARE_FUNCTION(execFastTraceBsp);
    DECLARE_FUNCTION(execSynchAnim);
    DECLARE_FUNCTION(execGetAnimTime);
    DECLARE_FUNCTION(execStopSleep);
    DECLARE_FUNCTION(execGetBoundingBox);
    DECLARE_FUNCTION(execGetVisibilityFactor);
    DECLARE_FUNCTION(execGetVectorFrom);
    DECLARE_FUNCTION(execSetCollisionPrim);
    DECLARE_FUNCTION(execSetStaticMesh);
    DECLARE_FUNCTION(execInterpolateRotator);
    DECLARE_FUNCTION(execInterpolateRotatorValue);
    DECLARE_FUNCTION(execMultiply_ColorFloat);
    DECLARE_FUNCTION(execAdd_ColorColor);
    DECLARE_FUNCTION(execMultiply_FloatColor);
    DECLARE_FUNCTION(execSubtract_ColorColor);
    DECLARE_FUNCTION(execCollidingActors);
    DECLARE_FUNCTION(execVisibleCollidingActors);
    DECLARE_FUNCTION(execVisibleActors);
    DECLARE_FUNCTION(execRadiusActors);
    DECLARE_FUNCTION(execTraceActors);
    DECLARE_FUNCTION(execTouchingActors);
    DECLARE_FUNCTION(execBasedActors);
    DECLARE_FUNCTION(execChildActors);
    DECLARE_FUNCTION(execDynamicActors);
    DECLARE_FUNCTION(execAllActors);
    DECLARE_FUNCTION(execIsLocationInRainVolume);
    DECLARE_FUNCTION(execPlayerCanSeeMe);
    DECLARE_FUNCTION(execGetGameOptions);
    DECLARE_FUNCTION(execIsGameOver);
    DECLARE_FUNCTION(execStartFadeOut);
    DECLARE_FUNCTION(execFlushRequests);
    DECLARE_FUNCTION(execSetLaserLocked);
    DECLARE_FUNCTION(execSetLaserMicSession);
    DECLARE_FUNCTION(execResumeSound);
    DECLARE_FUNCTION(execPauseSound);
    DECLARE_FUNCTION(execAddOneVoice);
    DECLARE_FUNCTION(execDistancePointToLine);
    DECLARE_FUNCTION(execSetDASkinGlowIntensity);
    DECLARE_FUNCTION(execToLocalDir);
    DECLARE_FUNCTION(execToLocal);
    DECLARE_FUNCTION(execToWorldDir);
    DECLARE_FUNCTION(execToWorld);
    DECLARE_FUNCTION(execStopSound);
    DECLARE_FUNCTION(execSetReverbEffect);
    DECLARE_FUNCTION(execVerifyOcclusion);
    DECLARE_FUNCTION(execAddSoundRequest);
    DECLARE_FUNCTION(execStopAllSounds);
    DECLARE_FUNCTION(execCanPlayMusic);
    DECLARE_FUNCTION(execStopAllSoundsActor);
    DECLARE_FUNCTION(execStopAllVoicesActor);
    DECLARE_FUNCTION(execIsPlayingAnyActor);
    DECLARE_FUNCTION(execIsPlaying);
    DECLARE_FUNCTION(execGetVolumeLineValue);
    DECLARE_FUNCTION(execSetVolumeLineValue);
    DECLARE_FUNCTION(execGetSoundPosition);
    DECLARE_FUNCTION(execGetSoundDuration);
    DECLARE_FUNCTION(execPlaySound);
    DECLARE_FUNCTION(execSetTimer);
    DECLARE_FUNCTION(execDestroy);
    DECLARE_FUNCTION(execSpawn);
    DECLARE_FUNCTION(execFastTrace);
    DECLARE_FUNCTION(execTrace);
    DECLARE_FUNCTION(execFindSlopeRotation);
    DECLARE_FUNCTION(execFindBulletExit);
    DECLARE_FUNCTION(execGetCurrentMapName);
    DECLARE_FUNCTION(execGetCanvas);
    DECLARE_FUNCTION(execSetPhysics);
    DECLARE_FUNCTION(execFinishInterpolation);
    DECLARE_FUNCTION(execAnimIsInGroup);
    DECLARE_FUNCTION(execGetAnimParams);
    DECLARE_FUNCTION(execSetBoneRotation);
    DECLARE_FUNCTION(execSetBoneLocation);
    DECLARE_FUNCTION(execSetBoneDirection);
    DECLARE_FUNCTION(execSetBoneScale);
    DECLARE_FUNCTION(execLockRootMotion);
    DECLARE_FUNCTION(execDetachFromBone);
    DECLARE_FUNCTION(execAttachToBone);
    DECLARE_FUNCTION(execGetRootRotationDelta);
    DECLARE_FUNCTION(execGetRootLocationDelta);
    DECLARE_FUNCTION(execGetRootRotation);
    DECLARE_FUNCTION(execGetRootLocation);
    DECLARE_FUNCTION(execGetBoneRotation);
    DECLARE_FUNCTION(execSetIKFade);
    DECLARE_FUNCTION(execGetBoneCoords);
    DECLARE_FUNCTION(execAnimBlendToAlpha);
    DECLARE_FUNCTION(execAnimBlendParams);
    DECLARE_FUNCTION(execLinkSkelAnim);
    DECLARE_FUNCTION(execGetNotifyChannel);
    DECLARE_FUNCTION(execEnableChannelNotify);
    DECLARE_FUNCTION(execIsAnimBackward);
    DECLARE_FUNCTION(execIsTweening);
    DECLARE_FUNCTION(execStopAnimating);
    DECLARE_FUNCTION(execHasAnim);
    DECLARE_FUNCTION(execFinishAnim);
    DECLARE_FUNCTION(execIsAnimating);
    DECLARE_FUNCTION(execTweenAnim);
    DECLARE_FUNCTION(execLoopAnim);
    DECLARE_FUNCTION(execPlayAnim);
    DECLARE_FUNCTION(execSetOwner);
    DECLARE_FUNCTION(execFindBase);
    DECLARE_FUNCTION(execSetBase);
    DECLARE_FUNCTION(execAutonomousPhysics);
    DECLARE_FUNCTION(execMoveSmooth);
    DECLARE_FUNCTION(execSetRelativeLocation);
    DECLARE_FUNCTION(execSetRelativeRotation);
    DECLARE_FUNCTION(execSetRotation);
    DECLARE_FUNCTION(execSetLocation);
    DECLARE_FUNCTION(execMove);
    DECLARE_FUNCTION(execSetDrawType);
    DECLARE_FUNCTION(execSetDrawScale3D);
    DECLARE_FUNCTION(execSetDrawScale);
    DECLARE_FUNCTION(execSetCollisionSize);
    DECLARE_FUNCTION(execSetCollision);
    DECLARE_FUNCTION(execSleep);
    DECLARE_FUNCTION(execFlushMouseMoveMessages);
    DECLARE_FUNCTION(execSkipPresent);
    DECLARE_FUNCTION(execError);
    DECLARE_FUNCTION(execConsoleCommand);
    void eventAttachedMoved()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_AttachedMoved),NULL);
    }
    BYTE eventGetActorVisibility()
    {
        AActor_eventGetActorVisibility_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetActorVisibility),&Parms);
        return Parms.ReturnValue;
    }
    BYTE eventVisibilityTableLookup(FLOAT BaseVisibility)
    {
        AActor_eventVisibilityTableLookup_Parms Parms;
        Parms.ReturnValue=0;
        Parms.BaseVisibility=BaseVisibility;
        ProcessEvent(FindFunctionChecked(ENGINE_VisibilityTableLookup),&Parms);
        return Parms.ReturnValue;
    }
    void eventTriggerEvent(FName EventName, class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTriggerEvent_Parms Parms;
        Parms.EventName=EventName;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerEvent),&Parms);
    }
    void eventSetInitialState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
    }
    void eventPostBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
    }
    void eventPreBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
    }
    void eventBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
    }
    void eventPostTeleport(class ATeleporter* OutTeleporter)
    {
        AActor_eventPostTeleport_Parms Parms;
        Parms.OutTeleporter=OutTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&Parms);
    }
    BITFIELD eventPreTeleport(class ATeleporter* InTeleporter)
    {
        AActor_eventPreTeleport_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InTeleporter=InTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
        return Parms.ReturnValue;
    }
    void eventBulletWentTru(class AActor* Instigator, FVector HitLocation, FVector HitNormal, FVector Momentum, class UMaterial* HitMaterial)
    {
        AActor_eventBulletWentTru_Parms Parms;
        Parms.Instigator=Instigator;
        Parms.HitLocation=HitLocation;
        Parms.HitNormal=HitNormal;
        Parms.Momentum=Momentum;
        Parms.HitMaterial=HitMaterial;
        ProcessEvent(FindFunctionChecked(ENGINE_BulletWentTru),&Parms);
    }
    void eventTakeDamage(INT Damage, class APawn* EventInstigator, FVector HitLocation, FVector HitNormal, FVector Momentum, class UClass* DamageType, INT PillTag)
    {
        AActor_eventTakeDamage_Parms Parms;
        Parms.Damage=Damage;
        Parms.EventInstigator=EventInstigator;
        Parms.HitLocation=HitLocation;
        Parms.HitNormal=HitNormal;
        Parms.Momentum=Momentum;
        Parms.DamageType=DamageType;
        Parms.PillTag=PillTag;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
    }
    void eventKilledBy(class APawn* EventInstigator)
    {
        AActor_eventKilledBy_Parms Parms;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&Parms);
    }
    void eventFellOutOfWorld()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld),NULL);
    }
    void eventUsedBy(class APawn* User)
    {
        AActor_eventUsedBy_Parms Parms;
        Parms.User=User;
        ProcessEvent(FindFunctionChecked(ENGINE_UsedBy),&Parms);
    }
    void eventEndedRotation()
    {
        if(IsProbing(NAME_EndedRotation)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EndedRotation),NULL);
        }
    }
    void eventEncroachedBy(class AActor* Other)
    {
        AActor_eventEncroachedBy_Parms Parms;
        if(IsProbing(NAME_EncroachedBy)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachedBy),&Parms);
        }
    }
    BITFIELD eventEncroachingOn(class AActor* Other)
    {
        AActor_eventEncroachingOn_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_EncroachingOn)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachingOn),&Parms);
        }
        return Parms.ReturnValue;
    }
    class AActor* eventSpecialHandling(class APawn* Other)
    {
        AActor_eventSpecialHandling_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_SpecialHandling)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialHandling),&Parms);
        }
        return Parms.ReturnValue;
    }
    void eventDetach(class AActor* Other)
    {
        AActor_eventDetach_Parms Parms;
        if(IsProbing(NAME_Detach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach),&Parms);
        }
    }
    void eventAttach(class AActor* Other)
    {
        AActor_eventAttach_Parms Parms;
        if(IsProbing(NAME_Attach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach),&Parms);
        }
    }
    void eventBaseChange()
    {
        if(IsProbing(NAME_BaseChange)) {
        ProcessEvent(FindFunctionChecked(ENGINE_BaseChange),NULL);
        }
    }
    void eventBump(class AActor* Other, INT Pill)
    {
        AActor_eventBump_Parms Parms;
        if(IsProbing(NAME_Bump)) {
        Parms.Other=Other;
        Parms.Pill=Pill;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump),&Parms);
        }
    }
    void eventUnTouch(class AActor* Other)
    {
        AActor_eventUnTouch_Parms Parms;
        if(IsProbing(NAME_UnTouch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch),&Parms);
        }
    }
    void eventPostTouch(class AActor* Other)
    {
        AActor_eventPostTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTouch),&Parms);
    }
    void eventTouch(class AActor* Other)
    {
        AActor_eventTouch_Parms Parms;
        if(IsProbing(NAME_Touch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch),&Parms);
        }
    }
    void eventPhysicsVolumeChange(class APhysicsVolume* NewVolume)
    {
        AActor_eventPhysicsVolumeChange_Parms Parms;
        if(IsProbing(NAME_PhysicsVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsVolumeChange),&Parms);
        }
    }
    void eventZoneChange(class AZoneInfo* NewZone)
    {
        AActor_eventZoneChange_Parms Parms;
        Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange),&Parms);
    }
    void eventLanded(FVector HitNormal)
    {
        AActor_eventLanded_Parms Parms;
        if(IsProbing(NAME_Landed)) {
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed),&Parms);
        }
    }
    void eventFalling()
    {
        if(IsProbing(NAME_Falling)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Falling),NULL);
        }
    }
    void eventHitWall(FVector HitNormal, class AActor* HitWall)
    {
        AActor_eventHitWall_Parms Parms;
        if(IsProbing(NAME_HitWall)) {
        Parms.HitNormal=HitNormal;
        Parms.HitWall=HitWall;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall),&Parms);
        }
    }
    void eventTimer()
    {
        if(IsProbing(NAME_Timer)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Timer),NULL);
        }
    }
    void eventEndEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
    }
    void eventBeginEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
    }
    void eventHitFakeBackDrop()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_HitFakeBackDrop),NULL);
    }
    void eventUnTrigger(class AActor* Other, class APawn* EventInstigator, FName InTag)
    {
        AActor_eventUnTrigger_Parms Parms;
        if(IsProbing(NAME_UnTrigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        Parms.InTag=InTag;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger),&Parms);
        }
    }
    void eventTrigger(class AActor* Other, class APawn* EventInstigator, FName InTag)
    {
        AActor_eventTrigger_Parms Parms;
        if(IsProbing(NAME_Trigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        Parms.InTag=InTag;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger),&Parms);
        }
    }
    void eventTick(FLOAT DeltaTime)
    {
        AActor_eventTick_Parms Parms;
        if(IsProbing(NAME_Tick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
        }
    }
    void eventLostChild(class AActor* Other)
    {
        AActor_eventLostChild_Parms Parms;
        if(IsProbing(NAME_LostChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild),&Parms);
        }
    }
    void eventGainedChild(class AActor* Other)
    {
        AActor_eventGainedChild_Parms Parms;
        if(IsProbing(NAME_GainedChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild),&Parms);
        }
    }
    void eventDestroyed()
    {
        if(IsProbing(NAME_Destroyed)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Destroyed),NULL);
        }
    }
    void eventAnimEnd(INT Channel)
    {
        AActor_eventAnimEnd_Parms Parms;
        if(IsProbing(NAME_AnimEnd)) {
        Parms.Channel=Channel;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEnd),&Parms);
        }
    }
    DECLARE_CLASS(AActor,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AActor)
};


class ENGINE_API AInfo : public AActor
{
public:
    DECLARE_CLASS(AInfo,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInfo)
};

enum EAffect
{
    AFFECT_ViewportCamera   =0,
    AFFECT_Actor            =1,
    AFFECT_MAX              =2,
};

struct ASceneManager_eventSceneEnded_Parms
{
};
struct ASceneManager_eventSceneStarted_Parms
{
};
class ENGINE_API ASceneManager : public AInfo
{
public:
    TArrayNoInit<class UMatAction*> Actions;
    BYTE Affect;
    class AActor* AffectedActor;
    BITFIELD bLooping:1 GCC_PACK(4);
    BITFIELD bCinematicView:1;
    FLOAT PctSceneComplete GCC_PACK(4);
    class UMatAction* CurrentAction;
    FLOAT SceneSpeed;
    FLOAT TotalSceneTime;
    class AActor* Viewer;
    class APawn* OldPawn;
    BITFIELD bIsRunning:1 GCC_PACK(4);
    BITFIELD bIsSceneStarted:1;
    FLOAT CurrentTime GCC_PACK(4);
    TArrayNoInit<FVector> SampleLocations;
    TArrayNoInit<class UMatSubAction*> SubActions;
    FOrientation CamOrientation;
    FOrientation PrevOrientation;
    DECLARE_FUNCTION(execGetTotalSceneTime);
    void eventSceneEnded()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SceneEnded),NULL);
    }
    void eventSceneStarted()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SceneStarted),NULL);
    }
    DECLARE_CLASS(ASceneManager,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASceneManager)
};


struct AZoneInfo_eventActorLeaving_Parms
{
    class AActor* Other;
};
struct AZoneInfo_eventActorEntered_Parms
{
    class AActor* Other;
};
class ENGINE_API AZoneInfo : public AInfo
{
public:
    class ASkyZoneInfo* SkyZone;
    FName ZoneTag;
    BITFIELD bFogZone:1 GCC_PACK(4);
    BITFIELD bTerrainZone:1;
    BITFIELD bDistanceFog:1;
    BITFIELD PlayFightMusic:1;
    BITFIELD PlayStressMusic:1;
    BITFIELD PlayFisherMusic:1;
    BITFIELD bFlashlightZone:1;
    BYTE VolumeSize GCC_PACK(4);
    TArrayNoInit<class AActor*> CustomEchelonLightExclusion;
    TArrayNoInit<class ATerrainInfo*> Terrains;
    TArrayNoInit<class AEOceanInfo*> Oceans;
    BYTE AmbientBrightness;
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    FColor DistanceFogColor;
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    class UTexture* EnvironmentMap;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    TArrayNoInit<class USound*> m_EnterSounds;
    TArrayNoInit<class USound*> m_ExitSounds;
    BYTE Sound_type;
    BITFIELD InteriorZone:1 GCC_PACK(4);
    BITFIELD PlayExplorationMusic:1;
    BITFIELD UseReverb:1;
    BITFIELD hideOcean:1;
    INT ReverbEffect GCC_PACK(4);
    TArrayNoInit<class AZoneInfo*> ForcedHearingZones;
    DECLARE_FUNCTION(execZoneActors);
    void eventActorLeaving(class AActor* Other)
    {
        AZoneInfo_eventActorLeaving_Parms Parms;
        if(IsProbing(NAME_ActorLeaving)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
        }
    }
    void eventActorEntered(class AActor* Other)
    {
        AZoneInfo_eventActorEntered_Parms Parms;
        if(IsProbing(NAME_ActorEntered)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
        }
    }
    DECLARE_CLASS(AZoneInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AZoneInfo)
};


class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
    DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

enum ELevelAction
{
    LEVACT_None             =0,
    LEVACT_Loading          =1,
    LEVACT_Saving           =2,
    LEVACT_Connecting       =3,
    LEVACT_Precaching       =4,
    LEVACT_MAX              =5,
};

class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
    class UTexture* pThermalTexture_A;
    class UTexture* pThermalTexture_B;
    class UTexture* pThermalTexture_C;
    class UTexture* pThermalTexture_CheatA;
    class UTexture* pThermalTexture_CheatB;
    class UTexture* pThermalTexture_CheatC;
    class UTexture* pNoise0Gauss;
    class UTexture* pNoise0GaussGreen;
    class UTexture* pOmniAtten1D;
    class UTexture* pOmniAtten2D;
    class UTexture* pDistAtten8;
    class UTexture* pProjTexture;
    class UTexture* pThrowTexture;
    FAudioSaveData AudioData;
    TArrayNoInit<FSurfaceToSubTexLink> ImpactSurfaceToSubTexLink;
    TArrayNoInit<FSurfaceToSubTexLink> FootStepSurfaceToSubTexLink;
    TArrayNoInit<FImpactEmitterSurfaceLink> ImpactSurfaceToEmitterLink;
    TArrayNoInit<class UMeshAnimation*> UsedMeshAnimation;
    FLOAT TimeSeconds;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    class APlayerController* Pauser;
    class ULevelSummary* Summary;
    FStringNoInit VisibleGroups;
    BITFIELD bLonePlayer:1 GCC_PACK(4);
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BITFIELD bHighDetailMode:1;
    BITFIELD bDropDetail:1;
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bPathsRebuilt:1;
    BITFIELD m_bInLaserMicSession:1;
    BITFIELD m_bInMenu:1;
    FVector CameraLocationDynamic GCC_PACK(4);
    FVector CameraLocationTop;
    FVector CameraLocationFront;
    FVector CameraLocationSide;
    FRotator CameraRotationDynamic;
    FLOAT Brightness;
    class UTexture* DefaultTexture;
    class UTexture* WhiteSquareTexture;
    class UTexture* LargeVertex;
    BYTE LevelAction;
    BITFIELD bNeverPrecache:1 GCC_PACK(4);
    FStringNoInit ComputerName GCC_PACK(4);
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    class AGameInfo* Game;
    class ANavigationPoint* NavigationPointList;
    class AController* ControllerList;
    class ANavigationPoint* ValidAttackPoints[10];
    class ANavigationPoint* ValidCoverPoints[30];
    class ANavigationPoint* CurrentAttackPoint;
    class AController* CurrentController;
    FLOAT m_dT;
    BITFIELD bIsStartMenu:1 GCC_PACK(4);
    BITFIELD bIsInGameMenu:1;
    BITFIELD stepOneFrame:1;
    class AEVariable* VarObject GCC_PACK(4);
    class AActor* ChangedActorsList;
    class UERumble* Rumble;
    FStringNoInit SoundMapName;
    BITFIELD UseDefaultSoundMap:1 GCC_PACK(4);
    BITFIELD DownloadedMap:1;
    DECLARE_FUNCTION(execAddImpact);
    DECLARE_FUNCTION(execGetAddressURL);
    DECLARE_FUNCTION(execGetLocalURL);
    DECLARE_CLASS(ALevelInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALevelInfo)
};


struct AGameInfo_eventLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class APlayerController* ReturnValue;
};
struct AGameInfo_eventDetailChange_Parms
{
};
class ENGINE_API AGameInfo : public AInfo
{
public:
    BYTE Difficulty;
    BITFIELD bRestartLevel:1 GCC_PACK(4);
    BITFIELD bPauseable:1;
    BITFIELD bGameEnded:1;
    BITFIELD bWaitingToStartMatch:1;
    BITFIELD bChangeLevels:1;
    BITFIELD bAlreadyChanged:1;
    FLOAT StartTime GCC_PACK(4);
    FStringNoInit DefaultPlayerClassName;
    FStringNoInit DefaultPlayerName;
    FStringNoInit GameName;
    class APlayerController* PlayerC;
    FLOAT VisFullyThreshold;
    FLOAT VisMostlyThreshold;
    FLOAT VisPartiallyThreshold;
    FLOAT VisBarelyThreshold;
    FLOAT VisSpeedGain;
    FLOAT VisCrouchMul;
    FLOAT VisBackToWallMul;
    BITFIELD UseRumble:1 GCC_PACK(4);
    class UClass* PlayerControllerClass GCC_PACK(4);
    FStringNoInit PlayerControllerClassName;
    TArrayNoInit<FName> LocalGameEvents;
    TArrayNoInit<FName> TravelGameEvents;
    DECLARE_FUNCTION(execGameEventRegistered);
    DECLARE_FUNCTION(execRemoveGameEvent);
    DECLARE_FUNCTION(execAddTravelGameEvent);
    DECLARE_FUNCTION(execAddLocalGameEvent);
    class APlayerController* eventLogin(const FString& Portal, const FString& Options, FString& Error)
    {
        AGameInfo_eventLogin_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    void eventDetailChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
    }
    DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};


class ENGINE_API AStaticMeshActor : public AActor
{
public:
    FMatrix globalMatrix;
    BYTE globalValid;
    BITFIELD bAlreadyVisited:1 GCC_PACK(4);
    BITFIELD bTriggerOnlyOnce:1;
    BITFIELD bQuietWhenCrouched:1;
    BITFIELD bMakeAINoise:1;
    BITFIELD NPCTrigger:1;
    BYTE SoundType GCC_PACK(4);
    class USound* SoundEvent;
    FLOAT Radius;
    class USound* BulletHitMetal;
    class USound* BulletHitVine;
    DECLARE_CLASS(AStaticMeshActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStaticMeshActor)
};


class ENGINE_API ACollisionMeshActor : public AStaticMeshActor
{
public:
    DECLARE_CLASS(ACollisionMeshActor,AStaticMeshActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ACollisionMeshActor)
};

enum EProjectorBlending
{
    PB_None                 =0,
    PB_Modulate             =1,
    PB_AlphaBlend           =2,
    PB_Add                  =3,
    PB_Darken               =4,
    PB_MAX                  =5,
};

class ENGINE_API AProjector : public AActor
{
public:
    BYTE MaterialBlendingOp;
    BYTE FrameBufferBlendingOp;
    class UMaterial* ProjTexture;
    class UMaterial* ProjShadowTexture;
    class UMaterial* ProjOnBSPTex;
    class UMaterial* ProjOnActorTex;
    class UMaterial* ProjOnStaticMeshTex;
    BYTE SPSpotTextureIntensity;
    BYTE SPShadowIntensity;
    BYTE SPShadowBlurFactor;
    BYTE SPShadowTextureIntensity;
    INT FOV;
    INT MaxTraceDistance;
    BITFIELD bProjectCrossZone:1 GCC_PACK(4);
    BITFIELD bProjectBSP:1;
    BITFIELD bProjectTerrain:1;
    BITFIELD bProjectStaticMesh:1;
    BITFIELD bProjectActor:1;
    BITFIELD bLevelStatic:1;
    BITFIELD bClipBSP:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bProjectorType2:1;
    FName ProjectTag GCC_PACK(4);
    BITFIELD bGradient:1 GCC_PACK(4);
    class UTexture* GradientTexture GCC_PACK(4);
    BITFIELD bProjectOnAlpha:1 GCC_PACK(4);
    BITFIELD bProjectOnParallelBSP:1;
    INT DistanceToNearestStaticMesh GCC_PACK(4);
    BITFIELD HashTableInitialized:1 GCC_PACK(4);
    BITFIELD DisableDistanceCheck:1;
    FPlane FrustumPlanes[6] GCC_PACK(4);
    FVector FrustumVertices[8];
    FVector LastPos;
    FRotator LastRot;
    FBox Box;
    class UProjectorRenderInfo* RenderInfo;
    FMatrix GradientMatrix;
    FMatrix SubTexMatrix;
    FMatrix Matrix;
    FVector OldLocation;
    TArrayNoInit<INT> NodeList;
    TArrayNoInit<INT> StaticMeshList;
    BITFIELD Invert:1 GCC_PACK(4);
    BITFIELD IsMoved:1;
    INT DecalX GCC_PACK(4);
    INT DecalY;
    INT DecalWidth;
    INT DecalHeight;
    INT InCurrentCamera;
    FLOAT DecalScale;
    DECLARE_FUNCTION(execDetachActor);
    DECLARE_FUNCTION(execAttachActor);
    DECLARE_FUNCTION(execAbandonProjector);
    DECLARE_FUNCTION(execDetachProjector);
    DECLARE_FUNCTION(execAttachProjector);
    DECLARE_CLASS(AProjector,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AProjector)
};


class ENGINE_API AShadowProjector : public AProjector
{
public:
    class UShadowBitmapMaterial* ShadowTexture;
    class UShadowBitmapMaterial* ShadowTextOnActor;
    class UShadowBitmapMaterial* ShadowTextOnStaticMesh;
    TArrayNoInit<FName> SPMustHaveStaticMeshList;
    TArrayNoInit<FName> SPMustHaveZoneInfoList;
    BYTE InitialLightBrightness;
    BYTE SPSpotHeight;
    BYTE SPSpotWidth;
    INT NbControllers;
    BYTE InitialLightType;
    BITFIELD InitialUsesBeam:1 GCC_PACK(4);
    BITFIELD bProjectorEnable:1;
    BITFIELD bTreatAsStatic:1;
    BITFIELD bUseModulate2X:1;
    BITFIELD bUseStaticMeshListOnly:1;
    BITFIELD bDontUseEdgeColor:1;
    BITFIELD ProjVisible:1;
    FLOAT LastTimeChange GCC_PACK(4);
    BITFIELD CacheInvalidate:1 GCC_PACK(4);
    BITFIELD ClipProjector:1;
    INT AdjustNearestStaticMeshOffset GCC_PACK(4);
    INT FadeOutOffset;
    FLOAT ActorDisplayFarDistance;
    BITFIELD Initialized:1 GCC_PACK(4);
    FLOAT SquareOffsetDistanceNear GCC_PACK(4);
    FLOAT SquareOffsetDistanceFar;
    BITFIELD bEnableFadeOut:1 GCC_PACK(4);
    DECLARE_CLASS(AShadowProjector,AProjector,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AShadowProjector)
};


class ENGINE_API AKeypoint : public AActor
{
public:
    DECLARE_CLASS(AKeypoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};


class ENGINE_API ALookTarget : public AKeypoint
{
public:
    DECLARE_CLASS(ALookTarget,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALookTarget)
};


class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
    DECLARE_CLASS(AInterpolationPoint,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInterpolationPoint)
};


class ENGINE_API APolyMarker : public AKeypoint
{
public:
    DECLARE_CLASS(APolyMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APolyMarker)
};


class ENGINE_API AClipMarker : public AKeypoint
{
public:
    DECLARE_CLASS(AClipMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};


struct APawn_eventPlayDying_Parms
{
    class UClass* DamageType;
    FVector HitLoc;
};
struct APawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventStartCrouch_Parms
{
    FLOAT HeightAdjust;
};
struct APawn_eventEndCrouch_Parms
{
    FLOAT HeightAdjust;
};
class ENGINE_API APawn : public AActor
{
public:
    class AController* Controller;
    BITFIELD bIsWalking:1 GCC_PACK(4);
    BITFIELD bWantsToCrouch:1;
    BITFIELD bIsCrouched:1;
    BITFIELD bIsStuck:1;
    BITFIELD bIsDog:1;
    BITFIELD bTryToUncrouch:1;
    BITFIELD bCanCrouch:1;
    BITFIELD bReducedSpeed:1;
    BITFIELD bCanJump:1;
    BITFIELD bCanWalk:1;
    BITFIELD bAvoidLedges:1;
    BITFIELD bStopAtLedges:1;
    BITFIELD bUpdateEyeheight:1;
    BITFIELD bNoVelocityUpdate:1;
    BITFIELD bCanFallWalk:1;
    BITFIELD bDontPossess:1;
    BITFIELD bPhysicsAnimUpdate:1;
    BITFIELD bWasCrouched:1;
    BITFIELD bWasWalking:1;
    BITFIELD bWasOnGround:1;
    BITFIELD bInitializeAnimation:1;
    BYTE Visibility GCC_PACK(4);
    FLOAT DesiredSpeed;
    FLOAT MaxDesiredSpeed;
    FName AnimSequence;
    FLOAT AnimFrame;
    FLOAT AnimRate;
    FLOAT AvgPhysicsTime;
    FLOAT MeleeRange;
    class ANavigationPoint* Anchor;
    FLOAT UncrouchTime;
    FLOAT GroundSpeed;
    FLOAT AirSpeed;
    FLOAT AccelRate;
    FLOAT JumpZ;
    FLOAT AirControl;
    FLOAT WalkingPct;
    FLOAT MaxFallSpeed;
    FLOAT WalkingRatio;
    FLOAT SoundWalkingRatio;
    FStringNoInit OwnerName;
    FLOAT BaseEyeHeight;
    FLOAT EyeHeight;
    FVector Floor;
    FLOAT SplashTime;
    FLOAT CrouchHeight;
    FLOAT CrouchRadius;
    FLOAT OldZ;
    class APhysicsVolume* HeadVolume;
    INT Health;
    class UClass* ReducedDamageType;
    FStringNoInit MenuName;
    class AProjector* Shadow;
    class UClass* ControllerClass;
    BYTE OldPhysics;
    INT OldRotYaw;
    FVector OldAcceleration;
    class AActor* ControlledActor;
    FLOAT LinearSpeed;
    FVector m_locationStart;
    FVector m_locationEnd;
    FRotator m_orientationStart;
    FRotator m_orientationEnd;
    FName m_GroupTag;
    BITFIELD m_validFence:1 GCC_PACK(4);
    BITFIELD bCanUseRetinalScanner:1;
    BITFIELD bCanUseKeyPad:1;
    BITFIELD bCanClimbLadders:1;
    BITFIELD bCanOpenDoors:1;
    BITFIELD bLOSHearing:1;
    BITFIELD bSameZoneHearing:1;
    BITFIELD bAdjacentZoneHearing:1;
    BITFIELD bMuffledHearing:1;
    BITFIELD bAroundCornerHearing:1;
    FLOAT HearingThreshold GCC_PACK(4);
    FLOAT TeammateHearingBoost;
    class USound* NPCComm;
    FVector LastNoiseLocation;
    FLOAT LastNoiseRadius;
    FVector m_NormalArmsZone;
    FLOAT m_NormalArmsRadius;
    FVector m_CrouchedArmsZone;
    FLOAT m_CrouchedArmsRadius;
    FVector m_LedgeGrabArmsZone;
    FLOAT m_LedgeGrabArmsRadius;
    FVector m_HandOverHandArmsZone;
    FLOAT m_HandOverHandArmsRadius;
    FVector m_NarrowLadderArmsZone;
    FLOAT m_NarrowLadderArmsRadius;
    FVector m_PipeArmsZone;
    FLOAT m_PipeArmsRadius;
    FVector m_ZipLineArmsZone;
    FLOAT m_ZipLineArmsRadius;
    FVector m_FenceArmsZone;
    FLOAT m_FenceArmsRadius;
    FVector m_NormalFeetZone;
    FLOAT m_NormalFeetRadius;
    FVector m_CrouchedFeetZone;
    FLOAT m_CrouchedFeetRadius;
    FVector m_PoleArmsZone;
    FLOAT m_PoleArmsRadius;
    FVector m_CurrentArmsZone;
    FLOAT m_CurrentArmsRadius;
    FVector m_CurrentFeetZone;
    FLOAT m_CurrentFeetRadius;
    BITFIELD m_LegdeInFeet:1 GCC_PACK(4);
    BITFIELD m_LegdePushing:1;
    DECLARE_FUNCTION(execIsCrouch);
    DECLARE_FUNCTION(execUnCrouch);
    DECLARE_FUNCTION(execCrouch);
    DECLARE_FUNCTION(execCheckFence);
    void eventPlayDying(class UClass* DamageType, FVector HitLoc)
    {
        APawn_eventPlayDying_Parms Parms;
        Parms.DamageType=DamageType;
        Parms.HitLoc=HitLoc;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayDying),&Parms);
    }
    void eventUpdateEyeHeight(FLOAT DeltaTime)
    {
        APawn_eventUpdateEyeHeight_Parms Parms;
        if(IsProbing(NAME_UpdateEyeHeight)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateEyeHeight),&Parms);
        }
    }
    void eventStartCrouch(FLOAT HeightAdjust)
    {
        APawn_eventStartCrouch_Parms Parms;
        Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_StartCrouch),&Parms);
    }
    void eventEndCrouch(FLOAT HeightAdjust)
    {
        APawn_eventEndCrouch_Parms Parms;
        Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_EndCrouch),&Parms);
    }
    DECLARE_CLASS(APawn,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APawn)
};


class ENGINE_API AScout : public APawn
{
public:
    FLOAT MaxLandingVelocity;
    DECLARE_CLASS(AScout,APawn,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AScout)
};


class ENGINE_API AEmitter : public AActor
{
public:
    TArrayNoInit<class UParticleEmitter*> Emitters;
    BITFIELD AutoDestroy:1 GCC_PACK(4);
    BITFIELD AutoReset:1;
    BITFIELD DisableFogging:1;
    FRangeVector GlobalOffsetRange GCC_PACK(4);
    FRange TimeTillResetRange;
    INT Initialized;
    FBox BoundingBox;
    FLOAT EmitterRadius;
    FLOAT EmitterHeight;
    BITFIELD ActorForcesEnabled:1 GCC_PACK(4);
    FVector GlobalOffset GCC_PACK(4);
    FLOAT TimeTillReset;
    BITFIELD UseParticleProjectors:1 GCC_PACK(4);
    class UParticleMaterial* ParticleMaterial GCC_PACK(4);
    BITFIELD DeleteParticleEmitters:1 GCC_PACK(4);
    DECLARE_FUNCTION(execKill);
    DECLARE_CLASS(AEmitter,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AEmitter)
};

enum EBumpType
{
    BT_PlayerBump           =0,
    BT_PawnBump             =1,
    BT_AnyBump              =2,
    BT_MAX                  =3,
};
enum EMoverGlideType
{
    MV_MoveByTime           =0,
    MV_GlideByTime          =1,
    MV_MAX                  =2,
};
enum EMoverEncroachType
{
    ME_StopWhenEncroach     =0,
    ME_ReturnWhenEncroach   =1,
    ME_CrushWhenEncroach    =2,
    ME_IgnoreWhenEncroach   =3,
    ME_MAX                  =4,
};

struct AMover_eventKeyFrameReached_Parms
{
};
struct AMover_eventGetBasePos_Parms
{
    FVector ReturnValue;
};
class ENGINE_API AMover : public AActor
{
public:
    BYTE MoverEncroachType;
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    FLOAT MoveTime;
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    FName PlayerBumpEvent GCC_PACK(4);
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class AMover* Leader;
    class AMover* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    class USound* OpeningSound;
    class USound* OpenedSound;
    TArrayNoInit<class USound*> OpeningSoundEvents;
    class USound* OpeningStealthSound;
    TArrayNoInit<class USound*> OpeningStealthSoundEvents;
    class USound* ClosedSound;
    TArrayNoInit<class USound*> ClosedSoundEvents;
    class USound* ClosingSound;
    class USound* LockedSound;
    BYTE SoundType;
    FLOAT DoorNoiseRadius;
    INT iSoundNb;
    BITFIELD bQuietMover:1 GCC_PACK(4);
    FVector KeyPos[8] GCC_PACK(4);
    FRotator KeyRot[8];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    class ANavigationPoint* myMarker;
    BITFIELD bOpening:1 GCC_PACK(4);
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bClosing:1;
    BITFIELD bClosed:1;
    BITFIELD bPlayerOnly:1;
    BITFIELD bSteatlh:1;
    FVector SimOldPos GCC_PACK(4);
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    void eventKeyFrameReached()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KeyFrameReached),NULL);
    }
    FVector eventGetBasePos()
    {
        AMover_eventGetBasePos_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBasePos),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AMover,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMover)
};


class ENGINE_API AEPlayerInfo : public AActor
{
public:
    FStringNoInit PlayerName;
    INT ControllerScheme;
    INT Difficulty;
    FStringNoInit GameSave[3];
    FStringNoInit GameSaveRealMap[3];
    INT MapCompleted;
    FStringNoInit UnlockedMap[14];
    BITFIELD bDownloadableMapsExists:1 GCC_PACK(4);
    FStringNoInit GamePath GCC_PACK(4);
    INT PosX;
    INT PosY;
    INT MusicVol;
    INT VoiceVol;
    INT SfxVol;
    INT AmbVol;
    INT iLastSaveType;
    BITFIELD bValidProfile:1 GCC_PACK(4);
    DECLARE_CLASS(AEPlayerInfo,AActor,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AEPlayerInfo)
};


class ENGINE_API AAntiPortalActor : public AActor
{
public:
    DECLARE_CLASS(AAntiPortalActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAntiPortalActor)
};

enum ECsgOper
{
    CSG_Active              =0,
    CSG_Add                 =1,
    CSG_Subtract            =2,
    CSG_Intersect           =3,
    CSG_Deintersect         =4,
    CSG_MAX                 =5,
};

class ENGINE_API ABrush : public AActor
{
public:
    BYTE CsgOper;
    class UObject* UnusedLightMesh;
    FVector PostPivot;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    INT PolyFlags;
    BITFIELD bColored:1 GCC_PACK(4);
    DECLARE_CLASS(ABrush,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ABrush)
};


class ENGINE_API AVolume : public ABrush
{
public:
    class AActor* AssociatedActor;
    FName AssociatedActorTag;
    INT LocationPriority;
    FStringNoInit LocationName;
    DECLARE_FUNCTION(execEncompLoc);
    DECLARE_FUNCTION(execEncompasses);
    DECLARE_CLASS(AVolume,ABrush,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVolume)
};


struct APhysicsVolume_eventPawnLeavingVolume_Parms
{
    class APawn* Other;
};
struct APhysicsVolume_eventPawnEnteredVolume_Parms
{
    class APawn* Other;
};
struct APhysicsVolume_eventActorLeavingVolume_Parms
{
    class AActor* Other;
};
struct APhysicsVolume_eventActorEnteredVolume_Parms
{
    class AActor* Other;
};
class ENGINE_API APhysicsVolume : public AVolume
{
public:
    FVector ZoneVelocity;
    FVector Gravity;
    FLOAT GroundFriction;
    FLOAT TerminalVelocity;
    FLOAT DamagePerSec;
    class UClass* DamageType;
    INT Priority;
    class USound* EntrySound;
    class USound* ExitSound;
    class UClass* EntryActor;
    class UClass* ExitActor;
    FLOAT FluidFriction;
    BITFIELD bPainCausing:1 GCC_PACK(4);
    BITFIELD bMoveProjectiles:1;
    BITFIELD bBounceVelocity:1;
    BITFIELD bWaterVolume:1;
    class AInfo* PainTimer GCC_PACK(4);
    BITFIELD bDistanceFog:1 GCC_PACK(4);
    FColor DistanceFogColor GCC_PACK(4);
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    void eventPawnLeavingVolume(class APawn* Other)
    {
        APhysicsVolume_eventPawnLeavingVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnLeavingVolume),&Parms);
    }
    void eventPawnEnteredVolume(class APawn* Other)
    {
        APhysicsVolume_eventPawnEnteredVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnEnteredVolume),&Parms);
    }
    void eventActorLeavingVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorLeavingVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeavingVolume),&Parms);
    }
    void eventActorEnteredVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorEnteredVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEnteredVolume),&Parms);
    }
    DECLARE_CLASS(APhysicsVolume,AVolume,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APhysicsVolume)
};


class ENGINE_API ADefaultPhysicsVolume : public APhysicsVolume
{
public:
    DECLARE_CLASS(ADefaultPhysicsVolume,APhysicsVolume,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADefaultPhysicsVolume)
};


class ENGINE_API ATriggers : public AActor
{
public:
    DECLARE_CLASS(ATriggers,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggers)
};


struct ALineOfSightTrigger_eventPlayerSeesMe_Parms
{
    class APlayerController* P;
};
class ENGINE_API ALineOfSightTrigger : public ATriggers
{
public:
    FLOAT MaxViewDist;
    FLOAT OldTickTime;
    BITFIELD bEnabled:1 GCC_PACK(4);
    BITFIELD bTriggered:1;
    FName SeenActorTag GCC_PACK(4);
    class AActor* SeenActor;
    INT MaxViewAngle;
    FLOAT RequiredViewDir;
    void eventPlayerSeesMe(class APlayerController* P)
    {
        ALineOfSightTrigger_eventPlayerSeesMe_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerSeesMe),&Parms);
    }
    DECLARE_CLASS(ALineOfSightTrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALineOfSightTrigger)
};

enum ETriggerType
{
    TT_PlayerProximity      =0,
    TT_PawnProximity        =1,
    TT_ClassProximity       =2,
    TT_AnyProximity         =3,
    TT_Shoot                =4,
    TT_MAX                  =5,
};

class ENGINE_API ATrigger : public ATriggers
{
public:
    BYTE TriggerType;
    FStringNoInit Message;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bInitiallyActive:1;
    class UClass* ClassProximityType GCC_PACK(4);
    FLOAT RepeatTriggerTime;
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    BITFIELD bSavedInitialCollision:1 GCC_PACK(4);
    BITFIELD bSavedInitialActive:1;
    DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATrigger)
};


class ENGINE_API ADamageType : public AActor
{
public:
    DECLARE_CLASS(ADamageType,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADamageType)
};

enum EAttitude
{
    ATTITUDE_Fear           =0,
    ATTITUDE_Hate           =1,
    ATTITUDE_Frenzy         =2,
    ATTITUDE_Threaten       =3,
    ATTITUDE_Ignore         =4,
    ATTITUDE_Friendly       =5,
    ATTITUDE_Follow         =6,
    ATTITUDE_MAX            =7,
};

struct AController_eventEnemyNotVisible_Parms
{
};
struct AController_eventUpdateTactics_Parms
{
};
struct AController_eventSeeMonster_Parms
{
    class APawn* Seen;
};
struct AController_eventSeePlayer_Parms
{
    class APawn* Seen;
};
struct AController_eventHearNoise_Parms
{
    FLOAT Loudness;
    class AActor* NoiseMaker;
};
struct AController_eventPrepareForMove_Parms
{
    class ANavigationPoint* Goal;
    class UReachSpec* Path;
};
struct AController_eventNotifyHitMover_Parms
{
    FVector HitNormal;
    class AMover* wall;
};
struct AController_eventNotifyBump_Parms
{
    class AActor* Other;
    INT Pill;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyHitWall_Parms
{
    FVector HitNormal;
    class AActor* wall;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyLanded_Parms
{
    FVector HitNormal;
    class AActor* HitActor;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyHeadVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
    BITFIELD ReturnValue;
};
struct AController_eventNotifyPhysicsVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
    BITFIELD ReturnValue;
};
struct AController_eventLongFall_Parms
{
};
struct AController_eventAIHearSound_Parms
{
    class AActor* Actor;
    class USound* S;
};
struct AController_eventMayFall_Parms
{
};
struct AController_eventPlayerCalcEye_Parms
{
    FVector EyeLocation;
    FRotator EyeRotation;
};
struct AController_eventMoveToDestinationSucceeded_Parms
{
};
struct AController_eventMoveToDestinationFailed_Parms
{
};
struct AController_eventGetTurnSpeed_Parms
{
    INT ReturnValue;
};
class ENGINE_API AController : public AActor
{
public:
    class APawn* Pawn;
    FLOAT SightCounter;
    FLOAT FovAngle;
    BITFIELD bIsPlayer:1 GCC_PACK(4);
    BITFIELD bLOSflag:1;
    BITFIELD bAdvancedTactics:1;
    BITFIELD bCanOpenDoors:1;
    BITFIELD bCanDoSpecial:1;
    BITFIELD bAdjusting:1;
    BITFIELD bNoTact:1;
    BITFIELD bTacticalDir:1;
    BITFIELD bPreparingMove:1;
    BITFIELD bControlAnimations:1;
    BITFIELD bMoveToWalking:1;
    FVector AdjustLoc GCC_PACK(4);
    BYTE bCrawl;
    BYTE bRun;
    BYTE bDuck;
    BYTE bFire;
    BYTE bAltFire;
    class AController* nextController;
    FLOAT Stimulus;
    FLOAT Skill;
    FLOAT TacticalOffset;
    FLOAT MoveTimer;
    class AActor* MoveTarget;
    FVector Destination;
    FVector FocalPoint;
    class AActor* Focus;
    FVector LastSeenPos;
    FVector LastSeeingPos;
    FLOAT LastSeenTime;
    class APawn* Enemy;
    class AActor* Target;
    class AMover* PendingMover;
    class AActor* GoalList[4];
    class ANavigationPoint* home;
    FLOAT MinHitWall;
    class AActor* RouteCache[16];
    class AActor* RouteGoal;
    FLOAT RouteDist;
    BYTE AttitudeToPlayer;
    class UClass* PawnClass;
    class ANavigationPoint* StartSpot;
    FName NextState;
    FName NextLabel;
    DECLARE_FUNCTION(execStopWaiting);
    DECLARE_FUNCTION(execMoveToDestination);
    DECLARE_FUNCTION(execPickAnyTarget);
    DECLARE_FUNCTION(execPickTarget);
    DECLARE_FUNCTION(execRemoveController);
    DECLARE_FUNCTION(execAddController);
    DECLARE_FUNCTION(execWaitForLanding);
    DECLARE_FUNCTION(execPickWallAdjust);
    DECLARE_FUNCTION(execactorReachable);
    DECLARE_FUNCTION(execpointReachable);
    DECLARE_FUNCTION(execEAdjustJump);
    DECLARE_FUNCTION(execClearPaths);
    DECLARE_FUNCTION(execFindRandomDest);
    DECLARE_FUNCTION(execFindPathTowardNearest);
    DECLARE_FUNCTION(execFindPathToward);
    DECLARE_FUNCTION(execFindPathTo);
    DECLARE_FUNCTION(execCanSee);
    DECLARE_FUNCTION(execLineOfSightTo);
    DECLARE_FUNCTION(execFinishRotation);
    DECLARE_FUNCTION(execMoveToward);
    DECLARE_FUNCTION(execMoveTo);
    void eventEnemyNotVisible()
    {
        if(IsProbing(NAME_EnemyNotVisible)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EnemyNotVisible),NULL);
        }
    }
    void eventUpdateTactics()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateTactics),NULL);
    }
    void eventSeeMonster(class APawn* Seen)
    {
        AController_eventSeeMonster_Parms Parms;
        if(IsProbing(NAME_SeeMonster)) {
        Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeeMonster),&Parms);
        }
    }
    void eventSeePlayer(class APawn* Seen)
    {
        AController_eventSeePlayer_Parms Parms;
        if(IsProbing(NAME_SeePlayer)) {
        Parms.Seen=Seen;
        ProcessEvent(FindFunctionChecked(ENGINE_SeePlayer),&Parms);
        }
    }
    void eventHearNoise(FLOAT Loudness, class AActor* NoiseMaker)
    {
        AController_eventHearNoise_Parms Parms;
        if(IsProbing(NAME_HearNoise)) {
        Parms.Loudness=Loudness;
        Parms.NoiseMaker=NoiseMaker;
        ProcessEvent(FindFunctionChecked(ENGINE_HearNoise),&Parms);
        }
    }
    void eventPrepareForMove(class ANavigationPoint* Goal, class UReachSpec* Path)
    {
        AController_eventPrepareForMove_Parms Parms;
        Parms.Goal=Goal;
        Parms.Path=Path;
        ProcessEvent(FindFunctionChecked(ENGINE_PrepareForMove),&Parms);
    }
    void eventNotifyHitMover(FVector HitNormal, class AMover* wall)
    {
        AController_eventNotifyHitMover_Parms Parms;
        Parms.HitNormal=HitNormal;
        Parms.wall=wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitMover),&Parms);
    }
    BITFIELD eventNotifyBump(class AActor* Other, INT Pill)
    {
        AController_eventNotifyBump_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyBump)) {
        Parms.Other=Other;
        Parms.Pill=Pill;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyBump),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyHitWall(FVector HitNormal, class AActor* wall)
    {
        AController_eventNotifyHitWall_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyHitWall)) {
        Parms.HitNormal=HitNormal;
        Parms.wall=wall;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHitWall),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyLanded(FVector HitNormal, class AActor* HitActor)
    {
        AController_eventNotifyLanded_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyLanded)) {
        Parms.HitNormal=HitNormal;
        Parms.HitActor=HitActor;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyLanded),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
    {
        AController_eventNotifyHeadVolumeChange_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyHeadVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyHeadVolumeChange),&Parms);
        }
        return Parms.ReturnValue;
    }
    BITFIELD eventNotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
    {
        AController_eventNotifyPhysicsVolumeChange_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_NotifyPhysicsVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_NotifyPhysicsVolumeChange),&Parms);
        }
        return Parms.ReturnValue;
    }
    void eventLongFall()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_LongFall),NULL);
    }
    void eventAIHearSound(class AActor* Actor, class USound* S)
    {
        AController_eventAIHearSound_Parms Parms;
        if(IsProbing(NAME_AIHearSound)) {
        Parms.Actor=Actor;
        Parms.S=S;
        ProcessEvent(FindFunctionChecked(ENGINE_AIHearSound),&Parms);
        }
    }
    void eventMayFall()
    {
        if(IsProbing(NAME_MayFall)) {
        ProcessEvent(FindFunctionChecked(ENGINE_MayFall),NULL);
        }
    }
    void eventPlayerCalcEye(FVector& EyeLocation, FRotator& EyeRotation)
    {
        AController_eventPlayerCalcEye_Parms Parms;
        Parms.EyeLocation=EyeLocation;
        Parms.EyeRotation=EyeRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcEye),&Parms);
        EyeLocation=Parms.EyeLocation;
        EyeRotation=Parms.EyeRotation;
    }
    void eventMoveToDestinationSucceeded()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MoveToDestinationSucceeded),NULL);
    }
    void eventMoveToDestinationFailed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_MoveToDestinationFailed),NULL);
    }
    INT eventGetTurnSpeed()
    {
        AController_eventGetTurnSpeed_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_GetTurnSpeed),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AController,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AController)
};


struct APlayerController_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct APlayerController_eventPlayerTick_Parms
{
    FLOAT DeltaTime;
};
struct APlayerController_eventSetPause_Parms
{
    BITFIELD bPause;
    BITFIELD ReturnValue;
};
struct APlayerController_eventInitInputSystem_Parms
{
};
struct APlayerController_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};
struct APlayerController_eventSendConsoleCommand_Parms
{
    FString Command;
    FString ReturnValue;
};
struct APlayerController_eventCanGoBackToGame_Parms
{
    BITFIELD ReturnValue;
};
struct APlayerController_eventCanLoadGame_Parms
{
    BITFIELD ReturnValue;
};
struct APlayerController_eventCanSaveGame_Parms
{
    BITFIELD ReturnValue;
};
struct APlayerController_eventRealKeyEvent_Parms
{
    FString RealKeyValue;
    BYTE Action;
    FLOAT Delta;
};
struct APlayerController_eventKeyEvent_Parms
{
    FString Key;
    BYTE Action;
    FLOAT Delta;
    BITFIELD ReturnValue;
};
struct APlayerController_eventInitLoadGame_Parms
{
};
struct APlayerController_eventPlayerGiven_Parms
{
};
struct APlayerController_eventEmptyRecons_Parms
{
};
class ENGINE_API APlayerController : public AController
{
public:
    class UPlayer* Player;
    BITFIELD bPressedJump:1 GCC_PACK(4);
    BITFIELD bCheatFlying:1;
    BITFIELD bSavingGameBad:1;
    BITFIELD bLoadingGameBad:1;
    BITFIELD bStopRenderWorld:1;
    BITFIELD bStopInput:1;
    BITFIELD bShouldResumeAll:1;
    INT bGlobalBrightness GCC_PACK(4);
    INT bGlobalContrast;
    INT bGlobalMusicVol;
    INT bGlobalVoiceVol;
    INT bGlobalSfxVol;
    INT bGlobalAmbVol;
    INT bGlobalXPos;
    INT bGlobalYPos;
    BITFIELD bSavingTraining:1 GCC_PACK(4);
    BITFIELD bLoadingTraining:1;
    BITFIELD bAutoSaveLoad:1;
    class AEPlayerInfo* playerInfo GCC_PACK(4);
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aStrafe;
    FLOAT aTurn;
    FLOAT aLookUp;
    FLOAT aAltFire;
    FLOAT aFire;
    BYTE bStrafe;
    BYTE bStepOneFrame;
    class AEInteractionManager* IManager;
    class AActor* MicroTarget;
    INT ShowFlags;
    INT Misc1;
    INT Misc2;
    INT RendMap;
    INT ShadowMode;
    INT TextureCache;
    INT LightmapTextureCache;
    BITFIELD ShadowOnActor:1 GCC_PACK(4);
    BITFIELD HighQualityCharacterShadow:1;
    BITFIELD ShadowOnStaticMesh:1;
    BITFIELD StaticMeshCastShadow:1;
    BITFIELD ShadowFiltering:1;
    BITFIELD HighSpecGraphicAdapter:1;
    BITFIELD EnableFadeOut:1;
    INT FadeOutNearPlane GCC_PACK(4);
    INT FadeOutFarPlane;
    class UTexture* ThermalTexture;
    BITFIELD bBigPixels:1 GCC_PACK(4);
    FLOAT OrthoZoom GCC_PACK(4);
    class AActor* ViewTarget;
    FLOAT DesiredFOV;
    FLOAT DefaultFOV;
    FLOAT ZoomLevel;
    class AHUD* myHUD;
    INT iErrorMsg;
    class UCheatManager* CheatManager;
    class UClass* CheatClass;
    class UPlayerInput* PlayerInput;
    class UClass* InputClass;
    DECLARE_FUNCTION(execPasteFromClipboard);
    DECLARE_FUNCTION(execCopyToClipboard);
    DECLARE_FUNCTION(execGetDefaultURL);
    DECLARE_FUNCTION(execUpdateURL);
    DECLARE_FUNCTION(execClientTravel);
    DECLARE_FUNCTION(execSetViewTarget);
    DECLARE_FUNCTION(execLoadKeyboard);
    DECLARE_FUNCTION(execSaveKeyboard);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execGetEntryLevel);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execSetKey);
    DECLARE_FUNCTION(execGetEnumName);
    DECLARE_FUNCTION(execGetActionKey);
    DECLARE_FUNCTION(execGetKey);
    void eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        APlayerController_eventPlayerCalcView_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    void eventPlayerTick(FLOAT DeltaTime)
    {
        APlayerController_eventPlayerTick_Parms Parms;
        if(IsProbing(NAME_PlayerTick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
        }
    }
    BITFIELD eventSetPause(BITFIELD bPause)
    {
        APlayerController_eventSetPause_Parms Parms;
        Parms.ReturnValue=0;
        Parms.bPause=bPause;
        ProcessEvent(FindFunctionChecked(ENGINE_SetPause),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitInputSystem()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitInputSystem),NULL);
    }
    void eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerController_eventClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
    }
    FString eventSendConsoleCommand(const FString& Command)
    {
        APlayerController_eventSendConsoleCommand_Parms Parms;
        Parms.Command=Command;
        ProcessEvent(FindFunctionChecked(ENGINE_SendConsoleCommand),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventCanGoBackToGame()
    {
        APlayerController_eventCanGoBackToGame_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CanGoBackToGame),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventCanLoadGame()
    {
        APlayerController_eventCanLoadGame_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CanLoadGame),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventCanSaveGame()
    {
        APlayerController_eventCanSaveGame_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_CanSaveGame),&Parms);
        return Parms.ReturnValue;
    }
    void eventRealKeyEvent(const FString& RealKeyValue, BYTE Action, FLOAT Delta)
    {
        APlayerController_eventRealKeyEvent_Parms Parms;
        Parms.RealKeyValue=RealKeyValue;
        Parms.Action=Action;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_RealKeyEvent),&Parms);
    }
    BITFIELD eventKeyEvent(const FString& Key, BYTE Action, FLOAT Delta)
    {
        APlayerController_eventKeyEvent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        Parms.Action=Action;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_KeyEvent),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitLoadGame()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitLoadGame),NULL);
    }
    void eventPlayerGiven()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerGiven),NULL);
    }
    void eventEmptyRecons()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EmptyRecons),NULL);
    }
    DECLARE_CLASS(APlayerController,AController,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerController)
};


class ENGINE_API ACamera : public APlayerController
{
public:
    DECLARE_CLASS(ACamera,APlayerController,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(ACamera)
};


class ENGINE_API AAIController : public AController
{
public:
    DECLARE_CLASS(AAIController,AController,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAIController)
};


struct AHUD_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventWorldSpaceOverlays_Parms
{
};
class ENGINE_API AHUD : public AActor
{
public:
    class UFont* SmallFont;
    class UFont* MedFont;
    class UFont* BigFont;
    class UFont* LargeFont;
    FStringNoInit HUDConfigWindowType;
    class AHUD* nextHUD;
    class APlayerController* PlayerOwner;
    BITFIELD bShowDebugInfo:1 GCC_PACK(4);
    BITFIELD bHideHUD:1;
    DECLARE_FUNCTION(execDraw3DLine);
    void eventPostRender(class UCanvas* Canvas)
    {
        AHUD_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventWorldSpaceOverlays()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_WorldSpaceOverlays),NULL);
    }
    DECLARE_CLASS(AHUD,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AHUD)
};


struct ANavigationPoint_eventGetNext_Parms
{
    BITFIELD bNoReverse;
    class ANavigationPoint* ReturnValue;
};
struct ANavigationPoint_eventSuggestMovePreparation_Parms
{
    class APawn* Other;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventAccept_Parms
{
    class AActor* Incoming;
    class AActor* Source;
    BITFIELD ReturnValue;
};
struct ANavigationPoint_eventSpecialCost_Parms
{
    class APawn* Seeker;
    INT ReturnValue;
};
class ENGINE_API ANavigationPoint : public AActor
{
public:
    TArrayNoInit<class UReachSpec*> PathList;
    FName ProscribedPaths[4];
    FName ForcedPaths[4];
    INT visitedWeight;
    INT bestPathWeight;
    class ANavigationPoint* nextNavigationPoint;
    class ANavigationPoint* nextOrdered;
    class ANavigationPoint* prevOrdered;
    class ANavigationPoint* previousPath;
    INT cost;
    INT ExtraCost;
    BITFIELD bEndPoint:1 GCC_PACK(4);
    BITFIELD bSpecialCost:1;
    BITFIELD taken:1;
    BITFIELD bBlocked:1;
    BITFIELD bPropagatesSound:1;
    BITFIELD bOneWayPath:1;
    BITFIELD bNeverUseStrafing:1;
    BITFIELD bAutoBuilt:1;
    BITFIELD bSpecialMove:1;
    BITFIELD bNoAutoConnect:1;
    BITFIELD bNotBased:1;
    BITFIELD bAutoPlaced:1;
    BITFIELD bPathsChanged:1;
    BITFIELD bLadderPoint:1;
    BITFIELD bCoverPoint:1;
    BITFIELD bDoorPoint:1;
    BITFIELD bFindBaseOnBuild:1;
    BITFIELD bIsLadderTop:1;
    BITFIELD bSearchPoint:1;
    BITFIELD bHidePoint:1;
    BITFIELD bIgnoreAwarenessForAnim:1;
    BITFIELD bDoNotUseAsHidePoint:1;
    INT LadderID GCC_PACK(4);
    FLOAT LastTimeCalculated;
    FLOAT LastTimeUsed;
    class UEPatrolInfo* Patrol;
    BYTE m_ForcedMoveFlag;
    BYTE m_ForcedWaitFlag;
    class ANavigationPoint* eventGetNext(BITFIELD bNoReverse)
    {
        ANavigationPoint_eventGetNext_Parms Parms;
        Parms.ReturnValue=0;
        Parms.bNoReverse=bNoReverse;
        ProcessEvent(FindFunctionChecked(ENGINE_GetNext),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventSuggestMovePreparation(class APawn* Other)
    {
        ANavigationPoint_eventSuggestMovePreparation_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SuggestMovePreparation),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventAccept(class AActor* Incoming, class AActor* Source)
    {
        ANavigationPoint_eventAccept_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Incoming=Incoming;
        Parms.Source=Source;
        ProcessEvent(FindFunctionChecked(ENGINE_Accept),&Parms);
        return Parms.ReturnValue;
    }
    INT eventSpecialCost(class APawn* Seeker)
    {
        ANavigationPoint_eventSpecialCost_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Seeker=Seeker;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialCost),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(ANavigationPoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANavigationPoint)
};


class ENGINE_API APlayerStart : public ANavigationPoint
{
public:
    DECLARE_CLASS(APlayerStart,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};


class ENGINE_API ATeleporter : public ANavigationPoint
{
public:
    FStringNoInit URL;
    FName ProductRequired;
    BITFIELD bChangesVelocity:1 GCC_PACK(4);
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    FVector TargetVelocity GCC_PACK(4);
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
    DECLARE_CLASS(ATeleporter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATeleporter)
};


class ENGINE_API APathNode : public ANavigationPoint
{
public:
    DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APathNode)
};


class ENGINE_API AProjectile : public AActor
{
public:
    FLOAT speed;
    FLOAT MaxSpeed;
    FLOAT TossZ;
    FLOAT Damage;
    FLOAT DamageRadius;
    FLOAT MomentumTransfer;
    class UClass* MyDamageType;
    class USound* SpawnSound;
    class USound* ImpactSound;
    class UClass* ExplosionDecal;
    FLOAT ExploWallOut;
    DECLARE_CLASS(AProjectile,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AProjectile)
};


class ENGINE_API ANote : public AActor
{
public:
    FStringNoInit Text;
    DECLARE_CLASS(ANote,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANote)
};


class ENGINE_API ALight : public AActor
{
public:
    DECLARE_CLASS(ALight,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALight)
};


struct AESoftBodyActor_eventCollidedBy_Parms
{
    class AActor* Instigator;
};
class ENGINE_API AESoftBodyActor : public AActor
{
public:
    class UESoftBody* SoftBody;
    TArrayNoInit<FSBAttachment> Attach;
    TArrayNoInit<FPlane> collPlanes;
    TArrayNoInit<FRangeVector> collBoxes;
    TArrayNoInit<FPlane> collSpheres;
    FVector Gravity;
    FVector windMin;
    FVector windMax;
    FLOAT windUScale;
    FLOAT windVScale;
    FLOAT windUPan;
    FLOAT windVPan;
    FLOAT friction;
    FLOAT collRepulse;
    FLOAT dragForce;
    FLOAT hitDamping;
    INT nbIter;
    INT nbNormalizeIter;
    INT collSubDiv;
    BITFIELD collActor:1 GCC_PACK(4);
    BITFIELD attachPreferX:1;
    BITFIELD attachFlipZ:1;
    BITFIELD pillsTest:1;
    DECLARE_FUNCTION(execRemoveAttach);
    DECLARE_FUNCTION(execSBExplosionHit);
    DECLARE_FUNCTION(execSBBulletHit);
    void eventCollidedBy(class AActor* Instigator)
    {
        AESoftBodyActor_eventCollidedBy_Parms Parms;
        Parms.Instigator=Instigator;
        ProcessEvent(FindFunctionChecked(ENGINE_CollidedBy),&Parms);
    }
    DECLARE_CLASS(AESoftBodyActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AESoftBodyActor)
};


class ENGINE_API AERopeActor : public AActor
{
public:
    class UERope* Rope;
    FLOAT Radius;
    FLOAT scaleU;
    FLOAT lengthV;
    INT nbSeg;
    DECLARE_CLASS(AERopeActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AERopeActor)
};

#define UCONST_MAXITEM 5

class ENGINE_API AEInteractionManager : public AActor
{
public:
    INT SelectedInteractions;
    TArrayNoInit<class AEInteractObject*> Interactions;
    DECLARE_CLASS(AEInteractionManager,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AEInteractionManager)
};


class ENGINE_API AEInteractObject : public AActor
{
public:
    INT iPriority;
    BITFIELD bSeeToInteract:1 GCC_PACK(4);
    class APlayerController* InteractionPlayerController GCC_PACK(4);
    DECLARE_CLASS(AEInteractObject,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AEInteractObject)
};


class ENGINE_API AEAIEvent : public AActor
{
public:
    BYTE EventType;
    FVector EventLocation;
    class AActor* EventTarget;
    class AActor* EventActor;
    BYTE EventBroadcastType;
    FLOAT ReceivedTime;
    class AController* Instigator;
    BYTE EventNoiseType;
    DECLARE_CLASS(AEAIEvent,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AEAIEvent)
};

enum EParticleEffectAxis
{
    PTEA_NegativeX          =0,
    PTEA_PositiveZ          =1,
    PTEA_MAX                =2,
};
enum EParticleStartLocationShape
{
    PTLS_Box                =0,
    PTLS_Sphere             =1,
    PTLS_Polar              =2,
    PTLS_MAX                =3,
};
enum EParticleVelocityDirection
{
    PTVD_None               =0,
    PTVD_StartPositionAndOwner=1,
    PTVD_OwnerAndStartPosition=2,
    PTVD_AddRadial          =3,
    PTVD_MAX                =4,
};
enum EParticleRotationSource
{
    PTRS_None               =0,
    PTRS_Actor              =1,
    PTRS_Offset             =2,
    PTRS_Normal             =3,
    PTRS_MAX                =4,
};
enum EParticleCoordinateSystem
{
    PTCS_Independent        =0,
    PTCS_Relative           =1,
    PTCS_Absolute           =2,
    PTCS_MAX                =3,
};
enum EParticleDrawStyle
{
    PTDS_Regular            =0,
    PTDS_AlphaBlend         =1,
    PTDS_Modulated          =2,
    PTDS_Translucent        =3,
    PTDS_AlphaModulate_MightNotFogCorrectly=4,
    PTDS_Darken             =5,
    PTDS_Brighten           =6,
    PTDS_MAX                =7,
};
enum EBlendMode
{
    BM_MODULATE             =0,
    BM_MODULATE2X           =1,
    BM_MODULATE4X           =2,
    BM_ADD                  =3,
    BM_ADDSIGNED            =4,
    BM_ADDSIGNED2X          =5,
    BM_SUBTRACT             =6,
    BM_ADDSMOOTH            =7,
    BM_BLENDDIFFUSEALPHA    =8,
    BM_BLENDTEXTUREALPHA    =9,
    BM_BLENDFACTORALPHA     =10,
    BM_BLENDTEXTUREALPHAPM  =11,
    BM_BLENDCURRENTALPHA    =12,
    BM_PREMODULATE          =13,
    BM_MODULATEALPHA_ADDCOLOR=14,
    BM_MODULATEINVALPHA_ADDCOLOR=15,
    BM_MODULATEINVCOLOR_ADDALPHA=16,
    BM_HACK                 =17,
    BM_MAX                  =18,
};

class ENGINE_API UParticleEmitter : public UObject
{
public:
    FVector Acceleration;
    BITFIELD UseCollision:1 GCC_PACK(4);
    FVector ExtentMultiplier GCC_PACK(4);
    FRangeVector DampingFactorRange;
    BITFIELD UseCollisionPlanes:1 GCC_PACK(4);
    TArrayNoInit<FPlane> CollisionPlanes GCC_PACK(4);
    BITFIELD UseMaxCollisions:1 GCC_PACK(4);
    FRange MaxCollisions GCC_PACK(4);
    INT SpawnFromOtherEmitter;
    INT SpawnAmount;
    FRangeVector SpawnedVelocityScaleRange;
    BITFIELD UseSpawnedVelocityScale:1 GCC_PACK(4);
    FLOAT CollisionSoundProbability GCC_PACK(4);
    class USound* CollisionSound;
    BITFIELD UseColorScale:1 GCC_PACK(4);
    TArrayNoInit<FParticleColorScale> ColorScale GCC_PACK(4);
    FLOAT ColorScaleRepeats;
    FRangeVector ColorMultiplierRange;
    BITFIELD ModulateColorByLighting:1 GCC_PACK(4);
    FLOAT LightingAttenuationFactor GCC_PACK(4);
    FColor AverageLightingColor;
    FPlane FadeOutFactor;
    FLOAT FadeOutStartTime;
    BITFIELD FadeOut:1 GCC_PACK(4);
    FPlane FadeInFactor GCC_PACK(4);
    FLOAT FadeInEndTime;
    BITFIELD FadeIn:1 GCC_PACK(4);
    BITFIELD UseActorForces:1;
    BYTE CoordinateSystem GCC_PACK(4);
    INT MaxParticles;
    BITFIELD ResetAfterChange:1 GCC_PACK(4);
    BYTE EffectAxis GCC_PACK(4);
    BITFIELD OnlyVisibleInThermalVisionFallback:1 GCC_PACK(4);
    BITFIELD RespawnDeadParticles:1;
    BITFIELD AutoDestroy:1;
    BITFIELD AutoReset:1;
    BITFIELD Disabled:1;
    BITFIELD DisableFogging:1;
    FRange AutoResetTimeRange GCC_PACK(4);
    FStringNoInit Name;
    FVector StartLocationOffset;
    FRangeVector StartLocationRange;
    INT AddLocationFromOtherEmitter;
    BYTE StartLocationShape;
    FRange SphereRadiusRange;
    FRangeVector StartLocationPolarRange;
    FRange StartMassRange;
    INT AlphaRef;
    BITFIELD AlphaTest:1 GCC_PACK(4);
    BITFIELD AcceptsProjectors:1;
    BITFIELD ZTest:1;
    BITFIELD ZWrite:1;
    BYTE UseRotationFrom GCC_PACK(4);
    BITFIELD SpinParticles:1 GCC_PACK(4);
    FRotator RotationOffset GCC_PACK(4);
    FVector SpinCCWorCW;
    FRangeVector SpinsPerSecondRange;
    FRangeVector StartSpinRange;
    BITFIELD DampRotation:1 GCC_PACK(4);
    FRangeVector RotationDampingFactorRange GCC_PACK(4);
    FVector RotationNormal;
    BITFIELD UseSizeScale:1 GCC_PACK(4);
    BITFIELD UseRegularSizeScale:1;
    TArrayNoInit<FParticleTimeScale> SizeScale GCC_PACK(4);
    FLOAT SizeScaleRepeats;
    FRangeVector StartSizeRange;
    BITFIELD UniformSize:1 GCC_PACK(4);
    FLOAT ParticlesPerSecond GCC_PACK(4);
    FLOAT InitialParticlesPerSecond;
    BITFIELD AutomaticInitialSpawning:1 GCC_PACK(4);
    BYTE DrawStyle GCC_PACK(4);
    class UTexture* Texture;
    BYTE ThermalVisionFallbackDrawStyle;
    class UTexture* ThermalVisionFallbackTexture;
    INT TextureUSubdivisions;
    INT TextureVSubdivisions;
    BITFIELD BlendBetweenSubdivisions:1 GCC_PACK(4);
    BITFIELD UseSubdivisionScale:1;
    TArrayNoInit<FLOAT> SubdivisionScale GCC_PACK(4);
    INT SubdivisionStart;
    INT SubdivisionEnd;
    BITFIELD UseRandomSubdivision:1 GCC_PACK(4);
    FLOAT SecondsBeforeInactive GCC_PACK(4);
    FLOAT MinSquaredVelocity;
    FRange InitialTimeRange;
    FRange LifetimeRange;
    FRange InitialDelayRange;
    FRangeVector StartVelocityRange;
    FRange StartVelocityRadialRange;
    FVector MaxAbsVelocity;
    FRangeVector VelocityLossRange;
    INT AddVelocityFromOtherEmitter;
    FRangeVector AddVelocityMultiplierRange;
    BYTE GetVelocityDirectionFrom;
    FLOAT WarmupTicksPerSecond;
    FLOAT RelativeWarmupTime;
    FColor GlowScale;
    BITFIELD IsGlowing:1 GCC_PACK(4);
    class AEmitter* Owner GCC_PACK(4);
    BITFIELD Initialized:1 GCC_PACK(4);
    BITFIELD Inactive:1;
    FLOAT InactiveTime GCC_PACK(4);
    TArrayNoInit<FParticle> Particles;
    INT ParticleIndex;
    INT LivingParticles;
    INT ActiveParticles;
    FLOAT PPSFraction;
    FBox BoundingBox;
    FVector RealExtentMultiplier;
    BITFIELD RealDisableFogging:1 GCC_PACK(4);
    BITFIELD AllParticlesDead:1;
    BITFIELD WarmedUp:1;
    INT OtherIndex GCC_PACK(4);
    FLOAT InitialDelay;
    FVector GlobalOffset;
    FLOAT TimeTillReset;
    INT PS2Data;
    INT MaxActiveParticles;
    INT CurrentCollisionSoundIndex;
    FLOAT MaxSizeScale;
    INT KillPending;
    DECLARE_FUNCTION(execSpawnParticle);
    DECLARE_CLASS(UParticleEmitter,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UParticleEmitter)
};

enum EParticleDirectionUsage
{
    PTDU_None               =0,
    PTDU_Up                 =1,
    PTDU_Right              =2,
    PTDU_Forward            =3,
    PTDU_Normal             =4,
    PTDU_UpAndNormal        =5,
    PTDU_RightAndNormal     =6,
    PTDU_MAX                =7,
};

class ENGINE_API USpriteEmitter : public UParticleEmitter
{
public:
    BYTE UseDirectionAs;
    FVector ProjectionNormal;
    FVector RealProjectionNormal;
    DECLARE_CLASS(USpriteEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USpriteEmitter)
};


class ENGINE_API USparkEmitter : public UParticleEmitter
{
public:
    FRange LineSegmentsRange;
    FRange TimeBeforeVisibleRange;
    FRange TimeBetweenSegmentsRange;
    TArrayNoInit<FParticleSparkData> SparkData;
    class UVertexBuffer* VertexBuffer;
    class UIndexBuffer* IndexBuffer;
    INT NumSegments;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    DECLARE_CLASS(USparkEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USparkEmitter)
};


class ENGINE_API UMeshEmitter : public UParticleEmitter
{
public:
    class UStaticMesh* StaticMesh;
    BITFIELD UseMeshBlendMode:1 GCC_PACK(4);
    BITFIELD RenderTwoSided:1;
    BITFIELD UseParticleColor:1;
    FVector MeshExtent GCC_PACK(4);
    DECLARE_CLASS(UMeshEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMeshEmitter)
};

enum EBeamEndPointType
{
    PTEP_Velocity           =0,
    PTEP_Distance           =1,
    PTEP_Offset             =2,
    PTEP_Actor              =3,
    PTEP_TraceOffset        =4,
    PTEP_OffsetAsAbsolute   =5,
    PTEP_MAX                =6,
};

class ENGINE_API UBeamEmitter : public UParticleEmitter
{
public:
    FRange BeamDistanceRange;
    TArrayNoInit<FParticleBeamEndPoint> BeamEndPoints;
    BYTE DetermineEndPointBy;
    FLOAT BeamTextureUScale;
    FLOAT BeamTextureVScale;
    INT RotatingSheets;
    FRangeVector LowFrequencyNoiseRange;
    INT LowFrequencyPoints;
    FRangeVector HighFrequencyNoiseRange;
    INT HighFrequencyPoints;
    TArrayNoInit<FParticleBeamScale> LFScaleFactors;
    TArrayNoInit<FParticleBeamScale> HFScaleFactors;
    FLOAT LFScaleRepeats;
    FLOAT HFScaleRepeats;
    BITFIELD UseHighFrequencyScale:1 GCC_PACK(4);
    BITFIELD UseLowFrequencyScale:1;
    BITFIELD NoiseDeterminesEndPoint:1;
    BITFIELD UseBranching:1;
    FRange BranchProbability GCC_PACK(4);
    INT BranchEmitter;
    FRange BranchSpawnAmountRange;
    BITFIELD LinkupLifetime:1 GCC_PACK(4);
    INT SheetsUsed GCC_PACK(4);
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    FLOAT BeamValueSum;
    TArrayNoInit<FParticleBeamData> HFPoints;
    TArrayNoInit<FVector> LFPoints;
    TArrayNoInit<class AActor*> HitActors;
    DECLARE_CLASS(UBeamEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UBeamEmitter)
};


class ENGINE_API UMatObject : public UObject
{
public:
    DECLARE_CLASS(UMatObject,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMatObject)
};

enum ESAStatus
{
    SASTATUS_Waiting        =0,
    SASTATUS_Running        =1,
    SASTATUS_Ending         =2,
    SASTATUS_Expired        =3,
    SASTATUS_MAX            =4,
};

class ENGINE_API UMatSubAction : public UMatObject
{
public:
    FLOAT Delay;
    FLOAT Duration;
    class UTexture* Icon;
    BYTE Status;
    FStringNoInit Desc;
    FLOAT PctStarting;
    FLOAT PctEnding;
    FLOAT PctDuration;
    DECLARE_CLASS(UMatSubAction,UMatObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMatSubAction)
};


class ENGINE_API USubActionSceneSpeed : public UMatSubAction
{
public:
    FRange SceneSpeed;
    DECLARE_CLASS(USubActionSceneSpeed,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionSceneSpeed)
};


class ENGINE_API USubActionGameSpeed : public UMatSubAction
{
public:
    FRange GameSpeed;
    DECLARE_CLASS(USubActionGameSpeed,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionGameSpeed)
};


class ENGINE_API USubActionOrientation : public UMatSubAction
{
public:
    FOrientation CamOrientation;
    DECLARE_CLASS(USubActionOrientation,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionOrientation)
};


class ENGINE_API USubActionFOV : public UMatSubAction
{
public:
    FRange FOV;
    DECLARE_CLASS(USubActionFOV,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionFOV)
};


class ENGINE_API USubActionTrigger : public UMatSubAction
{
public:
    FName EventName;
    DECLARE_CLASS(USubActionTrigger,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionTrigger)
};


class ENGINE_API USubActionFade : public UMatSubAction
{
public:
    FColor FadeColor;
    BITFIELD bFadeOut:1 GCC_PACK(4);
    DECLARE_CLASS(USubActionFade,UMatSubAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USubActionFade)
};


class ENGINE_API UMatAction : public UMatObject
{
public:
    class AInterpolationPoint* IntPoint;
    FStringNoInit Comment;
    FLOAT Duration;
    TArrayNoInit<class UMatSubAction*> SubActions;
    BITFIELD bSmoothCorner:1 GCC_PACK(4);
    FVector StartControlPoint GCC_PACK(4);
    FVector EndControlPoint;
    TArrayNoInit<FVector> SampleLocations;
    FLOAT PctStarting;
    FLOAT PctEnding;
    FLOAT PctDuration;
    DECLARE_CLASS(UMatAction,UMatObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMatAction)
};


class ENGINE_API UActionPause : public UMatAction
{
public:
    DECLARE_CLASS(UActionPause,UMatAction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActionPause)
};

enum EPathStyle
{
    PATHSTYLE_Linear        =0,
    PATHSTYLE_Bezier        =1,
    PATHSTYLE_MAX           =2,
};

class ENGINE_API UActionMoveCamera : public UMatAction
{
public:
    BYTE PathStyle;
    DECLARE_CLASS(UActionMoveCamera,UMatAction,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UActionMoveCamera)
};

enum EInputKey
{
    IK_None                 =0,
    IK_LeftMouse            =1,
    IK_RightMouse           =2,
    IK_Cancel               =3,
    IK_MiddleMouse          =4,
    IK_Unknown05            =5,
    IK_Unknown06            =6,
    IK_Unknown07            =7,
    IK_Backspace            =8,
    IK_Tab                  =9,
    IK_Unknown0A            =10,
    IK_Unknown0B            =11,
    IK_Unknown0C            =12,
    IK_Enter                =13,
    IK_Unknown0E            =14,
    IK_Unknown0F            =15,
    IK_Shift                =16,
    IK_Ctrl                 =17,
    IK_Alt                  =18,
    IK_Pause                =19,
    IK_CapsLock             =20,
    IK_Unknown15            =21,
    IK_Unknown16            =22,
    IK_Unknown17            =23,
    IK_Unknown18            =24,
    IK_Unknown19            =25,
    IK_Unknown1A            =26,
    IK_Escape               =27,
    IK_Unknown1C            =28,
    IK_Unknown1D            =29,
    IK_Unknown1E            =30,
    IK_Unknown1F            =31,
    IK_Space                =32,
    IK_PageUp               =33,
    IK_PageDown             =34,
    IK_End                  =35,
    IK_Home                 =36,
    IK_Left                 =37,
    IK_Up                   =38,
    IK_Right                =39,
    IK_Down                 =40,
    IK_Select               =41,
    IK_Print                =42,
    IK_Execute              =43,
    IK_PrintScrn            =44,
    IK_Insert               =45,
    IK_Delete               =46,
    IK_Help                 =47,
    IK_0                    =48,
    IK_1                    =49,
    IK_2                    =50,
    IK_3                    =51,
    IK_4                    =52,
    IK_5                    =53,
    IK_6                    =54,
    IK_7                    =55,
    IK_8                    =56,
    IK_9                    =57,
    IK_Unknown3A            =58,
    IK_Unknown3B            =59,
    IK_Unknown3C            =60,
    IK_Unknown3D            =61,
    IK_Unknown3E            =62,
    IK_Unknown3F            =63,
    IK_Unknown40            =64,
    IK_A                    =65,
    IK_B                    =66,
    IK_C                    =67,
    IK_D                    =68,
    IK_E                    =69,
    IK_F                    =70,
    IK_G                    =71,
    IK_H                    =72,
    IK_I                    =73,
    IK_J                    =74,
    IK_K                    =75,
    IK_L                    =76,
    IK_M                    =77,
    IK_N                    =78,
    IK_O                    =79,
    IK_P                    =80,
    IK_Q                    =81,
    IK_R                    =82,
    IK_S                    =83,
    IK_T                    =84,
    IK_U                    =85,
    IK_V                    =86,
    IK_W                    =87,
    IK_X                    =88,
    IK_Y                    =89,
    IK_Z                    =90,
    IK_Unknown5B            =91,
    IK_Unknown5C            =92,
    IK_Unknown5D            =93,
    IK_Unknown5E            =94,
    IK_Unknown5F            =95,
    IK_NumPad0              =96,
    IK_NumPad1              =97,
    IK_NumPad2              =98,
    IK_NumPad3              =99,
    IK_NumPad4              =100,
    IK_NumPad5              =101,
    IK_NumPad6              =102,
    IK_NumPad7              =103,
    IK_NumPad8              =104,
    IK_NumPad9              =105,
    IK_GreyStar             =106,
    IK_GreyPlus             =107,
    IK_Separator            =108,
    IK_GreyMinus            =109,
    IK_NumPadPeriod         =110,
    IK_GreySlash            =111,
    IK_F1                   =112,
    IK_F2                   =113,
    IK_F3                   =114,
    IK_F4                   =115,
    IK_F5                   =116,
    IK_F6                   =117,
    IK_F7                   =118,
    IK_F8                   =119,
    IK_F9                   =120,
    IK_F10                  =121,
    IK_F11                  =122,
    IK_F12                  =123,
    IK_F13                  =124,
    IK_F14                  =125,
    IK_F15                  =126,
    IK_F16                  =127,
    IK_F17                  =128,
    IK_F18                  =129,
    IK_F19                  =130,
    IK_F20                  =131,
    IK_F21                  =132,
    IK_F22                  =133,
    IK_F23                  =134,
    IK_F24                  =135,
    IK_Unknown88            =136,
    IK_Unknown89            =137,
    IK_Unknown8A            =138,
    IK_Unknown8B            =139,
    IK_Unknown8C            =140,
    IK_Unknown8D            =141,
    IK_Unknown8E            =142,
    IK_Unknown8F            =143,
    IK_NumLock              =144,
    IK_ScrollLock           =145,
    IK_Unknown92            =146,
    IK_Unknown93            =147,
    IK_Unknown94            =148,
    IK_Unknown95            =149,
    IK_Unknown96            =150,
    IK_Unknown97            =151,
    IK_Unknown98            =152,
    IK_Unknown99            =153,
    IK_Unknown9A            =154,
    IK_Unknown9B            =155,
    IK_Unknown9C            =156,
    IK_Unknown9D            =157,
    IK_Unknown9E            =158,
    IK_Unknown9F            =159,
    IK_LShift               =160,
    IK_RShift               =161,
    IK_LControl             =162,
    IK_RControl             =163,
    IK_UnknownA4            =164,
    IK_UnknownA5            =165,
    IK_UnknownA6            =166,
    IK_UnknownA7            =167,
    IK_UnknownA8            =168,
    IK_UnknownA9            =169,
    IK_UnknownAA            =170,
    IK_UnknownAB            =171,
    IK_UnknownAC            =172,
    IK_UnknownAD            =173,
    IK_UnknownAE            =174,
    IK_UnknownAF            =175,
    IK_UnknownB0            =176,
    IK_UnknownB1            =177,
    IK_UnknownB2            =178,
    IK_UnknownB3            =179,
    IK_UnknownB4            =180,
    IK_UnknownB5            =181,
    IK_UnknownB6            =182,
    IK_UnknownB7            =183,
    IK_UnknownB8            =184,
    IK_UnknownB9            =185,
    IK_Semicolon            =186,
    IK_Equals               =187,
    IK_Comma                =188,
    IK_Minus                =189,
    IK_Period               =190,
    IK_Slash                =191,
    IK_Tilde                =192,
    IK_UnknownC1            =193,
    IK_UnknownC2            =194,
    IK_UnknownC3            =195,
    IK_AnalogUp             =196,
    IK_AnalogDown           =197,
    IK_AnalogLeft           =198,
    IK_AnalogRight          =199,
    IK_Joy1                 =200,
    IK_Joy2                 =201,
    IK_Joy3                 =202,
    IK_Joy4                 =203,
    IK_Joy5                 =204,
    IK_Joy6                 =205,
    IK_Joy7                 =206,
    IK_Joy8                 =207,
    IK_Joy9                 =208,
    IK_Joy10                =209,
    IK_Joy11                =210,
    IK_Joy12                =211,
    IK_Joy13                =212,
    IK_Joy14                =213,
    IK_Joy15                =214,
    IK_Joy16                =215,
    IK_UnknownD8            =216,
    IK_UnknownD9            =217,
    IK_UnknownDA            =218,
    IK_LeftBracket          =219,
    IK_Backslash            =220,
    IK_RightBracket         =221,
    IK_SingleQuote          =222,
    IK_UnknownDF            =223,
    IK_JoyX                 =224,
    IK_JoyY                 =225,
    IK_JoyZ                 =226,
    IK_JoyR                 =227,
    IK_MouseX               =228,
    IK_MouseY               =229,
    IK_MouseZ               =230,
    IK_MouseW               =231,
    IK_JoyU                 =232,
    IK_JoyV                 =233,
    IK_UnknownEA            =234,
    IK_UnknownEB            =235,
    IK_MouseWheelUp         =236,
    IK_MouseWheelDown       =237,
    IK_Unknown10E           =238,
    UK_Unknown10F           =239,
    IK_UnknownF0            =240,
    IK_UnknownF1            =241,
    IK_UnknownF2            =242,
    IK_UnknownF3            =243,
    IK_UnknownF4            =244,
    IK_UnknownF5            =245,
    IK_Attn                 =246,
    IK_CrSel                =247,
    IK_ExSel                =248,
    IK_ErEof                =249,
    IK_Play                 =250,
    IK_Zoom                 =251,
    IK_NoName               =252,
    IK_PA1                  =253,
    IK_OEMClear             =254,
    IK_MAX                  =255,
};

class ENGINE_API UInteractions : public UObject
{
public:
    DECLARE_CLASS(UInteractions,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInteractions)
};


struct UInteractionMaster_eventProcess_Message_Parms
{
    FString Msg;
    FLOAT MsgLife;
    TArray<class UInteraction*> InteractionArray;
};
struct UInteractionMaster_eventProcess_Tick_Parms
{
    TArray<class UInteraction*> InteractionArray;
    FLOAT DeltaTime;
};
struct UInteractionMaster_eventProcess_PostRender_Parms
{
    TArray<class UInteraction*> InteractionArray;
    class UCanvas* Canvas;
};
struct UInteractionMaster_eventProcess_PreRender_Parms
{
    TArray<class UInteraction*> InteractionArray;
    class UCanvas* Canvas;
};
struct UInteractionMaster_eventProcess_KeyEvent_Parms
{
    TArray<class UInteraction*> InteractionArray;
    BYTE Key;
    BYTE Action;
    FLOAT Delta;
    BITFIELD ReturnValue;
};
struct UInteractionMaster_eventProcess_KeyType_Parms
{
    TArray<class UInteraction*> InteractionArray;
    BYTE Key;
    BITFIELD ReturnValue;
};
struct UInteractionMaster_eventSetFocusTo_Parms
{
    class UInteraction* Inter;
    class UPlayer* ViewportOwner;
};
struct UInteractionMaster_eventRemoveInteraction_Parms
{
    class UInteraction* RemoveMe;
};
struct UInteractionMaster_eventAddInteraction_Parms
{
    FString InteractionName;
    class UPlayer* AttachTo;
    class UInteraction* ReturnValue;
};
class ENGINE_API UInteractionMaster : public UInteractions
{
public:
    class UClient* Client;
    BITFIELD bZoufff:1 GCC_PACK(4);
    class UInteraction* BaseMenu GCC_PACK(4);
    class UInteraction* Console;
    TArrayNoInit<class UInteraction*> GlobalInteractions;
    DECLARE_FUNCTION(execTravel);
    void eventProcess_Message(const FString& Msg, FLOAT MsgLife, TArray<class UInteraction*> InteractionArray)
    {
        UInteractionMaster_eventProcess_Message_Parms Parms;
        Parms.Msg=Msg;
        Parms.MsgLife=MsgLife;
        Parms.InteractionArray=InteractionArray;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Message),&Parms);
    }
    void eventProcess_Tick(TArray<class UInteraction*> InteractionArray, FLOAT DeltaTime)
    {
        UInteractionMaster_eventProcess_Tick_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_Tick),&Parms);
    }
    void eventProcess_PostRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
    {
        UInteractionMaster_eventProcess_PostRender_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PostRender),&Parms);
    }
    void eventProcess_PreRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
    {
        UInteractionMaster_eventProcess_PreRender_Parms Parms;
        Parms.InteractionArray=InteractionArray;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_PreRender),&Parms);
    }
    BITFIELD eventProcess_KeyEvent(TArray<class UInteraction*> InteractionArray, BYTE& Key, BYTE& Action, FLOAT Delta)
    {
        UInteractionMaster_eventProcess_KeyEvent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionArray=InteractionArray;
        Parms.Key=Key;
        Parms.Action=Action;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyEvent),&Parms);
        Key=Parms.Key;
        Action=Parms.Action;
        return Parms.ReturnValue;
    }
    BITFIELD eventProcess_KeyType(TArray<class UInteraction*> InteractionArray, BYTE& Key)
    {
        UInteractionMaster_eventProcess_KeyType_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionArray=InteractionArray;
        Parms.Key=Key;
        ProcessEvent(FindFunctionChecked(ENGINE_Process_KeyType),&Parms);
        Key=Parms.Key;
        return Parms.ReturnValue;
    }
    void eventSetFocusTo(class UInteraction* Inter, class UPlayer* ViewportOwner)
    {
        UInteractionMaster_eventSetFocusTo_Parms Parms;
        Parms.Inter=Inter;
        Parms.ViewportOwner=ViewportOwner;
        ProcessEvent(FindFunctionChecked(ENGINE_SetFocusTo),&Parms);
    }
    void eventRemoveInteraction(class UInteraction* RemoveMe)
    {
        UInteractionMaster_eventRemoveInteraction_Parms Parms;
        Parms.RemoveMe=RemoveMe;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveInteraction),&Parms);
    }
    class UInteraction* eventAddInteraction(const FString& InteractionName, class UPlayer* AttachTo)
    {
        UInteractionMaster_eventAddInteraction_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionName=InteractionName;
        Parms.AttachTo=AttachTo;
        ProcessEvent(FindFunctionChecked(ENGINE_AddInteraction),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UInteractionMaster,UInteractions,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInteractionMaster)
};


struct UInteraction_eventInitialized_Parms
{
};
struct UInteraction_eventEnterAltTab_Parms
{
};
struct UInteraction_eventExitAltTab_Parms
{
};
struct UInteraction_eventResetMainMenu_Parms
{
};
struct UInteraction_eventLeaveGame_Parms
{
    BYTE _bwhatToDo;
};
struct UInteraction_eventShowMainMenu_Parms
{
};
struct UInteraction_eventShowGameMenu_Parms
{
    BITFIELD GoToSaveLoadArea;
};
struct UInteraction_eventHideFakeWindow_Parms
{
};
struct UInteraction_eventShowFakeWindow_Parms
{
};
struct UInteraction_eventPopCD_Parms
{
};
struct UInteraction_eventGameLoaded_Parms
{
    BITFIELD success;
};
struct UInteraction_eventGameSaved_Parms
{
    BITFIELD success;
};
class ENGINE_API UInteraction : public UInteractions
{
public:
    BITFIELD bActive:1 GCC_PACK(4);
    BITFIELD bVisible:1;
    BITFIELD bRequiresTick:1;
    class UPlayer* ViewportOwner GCC_PACK(4);
    class UInteractionMaster* Master;
    DECLARE_FUNCTION(execScreenToWorld);
    DECLARE_FUNCTION(execWorldToScreen);
    DECLARE_FUNCTION(execFindAction);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execInitialize);
    void eventInitialized()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Initialized),NULL);
    }
    void eventEnterAltTab()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EnterAltTab),NULL);
    }
    void eventExitAltTab()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ExitAltTab),NULL);
    }
    void eventResetMainMenu()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ResetMainMenu),NULL);
    }
    void eventLeaveGame(BYTE _bwhatToDo)
    {
        UInteraction_eventLeaveGame_Parms Parms;
        Parms._bwhatToDo=_bwhatToDo;
        ProcessEvent(FindFunctionChecked(ENGINE_LeaveGame),&Parms);
    }
    void eventShowMainMenu()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ShowMainMenu),NULL);
    }
    void eventShowGameMenu(BITFIELD GoToSaveLoadArea)
    {
        UInteraction_eventShowGameMenu_Parms Parms;
        Parms.GoToSaveLoadArea=GoToSaveLoadArea;
        ProcessEvent(FindFunctionChecked(ENGINE_ShowGameMenu),&Parms);
    }
    void eventHideFakeWindow()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_HideFakeWindow),NULL);
    }
    void eventShowFakeWindow()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ShowFakeWindow),NULL);
    }
    void eventPopCD()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PopCD),NULL);
    }
    void eventGameLoaded(BITFIELD success)
    {
        UInteraction_eventGameLoaded_Parms Parms;
        Parms.success=success;
        ProcessEvent(FindFunctionChecked(ENGINE_GameLoaded),&Parms);
    }
    void eventGameSaved(BITFIELD success)
    {
        UInteraction_eventGameSaved_Parms Parms;
        Parms.success=success;
        ProcessEvent(FindFunctionChecked(ENGINE_GameSaved),&Parms);
    }
    DECLARE_CLASS(UInteraction,UInteractions,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInteraction)
};

#define UCONST_MaxHistory 16

class ENGINE_API UConsole : public UInteraction
{
public:
    BYTE ConsoleKey;
    INT HistoryTop;
    INT HistoryBot;
    INT HistoryCur;
    FStringNoInit TypedStr;
    FStringNoInit History[16];
    BITFIELD bTyping:1 GCC_PACK(4);
    DECLARE_CLASS(UConsole,UInteraction,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConsole)
};


struct UPlayerInput_eventPlayerInput_Parms
{
    FLOAT DeltaTime;
};
class ENGINE_API UPlayerInput : public UObject
{
public:
    BITFIELD bInvertMouse:1 GCC_PACK(4);
    BITFIELD bFireToDrawGun:1;
    INT MouseSensitivity GCC_PACK(4);
    FLOAT shouldMouseInvert;
    void eventPlayerInput(FLOAT DeltaTime)
    {
        UPlayerInput_eventPlayerInput_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerInput),&Parms);
    }
    DECLARE_CLASS(UPlayerInput,UObject,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPlayerInput)
};


class ENGINE_API UCheatManager : public UObject
{
public:
    BITFIELD bGhost:1 GCC_PACK(4);
    class AActor* RadiiActorList[8] GCC_PACK(4);
    INT iCurViewActor;
    DECLARE_CLASS(UCheatManager,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCheatManager)
};


class ENGINE_API ULevelSummary : public UObject
{
public:
    FStringNoInit Title;
    FStringNoInit Author;
    FStringNoInit LevelEnterText;
    DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULevelSummary)
};


class ENGINE_API UReachSpec : public UObject
{
public:
    INT Distance;
    class ANavigationPoint* Start;
    class ANavigationPoint* End;
    INT CollisionRadius;
    INT CollisionHeight;
    INT reachFlags;
    INT MaxLandingVelocity;
    BYTE bPruned;
    DECLARE_CLASS(UReachSpec,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UReachSpec)
};

enum EModifierType
{
    MT_ENone                =0,
    MT_EConcentricWaveX     =1,
    MT_EConcentricWaveY     =2,
    MT_EConcentricWaveZ     =3,
    MT_MAX                  =4,
};

class ENGINE_API UEModifier : public UObject
{
public:
    BYTE ModifierType;
    FLOAT Amplitude;
    FLOAT Frequency;
    FLOAT Wavelength;
    FLOAT Decay;
    FVector ModifierOffset;
    DECLARE_CLASS(UEModifier,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UEModifier)
};

enum eKEY_BIND
{
    KEY_NONE                =0,
    KEY_MOVE_UP             =1,
    KEY_MOVE_DOWN           =2,
    KEY_MOVE_LEFT           =3,
    KEY_MOVE_RIGHT          =4,
    KEY_LOOK_UP             =5,
    KEY_LOOK_DOWN           =6,
    KEY_LOOK_LEFT           =7,
    KEY_LOOK_RIGHT          =8,
    KEY_INTERACTION         =9,
    KEY_SCOPE               =10,
    KEY_JUMP                =11,
    KEY_DUCK                =12,
    KEY_FIRE                =13,
    KEY_ALT_FIRE            =14,
    KEY_CHANGE_ROF          =15,
    KEY_QUICK               =16,
    KEY_MENU                =17,
    KEY_RESETCAMERA         =18,
    KEY_WORLDINTERACT       =19,
    KEY_SWITCHROF           =20,
    KEY_BACK                =21,
    KEY_MAX                 =22,
};
enum eVocPosition
{
    PO_NONE                 =0,
    PO_BEHIND               =1,
    PO_IN_FRONT_OF          =2,
    PO_BESIDE               =3,
    PO_IN                   =4,
    PO_RUNNING_OUT_OF       =5,
    PO_RUNNING_IN           =6,
    PO_MAX                  =7,
};
enum eVocSubject
{
    SU_NONE                 =0,
    SU_YOU_ARE              =1,
    SU_HE_IS                =2,
    SU_MAX                  =3,
};
enum eVocStart
{
    VS_NONE                 =0,
    VS_I_THINK              =1,
    VS_I_KNOW               =2,
    VS_MAX                  =3,
};
enum eSectorType
{
    SC_NONE                 =0,
    SC_ELEVATOR             =1,
    SC_KITCHEN              =2,
    SC_STAIRCASE            =3,
    SC_DEADEND              =4,
    SC_BATHROOMS            =5,
    SC_HALLWAY              =6,
    SC_MAX                  =7,
};
enum eZoneType
{
    EZT_NONE                =0,
    EZT_TABLE               =1,
    EZT_CHAIR               =2,
    EZT_PLANT               =3,
    EZT_CORNER              =4,
    EZT_MAX                 =5,
};
enum eSVMode
{
    SV_CLOSE                =0,
    SV_CONVERSATION         =1,
    SV_KEYPAD               =2,
    SV_CAMERA               =3,
    SV_SNIPER               =4,
    SV_IDLE                 =5,
    SV_MAX                  =6,
};
enum eTransmissionType
{
    TR_NONE                 =0,
    TR_CONSOLE              =1,
    TR_NPCS                 =2,
    TR_HEADQUARTER          =3,
    TR_CONVERSATION         =4,
    TR_INVENTORY            =5,
    TR_HINT                 =6,
    TR_MENUSPEECH           =7,
    TR_COMMWARNING          =8,
    TR_MAX                  =9,
};
enum GoalType
{
    GOAL_Guard              =0,
    GOAL_Defend             =1,
    GOAL_Patrol             =2,
    GOAL_Action             =3,
    GOAL_MoveTo             =4,
    GOAL_Search             =5,
    GOAL_Attack             =6,
    GOAL_InteractWith       =7,
    GOAL_Transmission       =8,
    GOAL_Wait               =9,
    GOAL_Follow             =10,
    GOAL_Attack_Follow      =11,
    GOAL_Wander             =12,
    GOAL_QuickSearch        =13,
    GOAL_Charge             =14,
    GOAL_MoveAndAttack      =15,
    GOAL_Stop               =16,
    GOAL_ThrowGrenade       =17,
    GOAL_PlaceWallMine      =18,
    GOAL_SprayFire          =19,
    GOAL_TEMP_1             =20,
    GOAL_TEMP_2             =21,
    GOAL_TEMP_3             =22,
    GOAL_TEMP_4             =23,
    GOAL_MAX                =24,
};
enum GoalStatus
{
    GS_Executing            =0,
    GS_Complete             =1,
    GS_Failure              =2,
    GS_Continue             =3,
    GS_MAX                  =4,
};

class ENGINE_API UEchelonEnums : public UObject
{
public:
    DECLARE_CLASS(UEchelonEnums,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UEchelonEnums)
};


class ENGINE_API UESList : public UObject
{
public:
    class UEListNode* FirstNode;
    DECLARE_FUNCTION(execLength);
    DECLARE_FUNCTION(execClear);
    DECLARE_FUNCTION(execInsertBefore);
    DECLARE_FUNCTION(execRemove);
    DECLARE_FUNCTION(execInsertAtEnd);
    DECLARE_FUNCTION(execRemoveListHead);
    DECLARE_CLASS(UESList,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UESList)
};


class ENGINE_API UEListNode : public UObject
{
public:
    class UObject* Data;
    class UEListNode* NextNode;
    DECLARE_CLASS(UEListNode,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UEListNode)
};


class ENGINE_API UEPCGameOptions : public UObject
{
public:
    BYTE ShadowLevel;
    BYTE ShadowResolution;
    FStringNoInit Resolution;
    BYTE Brightness;
    BYTE Gamma;
    BYTE EffectsQuality;
    BYTE GraphicsCaps;
    BYTE VidMem;
    BYTE AmbiantVolume;
    BYTE VoicesVolume;
    BYTE MusicVolume;
    BYTE SFXVolume;
    BYTE AudioVirt;
    BITFIELD Sound3DAcc:1 GCC_PACK(4);
    BITFIELD EAX:1;
    BITFIELD EAX_Capable:1;
    BYTE RTAmbiantVolume GCC_PACK(4);
    BYTE RTVoicesVolume;
    BYTE RTMusicVolume;
    BYTE RTSFXVolume;
    BITFIELD InvertMouse:1 GCC_PACK(4);
    BITFIELD FireEquipGun:1;
    BYTE MouseSensitivity GCC_PACK(4);
    BITFIELD bResolutionChanged:1 GCC_PACK(4);
    FStringNoInit oldResolution GCC_PACK(4);
    BYTE oldEffectsQuality;
    BYTE oldShadowResolution;
    DECLARE_FUNCTION(execUpdateEngineSettings);
    DECLARE_CLASS(UEPCGameOptions,UObject,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UEPCGameOptions)
};


class ENGINE_API UEPatrolInfo : public UObject
{
public:
    TArrayNoInit<FName> m_sNextPatrolPointTag;
    TArrayNoInit<class ANavigationPoint*> m_pNext;
    TArrayNoInit<class ANavigationPoint*> m_pPrevious;
    FLOAT m_rSleepTime;
    FName m_FocusTag;
    class USound* m_PatrolSound;
    FName m_PatrolAnim;
    FLOAT m_WaitForTriggerTime;
    FName m_GroupTag;
    FName m_JumpLabel;
    FName m_SyncSig;
    class AController* m_WaitingController;
    BITFIELD m_bPatrolBackwards:1 GCC_PACK(4);
    BITFIELD m_bWasANavPoint:1;
    BITFIELD m_bUseAsCheckPoint:1;
    BITFIELD m_bNoStrictWaitFocus:1;
    FLOAT m_RandomStopPercentage GCC_PACK(4);
    FName m_WaitFocusTag;
    class AMover* m_pPassThroughMover;
    DECLARE_CLASS(UEPatrolInfo,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UEPatrolInfo)
};


struct UERumble_eventUpdate_Parms
{
    FLOAT DeltaTime;
    FLOAT lRumble;
    FLOAT hRumble;
};
class ENGINE_API UERumble : public UObject
{
public:
    FLOAT heavyRumble;
    FLOAT heavyDuration;
    FLOAT lightRumble;
    FLOAT lightDuration;
    BITFIELD lightSet:1 GCC_PACK(4);
    BITFIELD heavySet:1;
    void eventUpdate(FLOAT DeltaTime, FLOAT& lRumble, FLOAT& hRumble)
    {
        UERumble_eventUpdate_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        Parms.lRumble=lRumble;
        Parms.hRumble=hRumble;
        ProcessEvent(FindFunctionChecked(ENGINE_Update),&Parms);
        lRumble=Parms.lRumble;
        hRumble=Parms.hRumble;
    }
    DECLARE_CLASS(UERumble,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UERumble)
};

#endif

AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,1515,execRemoveChangedActor);
AUTOGENERATE_FUNCTION(AActor,1514,execAddChangedActor);
AUTOGENERATE_FUNCTION(AActor,1105,execFastPointCheck);
AUTOGENERATE_FUNCTION(AActor,1139,execTraceTarget);
AUTOGENERATE_FUNCTION(AActor,1107,execTraceBone);
AUTOGENERATE_FUNCTION(AActor,1240,execFastTraceBsp);
AUTOGENERATE_FUNCTION(AActor,1513,execSynchAnim);
AUTOGENERATE_FUNCTION(AActor,1507,execGetAnimTime);
AUTOGENERATE_FUNCTION(AActor,1406,execStopSleep);
AUTOGENERATE_FUNCTION(AActor,1405,execGetBoundingBox);
AUTOGENERATE_FUNCTION(AActor,1203,execGetVisibilityFactor);
AUTOGENERATE_FUNCTION(AActor,1233,execGetVectorFrom);
AUTOGENERATE_FUNCTION(AActor,1232,execSetCollisionPrim);
AUTOGENERATE_FUNCTION(AActor,1231,execSetStaticMesh);
AUTOGENERATE_FUNCTION(AActor,1125,execInterpolateRotator);
AUTOGENERATE_FUNCTION(AActor,1501,execInterpolateRotatorValue);
AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,321,execCollidingActors);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,313,execDynamicActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,3082,execIsLocationInRainVolume);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,4015,execGetGameOptions);
AUTOGENERATE_FUNCTION(AActor,1626,execIsGameOver);
AUTOGENERATE_FUNCTION(AActor,1625,execStartFadeOut);
AUTOGENERATE_FUNCTION(AActor,1624,execFlushRequests);
AUTOGENERATE_FUNCTION(AActor,1623,execSetLaserLocked);
AUTOGENERATE_FUNCTION(AActor,1622,execSetLaserMicSession);
AUTOGENERATE_FUNCTION(AActor,1619,execResumeSound);
AUTOGENERATE_FUNCTION(AActor,1618,execPauseSound);
AUTOGENERATE_FUNCTION(AActor,1617,execAddOneVoice);
AUTOGENERATE_FUNCTION(AActor,1616,execDistancePointToLine);
AUTOGENERATE_FUNCTION(AActor,2120,execSetDASkinGlowIntensity);
AUTOGENERATE_FUNCTION(AActor,1133,execToLocalDir);
AUTOGENERATE_FUNCTION(AActor,1132,execToLocal);
AUTOGENERATE_FUNCTION(AActor,1131,execToWorldDir);
AUTOGENERATE_FUNCTION(AActor,1130,execToWorld);
AUTOGENERATE_FUNCTION(AActor,1602,execStopSound);
AUTOGENERATE_FUNCTION(AActor,1610,execSetReverbEffect);
AUTOGENERATE_FUNCTION(AActor,1611,execVerifyOcclusion);
AUTOGENERATE_FUNCTION(AActor,1609,execAddSoundRequest);
AUTOGENERATE_FUNCTION(AActor,1608,execStopAllSounds);
AUTOGENERATE_FUNCTION(AActor,1615,execCanPlayMusic);
AUTOGENERATE_FUNCTION(AActor,1614,execStopAllSoundsActor);
AUTOGENERATE_FUNCTION(AActor,1607,execStopAllVoicesActor);
AUTOGENERATE_FUNCTION(AActor,1603,execIsPlayingAnyActor);
AUTOGENERATE_FUNCTION(AActor,1601,execIsPlaying);
AUTOGENERATE_FUNCTION(AActor,1606,execGetVolumeLineValue);
AUTOGENERATE_FUNCTION(AActor,1605,execSetVolumeLineValue);
AUTOGENERATE_FUNCTION(AActor,1604,execGetSoundPosition);
AUTOGENERATE_FUNCTION(AActor,1600,execGetSoundDuration);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,1229,execFindSlopeRotation);
AUTOGENERATE_FUNCTION(AActor,1174,execFindBulletExit);
AUTOGENERATE_FUNCTION(AActor,1419,execGetCurrentMapName);
AUTOGENERATE_FUNCTION(AActor,4014,execGetCanvas);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimIsInGroup);
AUTOGENERATE_FUNCTION(AActor,-1,execGetAnimParams);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneDirection);
AUTOGENERATE_FUNCTION(AActor,-1,execSetBoneScale);
AUTOGENERATE_FUNCTION(AActor,-1,execLockRootMotion);
AUTOGENERATE_FUNCTION(AActor,-1,execDetachFromBone);
AUTOGENERATE_FUNCTION(AActor,-1,execAttachToBone);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocationDelta);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetRootLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetIKFade);
AUTOGENERATE_FUNCTION(AActor,-1,execGetBoneCoords);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendToAlpha);
AUTOGENERATE_FUNCTION(AActor,-1,execAnimBlendParams);
AUTOGENERATE_FUNCTION(AActor,-1,execLinkSkelAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execGetNotifyChannel);
AUTOGENERATE_FUNCTION(AActor,-1,execEnableChannelNotify);
AUTOGENERATE_FUNCTION(AActor,1260,execIsAnimBackward);
AUTOGENERATE_FUNCTION(AActor,-1,execIsTweening);
AUTOGENERATE_FUNCTION(AActor,-1,execStopAnimating);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,1144,execFindBase);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeLocation);
AUTOGENERATE_FUNCTION(AActor,-1,execSetRelativeRotation);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawType);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale3D);
AUTOGENERATE_FUNCTION(AActor,-1,execSetDrawScale);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,256,execSleep);
AUTOGENERATE_FUNCTION(AActor,1181,execFlushMouseMoveMessages);
AUTOGENERATE_FUNCTION(AActor,1180,execSkipPresent);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execSpawnParticle);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachActor);
AUTOGENERATE_FUNCTION(AProjector,-1,execAbandonProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachProjector);
AUTOGENERATE_FUNCTION(ASceneManager,-1,execGetTotalSceneTime);
AUTOGENERATE_FUNCTION(APawn,1121,execIsCrouch);
AUTOGENERATE_FUNCTION(APawn,1116,execUnCrouch);
AUTOGENERATE_FUNCTION(APawn,1115,execCrouch);
AUTOGENERATE_FUNCTION(APawn,1104,execCheckFence);
AUTOGENERATE_FUNCTION(AEmitter,-1,execKill);
AUTOGENERATE_FUNCTION(UInteractionMaster,-1,execTravel);
AUTOGENERATE_FUNCTION(UInteraction,-1,execScreenToWorld);
AUTOGENERATE_FUNCTION(UInteraction,-1,execWorldToScreen);
AUTOGENERATE_FUNCTION(UInteraction,3501,execFindAction);
AUTOGENERATE_FUNCTION(UInteraction,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UInteraction,-1,execInitialize);
AUTOGENERATE_FUNCTION(AVolume,1551,execEncompLoc);
AUTOGENERATE_FUNCTION(AVolume,-1,execEncompasses);
AUTOGENERATE_FUNCTION(APlayerController,-1,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerController,546,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execSetViewTarget);
AUTOGENERATE_FUNCTION(APlayerController,4018,execLoadKeyboard);
AUTOGENERATE_FUNCTION(APlayerController,4017,execSaveKeyboard);
AUTOGENERATE_FUNCTION(APlayerController,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerController,-1,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerController,4013,execSetKey);
AUTOGENERATE_FUNCTION(APlayerController,4012,execGetEnumName);
AUTOGENERATE_FUNCTION(APlayerController,4011,execGetActionKey);
AUTOGENERATE_FUNCTION(APlayerController,4010,execGetKey);
AUTOGENERATE_FUNCTION(AController,-1,execStopWaiting);
AUTOGENERATE_FUNCTION(AController,1100,execMoveToDestination);
AUTOGENERATE_FUNCTION(AController,534,execPickAnyTarget);
AUTOGENERATE_FUNCTION(AController,531,execPickTarget);
AUTOGENERATE_FUNCTION(AController,530,execRemoveController);
AUTOGENERATE_FUNCTION(AController,529,execAddController);
AUTOGENERATE_FUNCTION(AController,527,execWaitForLanding);
AUTOGENERATE_FUNCTION(AController,526,execPickWallAdjust);
AUTOGENERATE_FUNCTION(AController,520,execactorReachable);
AUTOGENERATE_FUNCTION(AController,521,execpointReachable);
AUTOGENERATE_FUNCTION(AController,523,execEAdjustJump);
AUTOGENERATE_FUNCTION(AController,522,execClearPaths);
AUTOGENERATE_FUNCTION(AController,525,execFindRandomDest);
AUTOGENERATE_FUNCTION(AController,-1,execFindPathTowardNearest);
AUTOGENERATE_FUNCTION(AController,517,execFindPathToward);
AUTOGENERATE_FUNCTION(AController,518,execFindPathTo);
AUTOGENERATE_FUNCTION(AController,533,execCanSee);
AUTOGENERATE_FUNCTION(AController,514,execLineOfSightTo);
AUTOGENERATE_FUNCTION(AController,508,execFinishRotation);
AUTOGENERATE_FUNCTION(AController,502,execMoveToward);
AUTOGENERATE_FUNCTION(AController,500,execMoveTo);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DLine);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execGameEventRegistered);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execRemoveGameEvent);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execAddTravelGameEvent);
AUTOGENERATE_FUNCTION(AGameInfo,-1,execAddLocalGameEvent);
AUTOGENERATE_FUNCTION(ALevelInfo,1599,execAddImpact);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);
AUTOGENERATE_FUNCTION(UESList,1318,execLength);
AUTOGENERATE_FUNCTION(UESList,1317,execClear);
AUTOGENERATE_FUNCTION(UESList,1422,execInsertBefore);
AUTOGENERATE_FUNCTION(UESList,1415,execRemove);
AUTOGENERATE_FUNCTION(UESList,1404,execInsertAtEnd);
AUTOGENERATE_FUNCTION(UESList,1403,execRemoveListHead);
AUTOGENERATE_FUNCTION(UEPCGameOptions,4016,execUpdateEngineSettings);
AUTOGENERATE_FUNCTION(AESoftBodyActor,1164,execRemoveAttach);
AUTOGENERATE_FUNCTION(AESoftBodyActor,1138,execSBExplosionHit);
AUTOGENERATE_FUNCTION(AESoftBodyActor,1137,execSBBulletHit);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
