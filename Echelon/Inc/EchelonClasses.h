/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef ECHELON_API
#define ECHELON_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ECHELON_API FName ECHELON_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(GetPause)
AUTOGENERATE_NAME(Fire)
AUTOGENERATE_NAME(SetSelectedItem)
AUTOGENERATE_NAME(Select)
AUTOGENERATE_NAME(Pipe)
AUTOGENERATE_NAME(GetFireStart)
AUTOGENERATE_NAME(UnlockLadder)
AUTOGENERATE_NAME(Ledge)
AUTOGENERATE_NAME(Pole)
AUTOGENERATE_NAME(ZipLine)
AUTOGENERATE_NAME(SpecialTick)
AUTOGENERATE_NAME(GetRandomWaitAnim)
AUTOGENERATE_NAME(UpdateAnimationSet)
AUTOGENERATE_NAME(CheckForTransition)
AUTOGENERATE_NAME(LoopAnimOnly)
AUTOGENERATE_NAME(StopTurning)
AUTOGENERATE_NAME(PlayBlend)
AUTOGENERATE_NAME(PlayAnimNoMovement)
AUTOGENERATE_NAME(BlendAnimOverCurrent)
AUTOGENERATE_NAME(RotateTowardsRotator)
AUTOGENERATE_NAME(RotateTowardsPosition)
AUTOGENERATE_NAME(PlayWaitingBlend)
AUTOGENERATE_NAME(IsReloading)
AUTOGENERATE_NAME(GetMoveSpeed)
AUTOGENERATE_NAME(NotifyShotJustMissed)
AUTOGENERATE_NAME(ClimbLadder)
AUTOGENERATE_NAME(GetActorSide)
AUTOGENERATE_NAME(ReduceCameraSpeed)
AUTOGENERATE_NAME(NoGE)
AUTOGENERATE_NAME(FeetLedge)
AUTOGENERATE_NAME(WaistLedge)
AUTOGENERATE_NAME(HandOverHand)
AUTOGENERATE_NAME(NarrowLadder)
AUTOGENERATE_NAME(TopNarrowLadder)
AUTOGENERATE_NAME(TopPipe)
AUTOGENERATE_NAME(FenceTop)
AUTOGENERATE_NAME(AddNote)
AUTOGENERATE_NAME(AddGoal)
AUTOGENERATE_NAME(SetGoalStatus)
AUTOGENERATE_NAME(NotifyAction)
AUTOGENERATE_NAME(GoggleUp)
AUTOGENERATE_NAME(GoggleDown)
AUTOGENERATE_NAME(ResetGoalList)
AUTOGENERATE_NAME(SetCurrentLadder)
AUTOGENERATE_NAME(InitPatrolNetwork)
AUTOGENERATE_NAME(GetCurrentGoalType)
AUTOGENERATE_NAME(ExecGoal_Wander)
AUTOGENERATE_NAME(SubGoal_PatrolTurnAround)
AUTOGENERATE_NAME(OpenDoor)
AUTOGENERATE_NAME(ExecGoal_QuickSearch)
AUTOGENERATE_NAME(InitInteraction)
AUTOGENERATE_NAME(BeginInteraction)
AUTOGENERATE_NAME(ReplaceDefaultGoal)
AUTOGENERATE_NAME(AddGoalDirect)
AUTOGENERATE_NAME(ReplaceGoal)
AUTOGENERATE_NAME(GotoStateSafe)
AUTOGENERATE_NAME(AttackFromCover)
AUTOGENERATE_NAME(EnteringDoorRadius)
AUTOGENERATE_NAME(GetMaximumAimAngle)
AUTOGENERATE_NAME(CheckTransitionTable)
AUTOGENERATE_NAME(SetGrenadeTime)
AUTOGENERATE_NAME(SelectItem)
AUTOGENERATE_NAME(StartedMoving)
AUTOGENERATE_NAME(StoppedMoving)
AUTOGENERATE_NAME(GetPersonalityUpdateTime)
AUTOGENERATE_NAME(GetLaziness)
AUTOGENERATE_NAME(PlaceWallMine)
AUTOGENERATE_NAME(ThrowGrenade)
AUTOGENERATE_NAME(EventCallBack)
AUTOGENERATE_NAME(Destructed)
AUTOGENERATE_NAME(CanAddThisItem)
AUTOGENERATE_NAME(AddedToInventory)
AUTOGENERATE_NAME(GetFireEnd)
AUTOGENERATE_NAME(IsROFModeAvailable)
AUTOGENERATE_NAME(ReflexCallBack)
AUTOGENERATE_NAME(AdjustDefaultPatternState)
AUTOGENERATE_NAME(CommunicationCallBack)
AUTOGENERATE_NAME(GotoPatternLabel)
AUTOGENERATE_NAME(PlayerIsVisible)
AUTOGENERATE_NAME(MicIsTouchingSession)
AUTOGENERATE_NAME(GetCurrentNode)
AUTOGENERATE_NAME(SetClipZone)
AUTOGENERATE_NAME(ResetClipZone)
AUTOGENERATE_NAME(GetCurrentTarget)
AUTOGENERATE_NAME(GetNextTarget)
AUTOGENERATE_NAME(SendJumpEvent)
AUTOGENERATE_NAME(AIAlarmCallBack)
AUTOGENERATE_NAME(AddOrUpdateCheckPoint)
AUTOGENERATE_NAME(EndScriptedPattern)
AUTOGENERATE_NAME(AIEventCallBack)
AUTOGENERATE_NAME(IsSelected)
AUTOGENERATE_NAME(UnEquipItem)
AUTOGENERATE_NAME(GetNumberOfCategories)
AUTOGENERATE_NAME(GetPackageName)
AUTOGENERATE_NAME(GetCategoryName)
AUTOGENERATE_NAME(ToggleHeadLight)
AUTOGENERATE_NAME(Transition_WeaponSelect)
AUTOGENERATE_NAME(Transition_WeaponAway)
AUTOGENERATE_NAME(Transition_ItemSelect)
AUTOGENERATE_NAME(AI_AttachNotify)
AUTOGENERATE_NAME(GetDoorSide)
AUTOGENERATE_NAME(RemovedFromInventory)
AUTOGENERATE_NAME(StayOpen)
AUTOGENERATE_NAME(TargetIsFiring)
AUTOGENERATE_NAME(GetCurrent)
AUTOGENERATE_NAME(AddRecon)
AUTOGENERATE_NAME(TimeoutHidePoint)
AUTOGENERATE_NAME(CheckHidePoints)
AUTOGENERATE_NAME(IsTimedOut)
AUTOGENERATE_NAME(UpdateProfile)
AUTOGENERATE_NAME(LoadProfile)
AUTOGENERATE_NAME(SaveTInfo)
AUTOGENERATE_NAME(LoadTInfo)
AUTOGENERATE_NAME(AddReconText)
AUTOGENERATE_NAME(AttachObject)
AUTOGENERATE_NAME(SetSecondaryAmmo)
AUTOGENERATE_NAME(CloseTrainingData)
AUTOGENERATE_NAME(ICanBark)
AUTOGENERATE_NAME(IsTransitionQueueEmpty)
AUTOGENERATE_NAME(GetClosestMember)
AUTOGENERATE_NAME(UpdateMoveFlagState)
AUTOGENERATE_NAME(AddMultiMapInformation)
AUTOGENERATE_NAME(StartInitialPattern)
AUTOGENERATE_NAME(SetDefaultGuard)
AUTOGENERATE_NAME(InitialSave)
AUTOGENERATE_NAME(GetMostRecentPlayerInfo)

#ifndef NAMES_ONLY


class ECHELON_API AEchelonLevelInfo : public ALevelInfo
{
public:
    class UClass* PatternClass;
    class UClass* StartPatternClass;
    class UClass* AlarmPatternClass;
    BITFIELD bMusicEnabled:1 GCC_PACK(4);
    BITFIELD bAllowFlashlightsEverywhere:1;
    BITFIELD bOnlyUseSingleShot:1;
    BITFIELD bIgnoreAlarmStage:1;
    BITFIELD bLiteWarnings:1;
    TArrayNoInit<class UMeshAnimation*> SpecialEventAnims GCC_PACK(4);
    TArrayNoInit<class UClass*> Recons;
    TArrayNoInit<class UClass*> InventoryItems;
    class UMesh* SamMesh;
    class AEPattern* Pattern;
    class AEPattern* AlarmPattern;
    TArrayNoInit<class AEMemoryStick*> MemoryBank;
    class AEInfoPoint* InfoPointList;
    INT AlarmStage;
    FLOAT AlarmModifier[5];
    FLOAT afLastBarked[44];
    FLOAT LastWhistleTime;
    class USound* RandomWhistle;
    TArrayNoInit<FSLadderLock> LadderLockArray;
    class AEMusic* MusicObj;
    class USound* FindCorpseSound;
    class AETGAME* TGAME;
    class AETMENU* TMENU;
    class AETICON* TICON;
    DECLARE_FUNCTION(execIsLadderLockedBy);
    DECLARE_FUNCTION(execIsLadderLocked);
    DECLARE_FUNCTION(execUnlockLadder);
    DECLARE_FUNCTION(execLockLadder);
    DECLARE_CLASS(AEchelonLevelInfo,ALevelInfo,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEchelonLevelInfo)
};


class ECHELON_API AEZoneInfo : public AZoneInfo
{
public:
    BYTE SectorType;
    BITFIELD bUseAlarmIfPlayerIsInZone:1 GCC_PACK(4);
    DECLARE_CLASS(AEZoneInfo,AZoneInfo,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEZoneInfo)
};


class ECHELON_API AEchelonGameInfo : public AGameInfo
{
public:
    class AEchelonLevelInfo* ELevel;
    class AEPlayerController* pPlayer;
    class AEVariable* VarObject;
    INT NumVisChecks;
    INT HUD_OFFSET_X;
    INT HUD_OFFSET_Y;
    BITFIELD bDemoMode:1 GCC_PACK(4);
    BITFIELD bNoGore:1;
    BITFIELD bNoSamLookAt:1;
    FStringNoInit DemoMap GCC_PACK(4);
    FStringNoInit TrainingMap;
    BITFIELD bStartGame:1 GCC_PACK(4);
    BITFIELD bUsingController:1;
    BITFIELD bPandoraCrouch:1;
    BITFIELD bPandoraOpticCable:1;
    BITFIELD bAltDoorStealth:1;
    FLOAT m_minInterpolSpeed GCC_PACK(4);
    FLOAT m_grabbingDelay;
    FLOAT m_blinkDelay;
    INT m_maxSpeedInterval;
    INT m_defautSpeed;
    FLOAT m_forwardGentle;
    FLOAT m_forwardCrawl;
    FLOAT m_forwardFull;
    FLOAT m_backwardGentle;
    FLOAT m_backwardCrawl;
    FLOAT m_backwardFull;
    FLOAT m_rightGentle;
    FLOAT m_rightCrawl;
    FLOAT m_rightFull;
    FLOAT m_leftGentle;
    FLOAT m_leftCrawl;
    FLOAT m_leftFull;
    FLOAT m_minForce;
    FLOAT m_gentleForce;
    FLOAT m_fullForce;
    FLOAT m_inAirAccel;
    FLOAT m_onGroundAccel;
    FLOAT m_RollSpeed;
    FLOAT m_walkBias;
    FLOAT m_PlayerJoggingThreshold;
    FLOAT m_JumpOutSpeed;
    FLOAT m_LGShimmySpeed;
    FLOAT m_LGSpeedThreshold;
    FLOAT m_LGMinLength;
    FLOAT m_LGMaxGrabbingSpeed;
    FLOAT m_LGMinGrabbingSpeed;
    FLOAT m_LGMaxGrabbingAngle;
    FLOAT m_LGMaxGrabbingDistance;
    FLOAT m_LGMaxFallGrabSpeed;
    FLOAT m_PLMaxGrabbingSpeed;
    FLOAT m_PLMinGrabbingSpeed;
    FLOAT m_PLMaxGrabbingDistance;
    FLOAT m_PLMaxGrabbingAngle;
    FLOAT m_PLSlideDownMinSpeed;
    FLOAT m_PLSlideDownMaxSpeed;
    FLOAT m_PLSlideDownInertia;
    FLOAT m_PLUpwardSpeed;
    FLOAT m_PLFeetOffset;
    FLOAT m_PLRotationSpeed;
    FLOAT m_HOHForwardSpeed;
    FLOAT m_HOHMinLength;
    FLOAT m_HOHMaxGrabbingSpeed;
    FLOAT m_HOHMinGrabbingSpeed;
    FLOAT m_HOHMaxGrabbingDistance;
    FLOAT m_HOHFeetUpGap;
    FLOAT m_HOHFeetUpColHoriOffset;
    FLOAT m_HOHFeetUpColVertOffset;
    FLOAT m_HOHFeetUpMoveSpeed;
    FLOAT m_HOHFeetUpColHeight;
    FLOAT m_NLUpwardSpeed;
    FLOAT m_NLDownwardSpeed;
    FLOAT m_NLStepSize;
    FLOAT m_NLSlideDownMaxSpeed;
    FLOAT m_NLSlideDownMinSpeed;
    FLOAT m_NLSlideDownInertia;
    FLOAT m_NLMaxGrabbingAngle;
    FLOAT m_NLMaxGrabbingAngleTop;
    FLOAT m_NLMaxGrabbingDistance;
    FLOAT m_NLMaxGrabbingSpeed;
    FLOAT m_NLMinGrabbingSpeed;
    FLOAT m_NLSlideDelay;
    FLOAT m_PUpwardSpeed;
    FLOAT m_PDownwardSpeed;
    FLOAT m_PSlideDownMaxSpeed;
    FLOAT m_PSlideDownMinSpeed;
    FLOAT m_PSlideDownInertia;
    FLOAT m_PMaxGrabbingAngle;
    FLOAT m_PMaxGrabbingAngleTop;
    FLOAT m_PMaxGrabbingDistance;
    FLOAT m_PMaxGrabbingSpeed;
    FLOAT m_PMinGrabbingSpeed;
    FLOAT m_ZLSlideDownMaxSpeed;
    FLOAT m_ZLSlideDownMinSpeed;
    FLOAT m_ZLSlideDownInertia;
    FLOAT m_ZLMaxGrabbingDistance;
    FLOAT m_ZLMaxGrabbingSpeed;
    FLOAT m_ZLMinGrabbingSpeed;
    FLOAT m_FMaxGrabbingSpeed;
    FLOAT m_FMinGrabbingSpeed;
    FLOAT MinBeforeDamage;
    FLOAT MaxBeforeDeath;
    FLOAT NPCCushionDivider;
    FSurfaceNoiseInfo VeryQuietSurface;
    FSurfaceNoiseInfo QuietSurface;
    FSurfaceNoiseInfo NormalSurface;
    FSurfaceNoiseInfo LoudSurface;
    FSurfaceNoiseInfo VeryLoudSurface;
    DECLARE_FUNCTION(execGetKeyBinding);
    DECLARE_FUNCTION(execGetStringBinding);
    DECLARE_CLASS(AEchelonGameInfo,AGameInfo,0|CLASS_Config,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEchelonGameInfo)
};


class ECHELON_API AEInfoPoint : public AKeypoint
{
public:
    BITFIELD bLocked:1 GCC_PACK(4);
    BITFIELD bFocusPoint:1;
    BITFIELD bCoverPoint:1;
    BITFIELD bCornerPoint:1;
    BYTE ForcedWaitFlags GCC_PACK(4);
    FLOAT ForcedFocusTime;
    FLOAT FocusMaxDistance;
    FLOAT InternalFocusTimer;
    FLOAT TimeStamp;
    class AEInfoPoint* NextInfoPoint;
    DECLARE_CLASS(AEInfoPoint,AKeypoint,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEInfoPoint)
};


class ECHELON_API AEFocusPoint : public AEInfoPoint
{
public:
    FLOAT GrenadeTime;
    DECLARE_CLASS(AEFocusPoint,AEInfoPoint,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEFocusPoint)
};


class ECHELON_API AEDynamicFocusPoint : public AEFocusPoint
{
public:
    DECLARE_CLASS(AEDynamicFocusPoint,AEFocusPoint,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEDynamicFocusPoint)
};

enum ETransitionNotifyType
{
    TRANN_None              =0,
    TRANN_WeaponSelect      =1,
    TRANN_WeaponAway        =2,
    TRANN_ItemSelect        =3,
    TRANN_MAX               =4,
};
enum EBarkType
{
    BARK_Generic            =0,
    BARK_HeardFoot          =1,
    BARK_HeardGunShot       =2,
    BARK_UnderFire          =3,
    BARK_AnticipatingPain   =4,
    BARK_GroupScatter       =5,
    BARK_LightShot          =6,
    BARK_LightsOut          =7,
    BARK_NormalGreeting     =8,
    BARK_InvestigationGreeting=9,
    BARK_Mystified          =10,
    BARK_SeePlayer          =11,
    BARK_SurprisedByPlayer  =12,
    BARK_SeeSomethingMove   =13,
    BARK_SeeHackedTurret    =14,
    BARK_SeeWallMine        =15,
    BARK_SeeBlood           =16,
    BARK_SeeBrokenCamera    =17,
    BARK_SeeCorpse          =18,
    BARK_SeeUnconscious     =19,
    BARK_BeingInterrogated  =20,
    BARK_AboutToDie         =21,
    BARK_BeenHit            =22,
    BARK_DropHim            =23,
    BARK_ShootHim           =24,
    BARK_LostPlayer         =25,
    BARK_SearchFailedPlayer =26,
    BARK_SearchFailedOther  =27,
    BARK_PlayerKilled       =28,
    BARK_CombArea           =29,
    BARK_SendBackup         =30,
    BARK_BeAware            =31,
    BARK_DogHasScent        =32,
    BARK_DogLostTrail       =33,
    BARK_HitByBullet        =34,
    BARK_HitElectric        =35,
    BARK_KnockedOut         =36,
    BARK_Cough              =37,
    BARK_InFire             =38,
    BARK_Dying              =39,
    BARK_ChokeGrab          =40,
    BARK_LookingForYou      =41,
    BARK_RadioCancel        =42,
    BARK_BegForLife         =43,
    BARK_MAX                =44,
};
enum SurfaceNoiseType
{
    SN_VeryQuiet            =0,
    SN_Quiet                =1,
    SN_Normal               =2,
    SN_Loud                 =3,
    SN_VeryLoud             =4,
    SN_MAX                  =5,
};
enum EAIControllerState
{
    EAIS_Default            =0,
    EAIS_Aware              =1,
    EAIS_Alert              =2,
    EAIS_Dead               =3,
    EAIS_Unconscious        =4,
    EAIS_MAX                =5,
};
#define UCONST_P_MaxPills 15
#define UCONST_P_RFoot 15
#define UCONST_P_RCalf 14
#define UCONST_P_RThigh 13
#define UCONST_P_RHand 12
#define UCONST_P_RForeArm 11
#define UCONST_P_RUpperArm 10
#define UCONST_P_RBody 9
#define UCONST_P_LFoot 8
#define UCONST_P_LCalf 7
#define UCONST_P_LThigh 6
#define UCONST_P_LHand 5
#define UCONST_P_LForeArm 4
#define UCONST_P_LUpperArm 3
#define UCONST_P_LBody 2
#define UCONST_P_Head 1
#define UCONST_PERSONALITYCHANNEL 6
#define UCONST_ACTIONCHANNEL 5
#define UCONST_REFPOSECHANNEL 4
#define UCONST_TURNRIGHTCHANNEL 3
#define UCONST_TURNLEFTCHANNEL 2
#define UCONST_BLENDMOVEMENTCHANNEL 1
#define UCONST_BASEMOVEMENTCHANNEL 0
#define UCONST_TWOOVERPI 0.63661977236758134307553505349006

struct AEPawn_eventAI_AttachNotify_Parms
{
};
struct AEPawn_eventTransition_ItemSelect_Parms
{
    class AEInventoryItem* NewItem;
};
struct AEPawn_eventTransition_WeaponAway_Parms
{
};
struct AEPawn_eventTransition_WeaponSelect_Parms
{
};
struct AEPawn_eventGetMoveSpeed_Parms
{
    BYTE MoveFlags;
    FLOAT ReturnValue;
};
struct AEPawn_eventIsReloading_Parms
{
    BITFIELD ReturnValue;
};
struct AEPawn_eventPlayWaitingBlend_Parms
{
    FVector ForwardDirection;
    FVector FocusDirection;
    FLOAT YawDiff;
    FLOAT TweenTime;
};
struct AEPawn_eventRotateTowardsPosition_Parms
{
    FVector Target;
    INT TurnSpeed;
    BITFIELD ReturnValue;
};
struct AEPawn_eventRotateTowardsRotator_Parms
{
    FRotator Target;
    INT TurnSpeed;
    FLOAT Damping;
    BITFIELD ReturnValue;
};
struct AEPawn_eventBlendAnimOverCurrent_Parms
{
    FName Sequence;
    FLOAT BlendStrength;
    FName BoneName;
    FLOAT Rate;
    FLOAT TweenTime;
    INT Channel;
    BITFIELD bBackward;
};
struct AEPawn_eventPlayAnimNoMovement_Parms
{
    FName Sequence;
    FLOAT Rate;
    FLOAT TweenTime;
    BITFIELD bBackward;
    BITFIELD ReturnValue;
};
struct AEPawn_eventPlayBlend_Parms
{
    FSAnimBlend anims;
    FRotator lookDir;
    FVector moveDir;
    FLOAT minForwardRatio;
    FLOAT TweenTime;
    BITFIELD noloop;
};
struct AEPawn_eventStopTurning_Parms
{
};
struct AEPawn_eventLoopAnimOnly_Parms
{
    FName Sequence;
    FLOAT Rate;
    FLOAT TweenTime;
    BITFIELD bBackward;
    BITFIELD bContinueAtFrame;
};
struct AEPawn_eventCheckForTransition_Parms
{
    BYTE NewMoveFlags;
};
struct AEPawn_eventUpdateMoveFlagState_Parms
{
    BYTE NewMoveFlags;
    BITFIELD _bForceAware;
    BYTE ReturnValue;
};
struct AEPawn_eventUpdateAnimationSet_Parms
{
    BYTE NewMoveFlags;
    BITFIELD bForceUpdate;
};
struct AEPawn_eventICanBark_Parms
{
    BITFIELD ReturnValue;
};
struct AEPawn_eventGetRandomWaitAnim_Parms
{
    FName ReturnName;
};
struct AEPawn_eventSpecialTick_Parms
{
    FLOAT DeltaTime;
};
struct AEPawn_eventToggleHeadLight_Parms
{
    BITFIELD bTurnOn;
};
struct AEPawn_eventIsTransitionQueueEmpty_Parms
{
    BITFIELD ReturnValue;
};
class ECHELON_API AEPawn : public APawn
{
public:
    FVector m_HoistOffset;
    FVector m_HoistCrOffset;
    FVector m_HoistFeetOffset;
    FVector m_HoistFeetCrOffset;
    FVector m_HoistWaistOffset;
    FVector m_HoistWaistCrOffset;
    FVector m_NLOutTopAnimOffset;
    FVector m_POutTopAnimOffset;
    BITFIELD bDontBlink:1 GCC_PACK(4);
    BITFIELD m_topHanging:1;
    BITFIELD m_topClimbing:1;
    BITFIELD m_slipeRight:1;
    BYTE m_climbingUpperHand GCC_PACK(4);
    FVector m_geoTopPoint;
    FVector m_geoBottomPoint;
    FVector m_geoNormal;
    FVector m_prevPos;
    FRotator m_prevRot;
    FRotator m_inertRot;
    class AEchelonGameInfo* eGame;
    FRotator DesiredTurnTarget;
    BYTE BaseMoveFlags;
    class AESatchel* Satchel;
    TArrayNoInit<class UClass*> SatchelItems;
    TArrayNoInit<class UClass*> DynInitialInventory;
    FLOAT AccuracyDeviation;
    FLOAT PlayerFarDistance;
    FLOAT PlayerCloseDistance;
    FLOAT PlayerVeryCloseDistance;
    class AActor* DefendActor;
    FName DefendActorTag;
    FLOAT DefendDistance;
    FLOAT MinSearchTime;
    FLOAT TimeOfDeath;
    FLOAT DyingGaspRadius;
    FLOAT KnockedGaspRadius;
    FLOAT ElectrocutedGaspRadius;
    FLOAT IntuitionTime;
    FLOAT TimeBeforePlayerCanHide;
    FLOAT PlayerCanHideDistance;
    FLOAT Laziness_DefaultState;
    FLOAT Laziness_AwareState;
    FLOAT Laziness_AlertState;
    FLOAT DefuseMinePercentage;
    FLOAT RandomStopPercentage;
    FLOAT ExpiredTime;
    FLOAT FocusDistanceMin;
    FLOAT FocusDistanceMax;
    FLOAT MinTurnThreshold;
    BITFIELD bNoBlending:1 GCC_PACK(4);
    BITFIELD bNoAiming:1;
    BITFIELD bNoPersonality:1;
    BITFIELD bNoFocusPoints:1;
    BITFIELD bNoFocusSwitching:1;
    BITFIELD bNoTurningAnims:1;
    BITFIELD bCoverPeeking:1;
    BITFIELD bWasCarried:1;
    BITFIELD MayUseGunLight:1;
    BITFIELD ForceFlashLight:1;
    BITFIELD bSendAIEvents:1;
    BITFIELD bKeepNPCAlive:1;
    BITFIELD bDisableAI:1;
    BITFIELD bAvoidPlayer:1;
    BITFIELD bDontPlayDeathAnim:1;
    BITFIELD bDontPlayDeathSitAnim:1;
    BITFIELD bFollowTarget:1;
    BITFIELD bFallToDeath:1;
    BITFIELD bNoPickupInteraction:1;
    BITFIELD bNoUnconsciousRevival:1;
    BITFIELD bCanBeGrabbed:1;
    BITFIELD bSniper:1;
    BITFIELD bBodyDetected:1;
    BITFIELD bKilledByPlayer:1;
    BITFIELD bKnockedByPlayer:1;
    BITFIELD bDoesntBroadcast:1;
    BITFIELD bNoBlood:1;
    BITFIELD bJustHides:1;
    BITFIELD bNeverMarkAsChanged:1;
    BITFIELD bDontPlayDamageAnim:1;
    BITFIELD bDrunk:1;
    BITFIELD bDontSendNoise:1;
    BITFIELD bIsAttachedToAnimObject:1;
    BITFIELD bAlwaysFrag:1;
    BITFIELD bPitchBlack:1;
    BITFIELD bIgnorePitchBlack:1;
    BITFIELD bIsHotBlooded:1;
    BITFIELD bForceNoInteraction:1;
    BITFIELD bCanWhistle:1;
    BITFIELD bDontCheckChangedActor:1;
    BITFIELD bDyingDude:1;
    class AEFlashLight* FlashLight GCC_PACK(4);
    FName ADeathNeutral;
    FName DesignerDeathAnim;
    FLOAT PrevMoveBlendAlpha;
    FLOAT RandomizedAnimRate;
    FVector PreviousVelocity;
    FLOAT NextBlinkTime;
    class UClass* BasicPatternClass;
    class AEAlarmPanelObject* ForceAlarmPanelRun;
    FName DesignerWalkAnim;
    FName DesignerWaitAnim;
    FLOAT DesignerWalkSpeed;
    BITFIELD bUsePostAttackSetup:1 GCC_PACK(4);
    FName PostAttackPointTag GCC_PACK(4);
    FName PostAttackFocusTag;
    BYTE PostAttackGoalType;
    FName PostAttackAnim;
    FLOAT fHideTime;
    BYTE InitialAIState;
    BYTE InitialGoalType;
    FName InitialGoalTag;
    BITFIELD InitialGoalFlag:1 GCC_PACK(4);
    FLOAT InitialGoalValue GCC_PACK(4);
    BYTE InitialGoalMoveFlags;
    BYTE InitialGoalWaitFlags;
    FVector InitialGoalLocation;
    FVector InitialGoalFocus;
    class USound* InitialGoalSound;
    FName InitialGoalAnim;
    BITFIELD bDebugWeapon:1 GCC_PACK(4);
    class UClass* PatternClass GCC_PACK(4);
    FLOAT m_VisibilityConeAngle;
    FLOAT m_VisibilityMaxDistance;
    FLOAT m_VisibilityAngleVertical;
    FLOAT m_MaxPeripheralVisionDistance;
    BITFIELD bUseTransitionTable:1 GCC_PACK(4);
    BYTE IgnoreGroupNoiseType GCC_PACK(4);
    BYTE IgnoreNPCNoiseType;
    BYTE IgnoreAllNoiseType;
    FLOAT VisTable_Alert[5];
    FLOAT VisTable_Investigate[5];
    FLOAT VisTable_Surprised[5];
    FLOAT VisTable_Peripheral[5];
    FLOAT VisAverageArray[10];
    INT CurrentVisIndex;
    FLOAT PrsoUpdate_DefaultMin;
    FLOAT PrsoUpdate_DefaultMax;
    FLOAT PrsoUpdate_AwareMin;
    FLOAT PrsoUpdate_AwareMax;
    FLOAT PrsoUpdate_AlertMin;
    FLOAT PrsoUpdate_AlertMax;
    FLOAT SmellRadius;
    INT CurrentYawDiff;
    BITFIELD bYawDiffSet:1 GCC_PACK(4);
    BITFIELD bSleeping:1;
    class USound* GearSoundFall GCC_PACK(4);
    BITFIELD PlayGearSound:1 GCC_PACK(4);
    class UClass* LastDamageType GCC_PACK(4);
    INT TmpDamage;
    class USound* Sounds_Move;
    class USound* Sounds_Barks;
    class USound* Sounds_AttackMove;
    class USound* Sounds_AttackGetDown;
    class USound* Sounds_AttackStop;
    BYTE Bark_Type;
    class AEInventory* FullInventory;
    class AEGameplayObject* HandItem;
    class AEInventoryItem* PendingItem;
    class AEWeapon* CurrentWeapon;
    class AEGameplayObject* Chair;
    class AActor* ForceObjectOnGrab;
    INT WeaponStance;
    INT WeaponHandedness;
    BITFIELD bIsAlert:1 GCC_PACK(4);
    BITFIELD bSneaking:1;
    FName EyeBoneName GCC_PACK(4);
    FName UpperBodyBoneName;
    class UStaticMesh* HatMesh;
    BITFIELD bSmokingDude:1 GCC_PACK(4);
    BITFIELD bCellDude:1;
    class AEGameplayObject* Hat GCC_PACK(4);
    class AEGameplayObject* Cigaret;
    class AEGameplayObject* Cellular;
    FVector TargetLocation;
    INT YawTurnSpeed;
    INT TurnSpeed_Default;
    INT TurnSpeed_Aware;
    INT TurnSpeed_Alert;
    FLOAT MaxAimAngle_Default;
    FLOAT MaxAimAngle_Aware;
    FLOAT MaxAimAngle_Alert;
    FSAnimBlend ABlendMovement;
    FSAnimBlend ABlendFence;
    FSAnimBlend ABlendGrab;
    FSAnimBlend ABlendSniping;
    FSAnimBlend ABlendSnipingCrouch;
    FName AStandUpR;
    FName AStandUpL;
    FName AStandUpF;
    FName ASitDownR;
    FName ASitDownL;
    FName ASitDownF;
    FName AWaitSitT;
    FName AWaitSitS;
    FName AWait;
    FName AWaitIn;
    FName AWaitOut;
    FName AWaitLeft;
    FName AWaitRight;
    FName AWaitCrouch;
    FName AWaitCrouchIn;
    FName AWalk;
    FName AWalkCrouch;
    FName AJogg;
    FName AJoggCrouch;
    FName ATurnRight;
    FName ATurnRightCrouch;
    FName ATurnBRight;
    FName ATurnBLeft;
    FName ATurnLt;
    FName ATurnRt;
    FName AJumpForwardR;
    FName AJumpForwardL;
    FName AJumpStart;
    FName AFall;
    FName AFallQuiet;
    FName AFallFree;
    FName ALandHi;
    FName ALandLow;
    FName ALandQuiet;
    FName ALandAttack;
    FName APeekLeftBegin;
    FName APeekLeft;
    FName APeekRightBegin;
    FName APeekRight;
    FName ADamageHeadShotForward;
    FName ADamageHeadShotBack;
    FName ADamageChestForward;
    FName ADamageChestBack;
    FName ADamageChestLeft;
    FName ADamageChestRight;
    FName ADamageArmLeft;
    FName ADamageArmRight;
    FName ADamageLegLeft;
    FName ADamageLegRight;
    FName AHurtHandLeft;
    FName AHurtHandRight;
    FName AHurtFootLeft;
    FName AHurtFootRight;
    FName AStunBegin;
    FName AStunned;
    FName AStunEnd;
    FName ACough;
    FName ADeathForward;
    FName ADeathBack;
    FName ADeathLeft;
    FName ADeathRight;
    FName ADeathDown;
    FName ADeathLadder;
    FName ADeathForwardNtrl;
    FName ADeathBackNtrl;
    FName ADeathLeftNtrl;
    FName ADeathRightNtrl;
    FName ASpasm1;
    FName ASpasm2;
    FName ASpasm3;
    FName ASpasm4;
    FName AFragForward;
    FName AFragBack;
    FName AFragLeft;
    FName AFragRight;
    FName ASearchBody;
    FName ASprayFire;
    FName APitchBlackF;
    FName APitchBlackL;
    FName APitchBlackR;
    FName APlaceWallMineBegin;
    FName APlaceWallMine;
    FName APlaceWallMineEnd;
    FName AReload;
    FName AReloadCrouch;
    FName ADoorOpenRt;
    FName ADoorOpenLt;
    FName ADoorTryOpenRt;
    FName ADoorTryOpenLt;
    FName ARetinalScanBegin;
    FName ARetinalScan;
    FName ARetinalScanEnd;
    FName ANLUpRight;
    FName ANLUpLeft;
    FName ANLOutBottomRight;
    FName ANLOutBottomLeft;
    FName ANLTopUpLeft;
    FName ANLTopUpRight;
    FName ANLInTop;
    FName ANLTopDownRight;
    FName ANLInBottom;
    FName ANLWaitLeft;
    FName ANLWaitRight;
    FName ANLWaitTop;
    FName ANLSlideDown;
    FName AFenceClimbWait;
    FName ARappelWait;
    FName ASplitWait;
    FName AGrabStart;
    FName AGrabWait;
    FName AGrabSqeeze;
    FName AGrabRetinalStart;
    FName AGrabRetinalWait;
    FName AGrabRetinalEnd;
    FName AGrabRelease;
    FName AGrabReleaseKnock;
    FName ARecover;
    FName AReviveBody;
    FName ACheckDeadBody;
    FName AThrowGrenade;
    FName AAlarmInteract;
    FName ALightSwitchInteract;
    FName ALookForward;
    FName ALookLeft;
    FName ALookRight;
    FName ALookDownwards;
    FName ALookUpwards;
    FName ALookBackwards;
    FName ARadioBegin;
    FName ARadio;
    FName ARadioEnd;
    TArrayNoInit<FSTransitionInfo> TransitionQueue;
    BITFIELD bInTransition:1 GCC_PACK(4);
    FColor RelevantAmbientColor GCC_PACK(4);
    TArrayNoInit<class AActor*> RelevantLights;
    BITFIELD bHostile:1 GCC_PACK(4);
    TArrayNoInit<FSampleBrightness4Bones> PawnSampleBrightness GCC_PACK(4);
    INT InitialHealth;
    FLOAT DamageLookupTable[15];
    FLOAT IdleTime;
    class AEmitter* BreathEmitter;
    FLOAT RollSpeed;
    BITFIELD wasRolled:1 GCC_PACK(4);
    BITFIELD m_bLipsynchPlaying:1;
    INT m_hLipSynchData GCC_PACK(4);
    FLOAT AmbientDamagePerSeconds;
    FLOAT AmbientDamageFromFire;
    FLOAT ResidualAmbientDamage;
    TArrayNoInit<class AEPawnFire*> BodyFlames;
    INT rightFootDirtyness;
    INT leftFootDirtyness;
    INT currentDirtynessFactor;
    DECLARE_FUNCTION(execSetupChairDeath);
    DECLARE_FUNCTION(execRotateAroundZ);
    DECLARE_FUNCTION(execEyeBlink);
    DECLARE_FUNCTION(execStartLipSynch);
    DECLARE_FUNCTION(execRollPawn);
    DECLARE_FUNCTION(execRecoil);
    DECLARE_FUNCTION(execAimAt);
    DECLARE_FUNCTION(execLookAt);
    DECLARE_FUNCTION(execArePointsConnected);
    DECLARE_FUNCTION(execGetAnchor);
    DECLARE_FUNCTION(execGetAnchorForLocation);
    DECLARE_FUNCTION(execChooseChairDeathAnimation);
    DECLARE_FUNCTION(execChooseDeathAnimation);
    DECLARE_FUNCTION(execIsPawnTalking);
    DECLARE_FUNCTION(execBlendAnims);
    DECLARE_FUNCTION(execIsSequenceInCurrentAnim);
    DECLARE_FUNCTION(execForceAnimParams);
    DECLARE_FUNCTION(execExitRootMotion);
    DECLARE_FUNCTION(execReachedDestination);
    void eventAI_AttachNotify()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_AI_AttachNotify),NULL);
    }
    void eventTransition_ItemSelect(class AEInventoryItem* NewItem)
    {
        AEPawn_eventTransition_ItemSelect_Parms Parms;
        Parms.NewItem=NewItem;
        ProcessEvent(FindFunctionChecked(ECHELON_Transition_ItemSelect),&Parms);
    }
    void eventTransition_WeaponAway()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_Transition_WeaponAway),NULL);
    }
    void eventTransition_WeaponSelect()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_Transition_WeaponSelect),NULL);
    }
    FLOAT eventGetMoveSpeed(BYTE MoveFlags)
    {
        AEPawn_eventGetMoveSpeed_Parms Parms;
        Parms.ReturnValue=0;
        Parms.MoveFlags=MoveFlags;
        ProcessEvent(FindFunctionChecked(ECHELON_GetMoveSpeed),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventIsReloading()
    {
        AEPawn_eventIsReloading_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_IsReloading),&Parms);
        return Parms.ReturnValue;
    }
    void eventPlayWaitingBlend(FVector ForwardDirection, FVector FocusDirection, FLOAT YawDiff, FLOAT TweenTime)
    {
        AEPawn_eventPlayWaitingBlend_Parms Parms;
        Parms.ForwardDirection=ForwardDirection;
        Parms.FocusDirection=FocusDirection;
        Parms.YawDiff=YawDiff;
        Parms.TweenTime=TweenTime;
        ProcessEvent(FindFunctionChecked(ECHELON_PlayWaitingBlend),&Parms);
    }
    BITFIELD eventRotateTowardsPosition(FVector Target, INT TurnSpeed)
    {
        AEPawn_eventRotateTowardsPosition_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Target=Target;
        Parms.TurnSpeed=TurnSpeed;
        ProcessEvent(FindFunctionChecked(ECHELON_RotateTowardsPosition),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventRotateTowardsRotator(FRotator Target, INT TurnSpeed, FLOAT Damping)
    {
        AEPawn_eventRotateTowardsRotator_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Target=Target;
        Parms.TurnSpeed=TurnSpeed;
        Parms.Damping=Damping;
        ProcessEvent(FindFunctionChecked(ECHELON_RotateTowardsRotator),&Parms);
        return Parms.ReturnValue;
    }
    void eventBlendAnimOverCurrent(FName Sequence, FLOAT BlendStrength, FName BoneName, FLOAT Rate, FLOAT TweenTime, INT Channel, BITFIELD bBackward)
    {
        AEPawn_eventBlendAnimOverCurrent_Parms Parms;
        Parms.Sequence=Sequence;
        Parms.BlendStrength=BlendStrength;
        Parms.BoneName=BoneName;
        Parms.Rate=Rate;
        Parms.TweenTime=TweenTime;
        Parms.Channel=Channel;
        Parms.bBackward=bBackward;
        ProcessEvent(FindFunctionChecked(ECHELON_BlendAnimOverCurrent),&Parms);
    }
    BITFIELD eventPlayAnimNoMovement(FName Sequence, FLOAT Rate, FLOAT TweenTime, BITFIELD bBackward)
    {
        AEPawn_eventPlayAnimNoMovement_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sequence=Sequence;
        Parms.Rate=Rate;
        Parms.TweenTime=TweenTime;
        Parms.bBackward=bBackward;
        ProcessEvent(FindFunctionChecked(ECHELON_PlayAnimNoMovement),&Parms);
        return Parms.ReturnValue;
    }
    void eventPlayBlend(FSAnimBlend anims, FRotator lookDir, FVector moveDir, FLOAT minForwardRatio, FLOAT TweenTime, BITFIELD noloop)
    {
        AEPawn_eventPlayBlend_Parms Parms;
        Parms.anims=anims;
        Parms.lookDir=lookDir;
        Parms.moveDir=moveDir;
        Parms.minForwardRatio=minForwardRatio;
        Parms.TweenTime=TweenTime;
        Parms.noloop=noloop;
        ProcessEvent(FindFunctionChecked(ECHELON_PlayBlend),&Parms);
    }
    void eventStopTurning()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_StopTurning),NULL);
    }
    void eventLoopAnimOnly(FName Sequence, FLOAT Rate, FLOAT TweenTime, BITFIELD bBackward, BITFIELD bContinueAtFrame)
    {
        AEPawn_eventLoopAnimOnly_Parms Parms;
        Parms.Sequence=Sequence;
        Parms.Rate=Rate;
        Parms.TweenTime=TweenTime;
        Parms.bBackward=bBackward;
        Parms.bContinueAtFrame=bContinueAtFrame;
        ProcessEvent(FindFunctionChecked(ECHELON_LoopAnimOnly),&Parms);
    }
    void eventCheckForTransition(BYTE NewMoveFlags)
    {
        AEPawn_eventCheckForTransition_Parms Parms;
        Parms.NewMoveFlags=NewMoveFlags;
        ProcessEvent(FindFunctionChecked(ECHELON_CheckForTransition),&Parms);
    }
    BYTE eventUpdateMoveFlagState(BYTE NewMoveFlags, BITFIELD _bForceAware)
    {
        AEPawn_eventUpdateMoveFlagState_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewMoveFlags=NewMoveFlags;
        Parms._bForceAware=_bForceAware;
        ProcessEvent(FindFunctionChecked(ECHELON_UpdateMoveFlagState),&Parms);
        return Parms.ReturnValue;
    }
    void eventUpdateAnimationSet(BYTE NewMoveFlags, BITFIELD bForceUpdate)
    {
        AEPawn_eventUpdateAnimationSet_Parms Parms;
        Parms.NewMoveFlags=NewMoveFlags;
        Parms.bForceUpdate=bForceUpdate;
        ProcessEvent(FindFunctionChecked(ECHELON_UpdateAnimationSet),&Parms);
    }
    BITFIELD eventICanBark()
    {
        AEPawn_eventICanBark_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_ICanBark),&Parms);
        return Parms.ReturnValue;
    }
    void eventGetRandomWaitAnim(FName& ReturnName)
    {
        AEPawn_eventGetRandomWaitAnim_Parms Parms;
        Parms.ReturnName=ReturnName;
        ProcessEvent(FindFunctionChecked(ECHELON_GetRandomWaitAnim),&Parms);
        ReturnName=Parms.ReturnName;
    }
    void eventSpecialTick(FLOAT DeltaTime)
    {
        AEPawn_eventSpecialTick_Parms Parms;
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ECHELON_SpecialTick),&Parms);
    }
    void eventToggleHeadLight(BITFIELD bTurnOn)
    {
        AEPawn_eventToggleHeadLight_Parms Parms;
        Parms.bTurnOn=bTurnOn;
        ProcessEvent(FindFunctionChecked(ECHELON_ToggleHeadLight),&Parms);
    }
    BITFIELD eventIsTransitionQueueEmpty()
    {
        AEPawn_eventIsTransitionQueueEmpty_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_IsTransitionQueueEmpty),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AEPawn,APawn,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEPawn)
};


class ECHELON_API AEDog : public AEPawn
{
public:
    FName MasterTag;
    FLOAT BoneAlpha;
    FLOAT BoneFadeIn;
    FLOAT BoneFadeOut;
    FRotator LastBodyRotation;
    class USound* DogBark;
    class USound* DogAttack;
    class USound* PlayBreath;
    class USound* StopBreath;
    class USound* DogHit;
    DECLARE_FUNCTION(execResetMotionBones);
    DECLARE_FUNCTION(execSetMotionBones);
    DECLARE_CLASS(AEDog,AEPawn,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEDog)
};


class ECHELON_API AEAIPawn : public AEPawn
{
public:
    class AEAIController* AI;
    class USound* GearSoundWalk;
    class USound* GearSoundRun;
    class AEGroupAI* Group;
    BITFIELD bDisableAIforSound:1 GCC_PACK(4);
    DECLARE_CLASS(AEAIPawn,AEPawn,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEAIPawn)
};

enum EDoorSide
{
    ESide_Front             =0,
    ESide_Back              =1,
    ESide_MAX               =2,
};

struct AEDoorMover_eventStayOpen_Parms
{
    class AActor* Other;
    BITFIELD pawnOpen;
    BITFIELD playerOpen;
};
struct AEDoorMover_eventGetDoorSide_Parms
{
    BYTE ReturnValue;
};
struct AEDoorMover_eventGetActorSide_Parms
{
    class AActor* A;
    BYTE ReturnValue;
};
class ECHELON_API AEDoorMover : public AMover
{
public:
    class AEAlarm* Alarm;
    BITFIELD Usable:1 GCC_PACK(4);
    BITFIELD Locked:1;
    BITFIELD bInUse:1;
    BITFIELD bTempNoCollide:1;
    class AController* UsingController GCC_PACK(4);
    class AEDoorOpener* FrontOpener;
    class AEDoorOpener* BackOpener;
    class AEDoorMover* LinkedDoor;
    FLOAT DoorWidth;
    FLOAT DoorRadius;
    FLOAT DoorPathExtraCost;
    BITFIELD bNoPlayerStayOpen:1 GCC_PACK(4);
    class AEGroupAI* OpenGroupAi GCC_PACK(4);
    FName OpenJumpLabel;
    BITFIELD bOpenTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bOpenAlreadyTriggered:1;
    class AEGroupAI* CloseGroupAi GCC_PACK(4);
    FName CloseJumpLabel;
    BITFIELD bCloseTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bCloseAlreadyTriggered:1;
    BITFIELD bPropagatesSound:1;
    DECLARE_FUNCTION(execPropagateSound);
    void eventStayOpen(class AActor* Other, BITFIELD pawnOpen, BITFIELD playerOpen)
    {
        AEDoorMover_eventStayOpen_Parms Parms;
        Parms.Other=Other;
        Parms.pawnOpen=pawnOpen;
        Parms.playerOpen=playerOpen;
        ProcessEvent(FindFunctionChecked(ECHELON_StayOpen),&Parms);
    }
    BYTE eventGetDoorSide()
    {
        AEDoorMover_eventGetDoorSide_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetDoorSide),&Parms);
        return Parms.ReturnValue;
    }
    BYTE eventGetActorSide(class AActor* A)
    {
        AEDoorMover_eventGetActorSide_Parms Parms;
        Parms.ReturnValue=0;
        Parms.A=A;
        ProcessEvent(FindFunctionChecked(ECHELON_GetActorSide),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AEDoorMover,AMover,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEDoorMover)
};


class ECHELON_API AESoundVolume : public APhysicsVolume
{
public:
    TArrayNoInit<class USound*> m_EntrySound;
    TArrayNoInit<class USound*> m_ExitSound;
    BYTE m_eSoundSlot;
    BITFIELD NPCTrigger:1 GCC_PACK(4);
    DECLARE_CLASS(AESoundVolume,APhysicsVolume,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AESoundVolume)
};

enum EProximity
{
    PlayerProximity         =0,
    NPCProximity            =1,
    PawnProximity           =2,
};

class ECHELON_API AEVolume : public APhysicsVolume
{
public:
    BYTE ProximityType;
    class AActor* PlayerPawn;
    TArrayNoInit<class APathNode*> StrategicPoints;
    TArrayNoInit<class AActor*> GrenadePoints;
    FName GroupTag;
    FName JumpLabel;
    class AEGameplayObject* LightSwitch;
    class AEPawn* PawnTrigger;
    FName ForceFocusTag;
    FLOAT TriggerTime;
    BITFIELD bTriggerOnlyOnce:1 GCC_PACK(4);
    BITFIELD bIsAnEventtrigger:1;
    BITFIELD bGrenadeAllowed:1;
    BITFIELD bUseGrenadePoints:1;
    BITFIELD bAffectLastZone:1;
    BITFIELD bForceJump:1;
    BITFIELD bDontUseIfPlayerSeen:1;
    BITFIELD bFlashlightVolume:1;
    BITFIELD bSavegame:1;
    BITFIELD bExplosiveVolume:1;
    BITFIELD bDetectCarriedPawn:1;
    BITFIELD bAlreadyVisited:1;
    BITFIELD bEnableCheckpoints:1;
    BYTE VolumeSize GCC_PACK(4);
    BITFIELD bColdZone:1 GCC_PACK(4);
    BITFIELD bLiquid:1;
    BITFIELD bDyingZone:1;
    INT iDirtynessFactor GCC_PACK(4);
    DECLARE_CLASS(AEVolume,APhysicsVolume,0|CLASS_Config,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEVolume)
};

enum EControllerScheme
{
    CS_Default              =0,
    CS_Pandora              =1,
    CS_PlayStation          =2,
    CS_MAX                  =3,
};
struct ECHELON_API FCameraInfo
{
    class AActor* Owner;
    INT iPriority;
    FLOAT FOV;
    INT RendMap;
};

#define UCONST_MAX_REGULAR_MAP 13

struct AEPlayerController_eventAttachObject_Parms
{
    class AEGameplayObject* Obj;
    FName AttachTag;
};
struct AEPlayerController_eventGoggleDown_Parms
{
};
struct AEPlayerController_eventGoggleUp_Parms
{
};
struct AEPlayerController_eventNotifyAction_Parms
{
};
struct AEPlayerController_eventSetGoalStatus_Parms
{
    FName ID;
    BITFIELD Status;
};
struct AEPlayerController_eventAddGoal_Parms
{
    FName NameID;
    FString GoalString;
    FString GoalSection;
    FString GoalKey;
    FString GoalPackage;
    INT iGoalPriority;
    FString GoalStringShort;
    FString ShortSection;
    FString ShortKey;
    FString ShortPackage;
    BITFIELD Completed;
};
struct AEPlayerController_eventAddReconText_Parms
{
    FString ObjName;
    FString MemoryTextSection;
    FString From;
    FString To;
    FString SentStringID;
    FString SubjectStringID;
    FString MemoryTextID;
    BITFIELD bCompleted;
};
struct AEPlayerController_eventAddRecon_Parms
{
    class UClass* _ClassName;
    BITFIELD Completed;
};
struct AEPlayerController_eventAddNote_Parms
{
    FString NoteString;
    FString Section;
    FString Key;
    FString Package;
    BITFIELD InsertAtEnd;
};
struct AEPlayerController_eventCloseTrainingData_Parms
{
};
struct AEPlayerController_eventPole_Parms
{
    FVector locationEnd;
    FRotator orientationEnd;
    INT PLType;
    BITFIELD ReturnValue;
};
struct AEPlayerController_eventFenceTop_Parms
{
    FVector locationEnd;
    FRotator orientationEnd;
    BITFIELD ReturnValue;
};
struct AEPlayerController_eventZipLine_Parms
{
    FVector locationEnd;
    FRotator orientationEnd;
    INT ZLType;
    BITFIELD ReturnValue;
};
struct AEPlayerController_eventTopPipe_Parms
{
    FVector locationEnd;
    FRotator orientationEnd;
    BITFIELD ReturnValue;
};
struct AEPlayerController_eventPipe_Parms
{
    FVector locationEnd;
    FRotator orientationEnd;
    BITFIELD ReturnValue;
};
struct AEPlayerController_eventTopNarrowLadder_Parms
{
    FVector locationEnd;
    FRotator orientationEnd;
    BITFIELD ReturnValue;
};
struct AEPlayerController_eventNarrowLadder_Parms
{
    FVector locationEnd;
    FRotator orientationEnd;
    INT NLType;
    BITFIELD ReturnValue;
};
struct AEPlayerController_eventHandOverHand_Parms
{
    FVector locationEnd;
    FRotator orientationEnd;
    BITFIELD ReturnValue;
};
struct AEPlayerController_eventLedge_Parms
{
    FVector locationEnd;
    FRotator orientationEnd;
    INT LType;
    BITFIELD ReturnValue;
};
struct AEPlayerController_eventWaistLedge_Parms
{
    FVector locationEnd;
    FRotator orientationEnd;
    BITFIELD ReturnValue;
};
struct AEPlayerController_eventFeetLedge_Parms
{
    FVector locationEnd;
    FRotator orientationEnd;
    BITFIELD ReturnValue;
};
struct AEPlayerController_eventNoGE_Parms
{
};
struct AEPlayerController_eventInitialSave_Parms
{
};
struct AEPlayerController_eventStartInitialPattern_Parms
{
};
struct AEPlayerController_eventAddMultiMapInformation_Parms
{
};
struct AEPlayerController_eventReduceCameraSpeed_Parms
{
    FLOAT turnMul;
};
struct AEPlayerController_eventGetPause_Parms
{
    BITFIELD ReturnValue;
};
class ECHELON_API AEPlayerController : public APlayerController
{
public:
    class AEPawn* EPawn;
    class AEchelonGameInfo* eGame;
    BITFIELD bInTransition:1 GCC_PACK(4);
    BITFIELD bVisibilityFromCylinder:1;
    class UESList* ProfileList GCC_PACK(4);
    FStringNoInit CurrentGoal;
    FStringNoInit CurrentGoalSection;
    FStringNoInit CurrentGoalKey;
    FStringNoInit CurrentGoalPackage;
    BITFIELD bNewGoal:1 GCC_PACK(4);
    BITFIELD bNewNote:1;
    BITFIELD bShouldTurnFast:1;
    BITFIELD bNewRecon:1;
    class UESList* NoteBook GCC_PACK(4);
    class UESList* GoalList;
    class UESList* ReconList;
    TArrayNoInit<class UETrainingData*> TrainingList;
    class AEWeapon* MainGun;
    class AEWeapon* HandGun;
    class AEWeapon* ActiveGun;
    FLOAT AccuracyModifier;
    class AEGoggle* Goggle;
    BITFIELD bInGunTransition:1 GCC_PACK(4);
    BITFIELD bDrawWeapon:1;
    BITFIELD bNoThermalAvailable:1;
    class UEGameInteraction* egi GCC_PACK(4);
    BYTE bResetCamera;
    BYTE bJump;
    BYTE bDPadUp;
    BYTE bDPadDown;
    BYTE bDPadLeft;
    BYTE bDPadRight;
    BITFIELD bIncSpeedPressed:1 GCC_PACK(4);
    BITFIELD bDecSpeedPressed:1;
    BITFIELD bMustZoomIn:1;
    BITFIELD bMustZoomOut:1;
    BITFIELD bInteraction:1;
    class AERopeActor* RapelRope GCC_PACK(4);
    class AEPawn* m_AttackTarget;
    class AActor* m_targetObject;
    FVector m_WallHitNormal;
    FVector m_EnterDir;
    INT m_NbJump;
    INT RapelRopeType;
    FLOAT prevWalkingRatio;
    BITFIELD m_GrabTargeting:1 GCC_PACK(4);
    BITFIELD m_BTWSide:1;
    BITFIELD m_didCrossFence:1;
    BITFIELD m_SMInTrans:1;
    BITFIELD m_holdingBreath:1;
    BITFIELD m_rollScope:1;
    BITFIELD m_rollGetUp:1;
    BITFIELD m_rollCrouch:1;
    BITFIELD bThrowTargeting:1;
    BITFIELD bHideSam:1;
    BITFIELD bNoLedgePush:1;
    BITFIELD didGTicksPlayerInfo:1;
    BITFIELD didGTicksSavegame:1;
    BITFIELD didGTicksStartPattern:1;
    FName SpecialWaitAnim GCC_PACK(4);
    FName JumpLabel;
    FName JumpLabelPrivate;
    BITFIELD bDebugNavPoints:1 GCC_PACK(4);
    BITFIELD bDebugInput:1;
    BITFIELD bDebugStealth:1;
    BITFIELD bInvincible:1;
    BITFIELD bFullAmmo:1;
    BITFIELD bVideoMode:1;
    BITFIELD bUnlockAllLevels:1;
    FLOAT m_LPStartTime GCC_PACK(4);
    FLOAT m_LastLedgeFenceTime;
    FLOAT m_LastHOHTime;
    FLOAT m_LastNLPipeTime;
    FLOAT m_LastZipLineTime;
    FLOAT m_LPSlideStartTime;
    FLOAT m_RunStartTime;
    FLOAT m_SMTemp;
    FLOAT m_HoistDeltaTime;
    FLOAT m_HoistingDelta;
    FName m_HoistSt;
    FName m_HoistCr;
    FVector m_HoistStOffset;
    FVector m_HoistCrOffset;
    FVector m_ThrowSpeed;
    FVector m_ThrowMinSpeed;
    FVector m_ThrowMaxSpeed;
    FLOAT m_ThrowVarSpeed;
    BITFIELD m_LedgeTurnRight:1 GCC_PACK(4);
    BITFIELD m_GECanGoLeft:1;
    BITFIELD m_GECanGoRight:1;
    BITFIELD m_GECanGoForward:1;
    BITFIELD m_GECanGoBackward:1;
    BITFIELD m_GEgoingUp:1;
    BITFIELD m_GECanSlide:1;
    BITFIELD m_GECanGetOut:1;
    BITFIELD m_GECanHoist:1;
    BITFIELD m_LedgeElongated:1;
    BITFIELD m_PipeInFeet:1;
    FVector m_FallGrabDir GCC_PACK(4);
    FLOAT m_Elongation;
    INT m_PType;
    FVector m_HoistAnimOffset;
    FName m_HoistingAnim;
    class AEVolume* CurrentVolume;
    class AEPattern* CurrentPattern;
    INT m_curWalkSpeed;
    FLOAT m_speedRun;
    FLOAT m_speedRunCr;
    FLOAT m_speedWalk;
    FLOAT m_speedWalkCr;
    FLOAT m_speedWalkFP;
    FLOAT m_speedWalkFPCr;
    FLOAT m_speedWalkSniping;
    FLOAT m_speedBTWCr;
    FLOAT m_speedBTW;
    FLOAT m_speedFence;
    FLOAT m_speedGrab;
    FLOAT m_speedGrabFP;
    FLOAT m_speedCarry;
    FLOAT m_turnMul;
    FLOAT m_towardAngle;
    FLOAT m_FakeMouseX;
    FLOAT m_FakeMouseY;
    BITFIELD m_FakeMouseClicked:1 GCC_PACK(4);
    class AEPlayerCam* m_camera GCC_PACK(4);
    BITFIELD bLockedCamera:1 GCC_PACK(4);
    BITFIELD m_useTarget:1;
    FLOAT m_lastRotationTick GCC_PACK(4);
    FLOAT m_lastLocationTick;
    FVector m_targetLocation;
    class AActor* m_targetActor;
    FRotator hoistTargetRot;
    BITFIELD bInCinematic:1 GCC_PACK(4);
    FRotator backupRotation GCC_PACK(4);
    TArrayNoInit<FCameraInfo> CamControllers;
    INT iRenderMask;
    FVector SmellArray[20];
    INT CurrentSmellIndex;
    FLOAT LastSmellUpdate;
    class AEDynamicNavPoint* VisualSmell[20];
    FVector LastVisibleLocation;
    BYTE LastFenceType;
    TArrayNoInit<FHitInfo> LatestHits;
    BITFIELD bShowController:1 GCC_PACK(4);
    FLOAT ElapsedTime GCC_PACK(4);
    BITFIELD bIsPlaying:1 GCC_PACK(4);
    INT iGameOverMsg GCC_PACK(4);
    INT iCheatMask;
    BITFIELD bQuickLoad:1 GCC_PACK(4);
    BITFIELD bCheckpoint:1;
    FStringNoInit CheckpointLevel GCC_PACK(4);
    BYTE ControllerScheme;
    DECLARE_FUNCTION(execCalculatePipeDestination);
    DECLARE_FUNCTION(execCanGetOutTopPipe);
    DECLARE_FUNCTION(execCalculateLadderDestination);
    DECLARE_FUNCTION(execCanGetOutTopLadder);
    DECLARE_FUNCTION(execCheckBTWSide);
    DECLARE_FUNCTION(execCheckBTWEyes);
    DECLARE_FUNCTION(execCheckBTWRelease);
    DECLARE_FUNCTION(execCheckForCrouchBTW);
    DECLARE_FUNCTION(execCheckWallJump);
    DECLARE_FUNCTION(execSetGroundSpeed);
    DECLARE_FUNCTION(execSetWalkingCameraMode);
    DECLARE_FUNCTION(execShouldReleaseNPC);
    DECLARE_FUNCTION(execCheckBTW);
    DECLARE_FUNCTION(execTryHoisting);
    DECLARE_FUNCTION(execCheckFallGrab);
    DECLARE_FUNCTION(execListItemsNative);
    DECLARE_FUNCTION(execTCheck);
    DECLARE_FUNCTION(execGetPushingDir);
    DECLARE_FUNCTION(execGetPushingForce);
    DECLARE_FUNCTION(execIsPushingTowardBack);
    DECLARE_FUNCTION(execIsPushingTowardFront);
    DECLARE_FUNCTION(execIsPushingToward);
    DECLARE_FUNCTION(execIsPushingFull);
    DECLARE_FUNCTION(execIsPushingGentle);
    DECLARE_FUNCTION(execIsPushing);
    DECLARE_FUNCTION(execArrivalTimeApprox);
    DECLARE_FUNCTION(execKillPawnSpeed);
    DECLARE_FUNCTION(execMirrorCameraLocalTarget);
    DECLARE_FUNCTION(execFlipCameraLocalTarget);
    DECLARE_FUNCTION(execPopCamera);
    DECLARE_FUNCTION(execSetCameraMode);
    DECLARE_FUNCTION(execSetCameraFOV);
    void eventAttachObject(class AEGameplayObject* Obj, FName AttachTag)
    {
        AEPlayerController_eventAttachObject_Parms Parms;
        Parms.Obj=Obj;
        Parms.AttachTag=AttachTag;
        ProcessEvent(FindFunctionChecked(ECHELON_AttachObject),&Parms);
    }
    void eventGoggleDown()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_GoggleDown),NULL);
    }
    void eventGoggleUp()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_GoggleUp),NULL);
    }
    void eventNotifyAction()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_NotifyAction),NULL);
    }
    void eventSetGoalStatus(FName ID, BITFIELD Status)
    {
        AEPlayerController_eventSetGoalStatus_Parms Parms;
        Parms.ID=ID;
        Parms.Status=Status;
        ProcessEvent(FindFunctionChecked(ECHELON_SetGoalStatus),&Parms);
    }
    void eventAddGoal(FName NameID, const FString& GoalString, const FString& GoalSection, const FString& GoalKey, const FString& GoalPackage, INT iGoalPriority, const FString& GoalStringShort, const FString& ShortSection, const FString& ShortKey, const FString& ShortPackage, BITFIELD Completed)
    {
        AEPlayerController_eventAddGoal_Parms Parms;
        Parms.NameID=NameID;
        Parms.GoalString=GoalString;
        Parms.GoalSection=GoalSection;
        Parms.GoalKey=GoalKey;
        Parms.GoalPackage=GoalPackage;
        Parms.iGoalPriority=iGoalPriority;
        Parms.GoalStringShort=GoalStringShort;
        Parms.ShortSection=ShortSection;
        Parms.ShortKey=ShortKey;
        Parms.ShortPackage=ShortPackage;
        Parms.Completed=Completed;
        ProcessEvent(FindFunctionChecked(ECHELON_AddGoal),&Parms);
    }
    void eventAddReconText(const FString& ObjName, const FString& MemoryTextSection, const FString& From, const FString& To, const FString& SentStringID, const FString& SubjectStringID, const FString& MemoryTextID, BITFIELD bCompleted)
    {
        AEPlayerController_eventAddReconText_Parms Parms;
        Parms.ObjName=ObjName;
        Parms.MemoryTextSection=MemoryTextSection;
        Parms.From=From;
        Parms.To=To;
        Parms.SentStringID=SentStringID;
        Parms.SubjectStringID=SubjectStringID;
        Parms.MemoryTextID=MemoryTextID;
        Parms.bCompleted=bCompleted;
        ProcessEvent(FindFunctionChecked(ECHELON_AddReconText),&Parms);
    }
    void eventAddRecon(class UClass* _ClassName, BITFIELD Completed)
    {
        AEPlayerController_eventAddRecon_Parms Parms;
        Parms._ClassName=_ClassName;
        Parms.Completed=Completed;
        ProcessEvent(FindFunctionChecked(ECHELON_AddRecon),&Parms);
    }
    void eventAddNote(const FString& NoteString, const FString& Section, const FString& Key, const FString& Package, BITFIELD InsertAtEnd)
    {
        AEPlayerController_eventAddNote_Parms Parms;
        Parms.NoteString=NoteString;
        Parms.Section=Section;
        Parms.Key=Key;
        Parms.Package=Package;
        Parms.InsertAtEnd=InsertAtEnd;
        ProcessEvent(FindFunctionChecked(ECHELON_AddNote),&Parms);
    }
    void eventCloseTrainingData()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_CloseTrainingData),NULL);
    }
    BITFIELD eventPole(FVector locationEnd, FRotator orientationEnd, INT PLType)
    {
        AEPlayerController_eventPole_Parms Parms;
        Parms.ReturnValue=0;
        Parms.locationEnd=locationEnd;
        Parms.orientationEnd=orientationEnd;
        Parms.PLType=PLType;
        ProcessEvent(FindFunctionChecked(ECHELON_Pole),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventFenceTop(FVector locationEnd, FRotator orientationEnd)
    {
        AEPlayerController_eventFenceTop_Parms Parms;
        Parms.ReturnValue=0;
        Parms.locationEnd=locationEnd;
        Parms.orientationEnd=orientationEnd;
        ProcessEvent(FindFunctionChecked(ECHELON_FenceTop),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventZipLine(FVector locationEnd, FRotator orientationEnd, INT ZLType)
    {
        AEPlayerController_eventZipLine_Parms Parms;
        Parms.ReturnValue=0;
        Parms.locationEnd=locationEnd;
        Parms.orientationEnd=orientationEnd;
        Parms.ZLType=ZLType;
        ProcessEvent(FindFunctionChecked(ECHELON_ZipLine),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventTopPipe(FVector locationEnd, FRotator orientationEnd)
    {
        AEPlayerController_eventTopPipe_Parms Parms;
        Parms.ReturnValue=0;
        Parms.locationEnd=locationEnd;
        Parms.orientationEnd=orientationEnd;
        ProcessEvent(FindFunctionChecked(ECHELON_TopPipe),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventPipe(FVector locationEnd, FRotator orientationEnd)
    {
        AEPlayerController_eventPipe_Parms Parms;
        Parms.ReturnValue=0;
        Parms.locationEnd=locationEnd;
        Parms.orientationEnd=orientationEnd;
        ProcessEvent(FindFunctionChecked(ECHELON_Pipe),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventTopNarrowLadder(FVector locationEnd, FRotator orientationEnd)
    {
        AEPlayerController_eventTopNarrowLadder_Parms Parms;
        Parms.ReturnValue=0;
        Parms.locationEnd=locationEnd;
        Parms.orientationEnd=orientationEnd;
        ProcessEvent(FindFunctionChecked(ECHELON_TopNarrowLadder),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventNarrowLadder(FVector locationEnd, FRotator orientationEnd, INT NLType)
    {
        AEPlayerController_eventNarrowLadder_Parms Parms;
        Parms.ReturnValue=0;
        Parms.locationEnd=locationEnd;
        Parms.orientationEnd=orientationEnd;
        Parms.NLType=NLType;
        ProcessEvent(FindFunctionChecked(ECHELON_NarrowLadder),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventHandOverHand(FVector locationEnd, FRotator orientationEnd)
    {
        AEPlayerController_eventHandOverHand_Parms Parms;
        Parms.ReturnValue=0;
        Parms.locationEnd=locationEnd;
        Parms.orientationEnd=orientationEnd;
        ProcessEvent(FindFunctionChecked(ECHELON_HandOverHand),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventLedge(FVector locationEnd, FRotator orientationEnd, INT LType)
    {
        AEPlayerController_eventLedge_Parms Parms;
        Parms.ReturnValue=0;
        Parms.locationEnd=locationEnd;
        Parms.orientationEnd=orientationEnd;
        Parms.LType=LType;
        ProcessEvent(FindFunctionChecked(ECHELON_Ledge),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventWaistLedge(FVector locationEnd, FRotator orientationEnd)
    {
        AEPlayerController_eventWaistLedge_Parms Parms;
        Parms.ReturnValue=0;
        Parms.locationEnd=locationEnd;
        Parms.orientationEnd=orientationEnd;
        ProcessEvent(FindFunctionChecked(ECHELON_WaistLedge),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventFeetLedge(FVector locationEnd, FRotator orientationEnd)
    {
        AEPlayerController_eventFeetLedge_Parms Parms;
        Parms.ReturnValue=0;
        Parms.locationEnd=locationEnd;
        Parms.orientationEnd=orientationEnd;
        ProcessEvent(FindFunctionChecked(ECHELON_FeetLedge),&Parms);
        return Parms.ReturnValue;
    }
    void eventNoGE()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_NoGE),NULL);
    }
    void eventInitialSave()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_InitialSave),NULL);
    }
    void eventStartInitialPattern()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_StartInitialPattern),NULL);
    }
    void eventAddMultiMapInformation()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_AddMultiMapInformation),NULL);
    }
    void eventReduceCameraSpeed(FLOAT& turnMul)
    {
        AEPlayerController_eventReduceCameraSpeed_Parms Parms;
        Parms.turnMul=turnMul;
        ProcessEvent(FindFunctionChecked(ECHELON_ReduceCameraSpeed),&Parms);
        turnMul=Parms.turnMul;
    }
    BITFIELD eventGetPause()
    {
        AEPlayerController_eventGetPause_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetPause),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AEPlayerController,APlayerController,0|CLASS_Config,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEPlayerController)
};

enum CoverAttackDir
{
    CA_Off                  =0,
    CA_Left                 =1,
    CA_Right                =2,
    CA_Up                   =3,
    CA_Waiting              =4,
    CA_MAX                  =5,
};

struct AEAIController_eventPlaceWallMine_Parms
{
    FVector Location;
    BYTE ReturnValue;
};
struct AEAIController_eventThrowGrenade_Parms
{
    FVector Direction;
    BYTE ReturnValue;
};
struct AEAIController_eventEnteringDoorRadius_Parms
{
    class AEDoorMover* Door;
};
struct AEAIController_eventOpenDoor_Parms
{
    BITFIELD ReturnValue;
};
struct AEAIController_eventClimbLadder_Parms
{
    BITFIELD bClimbingUp;
};
struct AEAIController_eventSetCurrentLadder_Parms
{
    INT LadderID;
};
struct AEAIController_eventUnlockLadder_Parms
{
};
struct AEAIController_eventBeginInteraction_Parms
{
    BITFIELD ReturnValue;
};
struct AEAIController_eventInitInteraction_Parms
{
    class AActor* InteractObject;
    BITFIELD ReturnValue;
};
struct AEAIController_eventIsTimedOut_Parms
{
    class ANavigationPoint* oNP;
    BITFIELD ReturnValue;
};
struct AEAIController_eventCheckHidePoints_Parms
{
};
struct AEAIController_eventTimeoutHidePoint_Parms
{
    class ANavigationPoint* oNP;
    FLOAT fTime;
};
struct AEAIController_eventReplaceGoal_Parms
{
    class AEGoal* G;
};
struct AEAIController_eventAddGoalDirect_Parms
{
    class AEGoal* G;
};
struct AEAIController_eventReplaceDefaultGoal_Parms
{
    BYTE _Type;
    BYTE _Priority;
    FVector _Location;
    FVector _Focus;
    class AActor* _target;
    FName _Tag;
    FName _Anim;
    class USound* _Sounds;
    BITFIELD _Flag;
    FLOAT _Value;
    BYTE _MoveFlags;
    FVector _Direction;
    BYTE _WaitFlags;
};
struct AEAIController_eventSetDefaultGuard_Parms
{
};
struct AEAIController_eventAddGoal_Parms
{
    BYTE _Type;
    BYTE _Priority;
    FVector _Location;
    FVector _Focus;
    class AActor* _target;
    FName _Tag;
    FName _Anim;
    class USound* _Sounds;
    BITFIELD _Flag;
    FLOAT _Value;
    BYTE _MoveFlags;
    FVector _Direction;
    BYTE _WaitFlags;
    BITFIELD _UpdatePlayerPos;
    FName _AnimB;
};
struct AEAIController_eventGetCurrentGoalType_Parms
{
    BYTE ReturnValue;
};
struct AEAIController_eventSubGoal_PatrolTurnAround_Parms
{
};
struct AEAIController_eventExecGoal_QuickSearch_Parms
{
    FLOAT DeltaTime;
    class AEGoal* Goal;
    BYTE ReturnValue;
};
struct AEAIController_eventExecGoal_Wander_Parms
{
    FLOAT DeltaTime;
    class AEGoal* Goal;
    BYTE ReturnValue;
};
struct AEAIController_eventTargetIsFiring_Parms
{
    BITFIELD ReturnValue;
};
struct AEAIController_eventGetLaziness_Parms
{
    FLOAT ReturnValue;
};
struct AEAIController_eventGetPersonalityUpdateTime_Parms
{
    FLOAT ReturnValue;
};
struct AEAIController_eventStoppedMoving_Parms
{
};
struct AEAIController_eventStartedMoving_Parms
{
};
struct AEAIController_eventSetGrenadeTime_Parms
{
    FLOAT Time;
};
struct AEAIController_eventCheckTransitionTable_Parms
{
    BYTE VisRating;
    FLOAT Distance;
    BYTE ReturnValue;
};
struct AEAIController_eventSelectItem_Parms
{
    class UClass* ItemClass;
    BITFIELD ReturnValue;
};
struct AEAIController_eventGetMaximumAimAngle_Parms
{
    FLOAT ReturnValue;
};
struct AEAIController_eventNotifyShotJustMissed_Parms
{
    class APawn* Instigator;
};
struct AEAIController_eventAttackFromCover_Parms
{
    BYTE dir;
};
struct AEAIController_eventGotoStateSafe_Parms
{
    FName State;
};
struct AEAIController_eventInitPatrolNetwork_Parms
{
    FName PatrolPointTag;
};
struct AEAIController_eventResetGoalList_Parms
{
};
class ECHELON_API AEAIController : public AAIController
{
public:
    class AEPawn* EPawn;
    class AEchelonGameInfo* eGame;
    class AEPawn* Master;
    class AEPawn* Leader;
    BITFIELD bInTransition:1 GCC_PACK(4);
    BITFIELD bWaitingForPatrolTrigger:1;
    BITFIELD bNotResponsive:1;
    BITFIELD bAttackCover:1;
    BITFIELD bHittingWall:1;
    BITFIELD bNavigateFailure:1;
    BITFIELD bDirectionRight:1;
    BITFIELD bPlayerSeen:1;
    BITFIELD bCanFire:1;
    BITFIELD bClimbingUp:1;
    BITFIELD bInteractionActive:1;
    BITFIELD bInteractionComplete:1;
    BITFIELD bStandUpASAP:1;
    BITFIELD bThrowNow:1;
    BITFIELD bIsMoving:1;
    BITFIELD bPersonalityAnimActive:1;
    BITFIELD bStopPersonalityAnim:1;
    BITFIELD bAboutToFall:1;
    BITFIELD bShootTarget:1;
    BITFIELD bIsOnLadder:1;
    BITFIELD bRetryPathFind:1;
    BITFIELD bInFlashLightVolume:1;
    BITFIELD bRequestAwareState:1;
    BITFIELD bTableChair:1;
    BITFIELD bMasterDeadSent:1;
    BITFIELD bIsAboutToLostThePlayer:1;
    BITFIELD bTimedOutAlready:1;
    BITFIELD bIgnoreLocalPath:1;
    BITFIELD bTimedForceFire:1;
    BITFIELD bWalkReached:1;
    BITFIELD bAccFire:1;
    BITFIELD bWaitForDoor:1;
    FLOAT LastTryTime GCC_PACK(4);
    INT NumberOfTry;
    FName m_LastStateName;
    class ANavigationPoint* m_pNextPatrolPoint;
    class ANavigationPoint* TempNavPoint;
    class ANavigationPoint* TempMovePoint;
    class ANavigationPoint* TempWalkPoint;
    class ANavigationPoint* FollowPoint;
    class AActor* TakenPoint;
    class AEInfoPoint* TakenFocus;
    class AEInfoPoint* DynamicFocusPoint;
    FLOAT DamageTimer;
    FLOAT BumpTimer;
    FLOAT EnvironmentCheckTimer;
    FLOAT AICycles;
    FVector AimDirection;
    FVector LastAimDirection;
    FLOAT NextFireTime;
    FLOAT NextCoverAttackTime;
    FLOAT NoAlternatePathTimer;
    FLOAT DefendCheckTimer;
    class AEInfoPoint* FocusAccumulator[5];
    class AEInfoPoint* FA_Iterator;
    INT FA_StepSize;
    BYTE myLadderLockInfo;
    INT CurrentGEID;
    INT PreviousRoll;
    FVector StrictFocus;
    FRotator PreviousViewRotation;
    FRotator CurrentViewRotation;
    FVector BumpAcceleration;
    FVector StepAsideLocation;
    class AActor* m_pNextNavPoint;
    class AActor* IntermediateNavPoint;
    class ANavigationPoint* AlternativeMovePoint;
    class AEDoorMover* SpecialMoveDoor;
    FVector m_vPrevDestination;
    FVector LadderExitLocation;
    INT LastSmellPoint;
    FName BlendPersonalityAnim;
    FName FullPersonalityAnim;
    FLOAT PersonalityUpdateTime;
    FLOAT PathBlockStartTime;
    class AEPawn* LocalPathBlocker;
    INT FindLocalPathStep;
    class ANavigationPoint* WeightedRoute[4];
    FVector LastKnownPlayerLocation;
    FVector LastKnownPlayerDirection;
    FLOAT LastKnownPlayerTime;
    FLOAT TimePlayerFirstSeen;
    FLOAT MonitorTimer;
    class AActor* TargetActorToFire;
    FVector TargetPosition;
    BYTE LastAlertMonitorEventType;
    INT FireLocation;
    INT VisionLocation;
    FVector LastSearchLocation;
    class UESearchManager* SearchManager;
    FName ASearchLookA;
    FName ASearchLookB;
    class AEGoalList* m_pGoalList;
    FLOAT InternalGoalTimer;
    FLOAT PersonalityAnimTimer;
    FLOAT FocusTimer;
    FLOAT FocusSwitchTime;
    INT NumWanderPoints;
    FName WaitingForSig;
    class AEGroupAI* Group;
    class AEAIEvent* AIEvent;
    INT LastGoalStatus;
    BYTE LastGoalType;
    INT type;
    class AEPattern* Pattern;
    FVector TargetLocation;
    class AActor* TargetActor;
    FSNoiseHistory NoiseHistory[8];
    INT NoiseIndex;
    BITFIELD bFiring:1 GCC_PACK(4);
    FLOAT MostRecentStopTime GCC_PACK(4);
    FSFocusSwitchInfo FocusInfo;
    TArrayNoInit<class AEGameplayObject*> LockedSwitches;
    TArrayNoInit<FSNavPointTimeout> NavPointsTimedOut;
    TArrayNoInit<class AEAIController*> aoCloseControllers;
    DECLARE_FUNCTION(execNotifyBumpPawn);
    DECLARE_FUNCTION(execUpdatePlayerLocation);
    DECLARE_FUNCTION(execCheckTargetDead);
    DECLARE_FUNCTION(execSubGoal_AttackTarget);
    DECLARE_FUNCTION(execStopMovement);
    DECLARE_FUNCTION(execEMoveToward);
    DECLARE_FUNCTION(execWalkToDestination);
    DECLARE_FUNCTION(execSubGoal_NavigateTo);
    DECLARE_FUNCTION(execExecuteCurrentGoal);
    DECLARE_FUNCTION(execFindLadder);
    DECLARE_FUNCTION(execClearRoutes);
    DECLARE_FUNCTION(execLockNavPoint);
    DECLARE_FUNCTION(execUnlockNavPoint);
    DECLARE_FUNCTION(execChooseHidePoint);
    DECLARE_FUNCTION(execChooseCoverPoint);
    DECLARE_FUNCTION(execChooseAttackPoint);
    DECLARE_FUNCTION(execUpdateSearchGoal);
    DECLARE_FUNCTION(execChooseSearchPoint);
    DECLARE_FUNCTION(execEvaluateCorner);
    DECLARE_FUNCTION(execRelocatePawnOnGround);
    BYTE eventPlaceWallMine(FVector Location)
    {
        AEAIController_eventPlaceWallMine_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Location=Location;
        ProcessEvent(FindFunctionChecked(ECHELON_PlaceWallMine),&Parms);
        return Parms.ReturnValue;
    }
    BYTE eventThrowGrenade(FVector Direction)
    {
        AEAIController_eventThrowGrenade_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Direction=Direction;
        ProcessEvent(FindFunctionChecked(ECHELON_ThrowGrenade),&Parms);
        return Parms.ReturnValue;
    }
    void eventEnteringDoorRadius(class AEDoorMover* Door)
    {
        AEAIController_eventEnteringDoorRadius_Parms Parms;
        Parms.Door=Door;
        ProcessEvent(FindFunctionChecked(ECHELON_EnteringDoorRadius),&Parms);
    }
    BITFIELD eventOpenDoor()
    {
        AEAIController_eventOpenDoor_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_OpenDoor),&Parms);
        return Parms.ReturnValue;
    }
    void eventClimbLadder(BITFIELD bClimbingUp)
    {
        AEAIController_eventClimbLadder_Parms Parms;
        Parms.bClimbingUp=bClimbingUp;
        ProcessEvent(FindFunctionChecked(ECHELON_ClimbLadder),&Parms);
    }
    void eventSetCurrentLadder(INT LadderID)
    {
        AEAIController_eventSetCurrentLadder_Parms Parms;
        Parms.LadderID=LadderID;
        ProcessEvent(FindFunctionChecked(ECHELON_SetCurrentLadder),&Parms);
    }
    void eventUnlockLadder()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_UnlockLadder),NULL);
    }
    BITFIELD eventBeginInteraction()
    {
        AEAIController_eventBeginInteraction_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_BeginInteraction),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventInitInteraction(class AActor* InteractObject)
    {
        AEAIController_eventInitInteraction_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractObject=InteractObject;
        ProcessEvent(FindFunctionChecked(ECHELON_InitInteraction),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventIsTimedOut(class ANavigationPoint* oNP)
    {
        AEAIController_eventIsTimedOut_Parms Parms;
        Parms.ReturnValue=0;
        Parms.oNP=oNP;
        ProcessEvent(FindFunctionChecked(ECHELON_IsTimedOut),&Parms);
        return Parms.ReturnValue;
    }
    void eventCheckHidePoints()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_CheckHidePoints),NULL);
    }
    void eventTimeoutHidePoint(class ANavigationPoint* oNP, FLOAT fTime)
    {
        AEAIController_eventTimeoutHidePoint_Parms Parms;
        Parms.oNP=oNP;
        Parms.fTime=fTime;
        ProcessEvent(FindFunctionChecked(ECHELON_TimeoutHidePoint),&Parms);
    }
    void eventReplaceGoal(class AEGoal* G)
    {
        AEAIController_eventReplaceGoal_Parms Parms;
        Parms.G=G;
        ProcessEvent(FindFunctionChecked(ECHELON_ReplaceGoal),&Parms);
    }
    void eventAddGoalDirect(class AEGoal* G)
    {
        AEAIController_eventAddGoalDirect_Parms Parms;
        Parms.G=G;
        ProcessEvent(FindFunctionChecked(ECHELON_AddGoalDirect),&Parms);
    }
    void eventReplaceDefaultGoal(BYTE _Type, BYTE _Priority, FVector _Location, FVector _Focus, class AActor* _target, FName _Tag, FName _Anim, class USound* _Sounds, BITFIELD _Flag, FLOAT _Value, BYTE _MoveFlags, FVector _Direction, BYTE _WaitFlags)
    {
        AEAIController_eventReplaceDefaultGoal_Parms Parms;
        Parms._Type=_Type;
        Parms._Priority=_Priority;
        Parms._Location=_Location;
        Parms._Focus=_Focus;
        Parms._target=_target;
        Parms._Tag=_Tag;
        Parms._Anim=_Anim;
        Parms._Sounds=_Sounds;
        Parms._Flag=_Flag;
        Parms._Value=_Value;
        Parms._MoveFlags=_MoveFlags;
        Parms._Direction=_Direction;
        Parms._WaitFlags=_WaitFlags;
        ProcessEvent(FindFunctionChecked(ECHELON_ReplaceDefaultGoal),&Parms);
    }
    void eventSetDefaultGuard()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_SetDefaultGuard),NULL);
    }
    void eventAddGoal(BYTE _Type, BYTE _Priority, FVector _Location, FVector _Focus, class AActor* _target, FName _Tag, FName _Anim, class USound* _Sounds, BITFIELD _Flag, FLOAT _Value, BYTE _MoveFlags, FVector _Direction, BYTE _WaitFlags, BITFIELD _UpdatePlayerPos, FName _AnimB)
    {
        AEAIController_eventAddGoal_Parms Parms;
        Parms._Type=_Type;
        Parms._Priority=_Priority;
        Parms._Location=_Location;
        Parms._Focus=_Focus;
        Parms._target=_target;
        Parms._Tag=_Tag;
        Parms._Anim=_Anim;
        Parms._Sounds=_Sounds;
        Parms._Flag=_Flag;
        Parms._Value=_Value;
        Parms._MoveFlags=_MoveFlags;
        Parms._Direction=_Direction;
        Parms._WaitFlags=_WaitFlags;
        Parms._UpdatePlayerPos=_UpdatePlayerPos;
        Parms._AnimB=_AnimB;
        ProcessEvent(FindFunctionChecked(ECHELON_AddGoal),&Parms);
    }
    BYTE eventGetCurrentGoalType()
    {
        AEAIController_eventGetCurrentGoalType_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetCurrentGoalType),&Parms);
        return Parms.ReturnValue;
    }
    void eventSubGoal_PatrolTurnAround()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_SubGoal_PatrolTurnAround),NULL);
    }
    BYTE eventExecGoal_QuickSearch(FLOAT DeltaTime, class AEGoal* Goal)
    {
        AEAIController_eventExecGoal_QuickSearch_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DeltaTime=DeltaTime;
        Parms.Goal=Goal;
        ProcessEvent(FindFunctionChecked(ECHELON_ExecGoal_QuickSearch),&Parms);
        return Parms.ReturnValue;
    }
    BYTE eventExecGoal_Wander(FLOAT DeltaTime, class AEGoal* Goal)
    {
        AEAIController_eventExecGoal_Wander_Parms Parms;
        Parms.ReturnValue=0;
        Parms.DeltaTime=DeltaTime;
        Parms.Goal=Goal;
        ProcessEvent(FindFunctionChecked(ECHELON_ExecGoal_Wander),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventTargetIsFiring()
    {
        AEAIController_eventTargetIsFiring_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_TargetIsFiring),&Parms);
        return Parms.ReturnValue;
    }
    FLOAT eventGetLaziness()
    {
        AEAIController_eventGetLaziness_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetLaziness),&Parms);
        return Parms.ReturnValue;
    }
    FLOAT eventGetPersonalityUpdateTime()
    {
        AEAIController_eventGetPersonalityUpdateTime_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetPersonalityUpdateTime),&Parms);
        return Parms.ReturnValue;
    }
    void eventStoppedMoving()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_StoppedMoving),NULL);
    }
    void eventStartedMoving()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_StartedMoving),NULL);
    }
    void eventSetGrenadeTime(FLOAT Time)
    {
        AEAIController_eventSetGrenadeTime_Parms Parms;
        Parms.Time=Time;
        ProcessEvent(FindFunctionChecked(ECHELON_SetGrenadeTime),&Parms);
    }
    BYTE eventCheckTransitionTable(BYTE VisRating, FLOAT Distance)
    {
        AEAIController_eventCheckTransitionTable_Parms Parms;
        Parms.ReturnValue=0;
        Parms.VisRating=VisRating;
        Parms.Distance=Distance;
        ProcessEvent(FindFunctionChecked(ECHELON_CheckTransitionTable),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventSelectItem(class UClass* ItemClass)
    {
        AEAIController_eventSelectItem_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ItemClass=ItemClass;
        ProcessEvent(FindFunctionChecked(ECHELON_SelectItem),&Parms);
        return Parms.ReturnValue;
    }
    FLOAT eventGetMaximumAimAngle()
    {
        AEAIController_eventGetMaximumAimAngle_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetMaximumAimAngle),&Parms);
        return Parms.ReturnValue;
    }
    void eventNotifyShotJustMissed(class APawn* Instigator)
    {
        AEAIController_eventNotifyShotJustMissed_Parms Parms;
        Parms.Instigator=Instigator;
        ProcessEvent(FindFunctionChecked(ECHELON_NotifyShotJustMissed),&Parms);
    }
    void eventAttackFromCover(BYTE dir)
    {
        AEAIController_eventAttackFromCover_Parms Parms;
        Parms.dir=dir;
        ProcessEvent(FindFunctionChecked(ECHELON_AttackFromCover),&Parms);
    }
    void eventGotoStateSafe(FName State)
    {
        AEAIController_eventGotoStateSafe_Parms Parms;
        Parms.State=State;
        ProcessEvent(FindFunctionChecked(ECHELON_GotoStateSafe),&Parms);
    }
    void eventInitPatrolNetwork(FName PatrolPointTag)
    {
        AEAIController_eventInitPatrolNetwork_Parms Parms;
        Parms.PatrolPointTag=PatrolPointTag;
        ProcessEvent(FindFunctionChecked(ECHELON_InitPatrolNetwork),&Parms);
    }
    void eventResetGoalList()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_ResetGoalList),NULL);
    }
    DECLARE_CLASS(AEAIController,AAIController,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEAIController)
};


struct AEMainHUD_eventLoadTInfo_Parms
{
    INT tab;
};
struct AEMainHUD_eventSaveTInfo_Parms
{
    INT tab;
};
struct AEMainHUD_eventLoadProfile_Parms
{
    FString PlayerName;
};
struct AEMainHUD_eventUpdateProfile_Parms
{
};
class ECHELON_API AEMainHUD : public AHUD
{
public:
    class AECommunicationBox* CommunicationBox;
    class AEGameplayObject* hud_master;
    class AETimer* TimerView;
    FName in_game_state_name;
    class AEGameplayObject* in_game_hud_master;
    BITFIELD bShowCtrl:1 GCC_PACK(4);
    void eventLoadTInfo(INT tab)
    {
        AEMainHUD_eventLoadTInfo_Parms Parms;
        Parms.tab=tab;
        ProcessEvent(FindFunctionChecked(ECHELON_LoadTInfo),&Parms);
    }
    void eventSaveTInfo(INT tab)
    {
        AEMainHUD_eventSaveTInfo_Parms Parms;
        Parms.tab=tab;
        ProcessEvent(FindFunctionChecked(ECHELON_SaveTInfo),&Parms);
    }
    void eventLoadProfile(const FString& PlayerName)
    {
        AEMainHUD_eventLoadProfile_Parms Parms;
        Parms.PlayerName=PlayerName;
        ProcessEvent(FindFunctionChecked(ECHELON_LoadProfile),&Parms);
    }
    void eventUpdateProfile()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_UpdateProfile),NULL);
    }
    DECLARE_CLASS(AEMainHUD,AHUD,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEMainHUD)
};


class ECHELON_API APatrolPoint : public ANavigationPoint
{
public:
    DECLARE_CLASS(APatrolPoint,ANavigationPoint,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(APatrolPoint)
};


class ECHELON_API AEDynamicNavPoint : public ANavigationPoint
{
public:
    DECLARE_CLASS(AEDynamicNavPoint,ANavigationPoint,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEDynamicNavPoint)
};


class ECHELON_API AEDoorMarker : public ANavigationPoint
{
public:
    BITFIELD bHasNoDoorPoints:1 GCC_PACK(4);
    class AEDoorMover* Door GCC_PACK(4);
    DECLARE_CLASS(AEDoorMarker,ANavigationPoint,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEDoorMarker)
};


class ECHELON_API AEDoorPoint : public ANavigationPoint
{
public:
    class AEDoorMover* Door;
    DECLARE_CLASS(AEDoorPoint,ANavigationPoint,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEDoorPoint)
};


class ECHELON_API AELight : public ALight
{
public:
    BYTE InitialLightType;
    BYTE InitialLightBrightness;
    BITFIELD InitialUsesBeam:1 GCC_PACK(4);
    FLOAT LastTimeChange GCC_PACK(4);
    INT NbControllers;
    DECLARE_CLASS(AELight,ALight,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AELight)
};


class ECHELON_API AETextureManager : public AActor
{
public:
    TArrayNoInit<FETextureInfo> ArrayTexture;
    INT pixel;
    DECLARE_FUNCTION(execGetOriginY);
    DECLARE_FUNCTION(execGetOriginX);
    DECLARE_FUNCTION(execGetHeight);
    DECLARE_FUNCTION(execGetWidth);
    DECLARE_FUNCTION(execGetTextureInfo);
    DECLARE_FUNCTION(execDrawTileFromManager);
    DECLARE_CLASS(AETextureManager,AActor,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AETextureManager)
};


class ECHELON_API AETICON : public AETextureManager
{
public:
    INT inv_fleche_icones;
    INT inv_ic_save;
    INT qi_ic_glowstick;
    INT inv_ic_glowstick;
    INT qi_ic_lockjam;
    INT qi_ic_lockpick;
    INT ms_ic_memorycard;
    INT inv_ic_nightvis;
    INT inv_ic_medkit;
    INT inv_ic_ring_airfoil;
    INT inv_ic_opticcable;
    INT inv_ic_camerajammer;
    INT inv_ic_stickycam_div;
    INT inv_ic_stickycam_surv;
    INT inv_ic_memorystick;
    INT inv_ic_beretta;
    INT inv_ic_wallmines;
    INT inv_ic_concussiongrenade;
    INT inv_ic_flares;
    INT inv_ic_stickyshocker;
    INT inv_ic_inv;
    INT inv_ic_goals_notes;
    INT inv_ic_players;
    INT com_ic_goals;
    INT com_ic_recon;
    INT qi_ic_thermal;
    INT com_grims4;
    INT com_grims6;
    INT qi_ic_opticcable;
    INT qi_ic_memorystick;
    INT qi_ic_foamgrenade;
    INT qi_ic_stickyshocker_sd;
    INT qi_ic_stickycam_div_sd;
    INT ms_ic_notes;
    INT ms_ic_recons;
    INT qi_ic_maingun;
    INT qi_ic_concussiongrenade;
    INT qi_ic_grenades;
    INT qi_ic_camerajammer;
    INT qi_ic_flashlight;
    INT qi_ic_flare;
    INT qi_ic_lasermic;
    INT qi_ic_beretta;
    INT com_grims2;
    INT com_grims5;
    INT com_grims3;
    INT com_grims1;
    INT com_lambert3;
    INT com_lambert4;
    INT com_lambert2;
    INT com_lambert1;
    INT com_lambert6;
    INT com_lambert5;
    INT qi_ic_night;
    INT qi_ic_stickycam_div;
    INT qi_ic_stickycam_surv;
    INT qi_ic_stickyshocker;
    INT qi_ic_ring_airfoil;
    INT qi_ic_medkit;
    INT qi_ic_wallmines;
    INT ms_ic_goals;
    INT ms_ic_images;
    INT com_ic_notes;
    INT qi_ic_foamgrenade_sd;
    INT qi_ic_stickycam_surv_sd;
    INT qi_ic_flashlight_sd;
    INT qi_ic_ring_airfoil_sd;
    INT com_ic_npc;
    INT com_ic_console;
    INT com_ic_inventory;
    INT com_ic_talk;
    INT com_ic_hints;
    INT com_ic_headq;
    INT inv_ic_flashlight;
    INT inv_ic_grenades;
    INT inv_ic_lasermic;
    INT inv_ic_thermal;
    INT inv_ic_foamgrenade;
    INT inv_ic_lockjam;
    INT inv_ic_lockpick;
    INT inv_ic_maingun;
    INT ct_controller_s1;
    INT ct_controller_s2;
    INT inv_ic_menus;
    DECLARE_CLASS(AETICON,AETextureManager,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AETICON)
};


class ECHELON_API AETGAME : public AETextureManager
{
public:
    INT ic_lock;
    INT ic_unlock;
    INT trai_s_button;
    INT trai_s_trigger;
    INT trai_s_analog;
    INT trai_s_dpad;
    INT controller_s_trigger_fond;
    INT controller_s_trigger_stroke;
    INT controller_s_front_stroke;
    INT svf2_mire_fond;
    INT svf2_mire;
    INT pi_mire_top_bas;
    INT pi_fond_mire;
    INT rs_retine;
    INT rs_oeil;
    INT com_ic_recon;
    INT com_ic_notes;
    INT com_ic_goals;
    INT int_selecteur;
    INT int_bord_v;
    INT int_coin;
    INT int_bord_h;
    INT int_fleche;
    INT sc_fond_ligne;
    INT qi_bord_h2;
    INT sl_coin_section;
    INT li_coin;
    INT qi_bord_h;
    INT qi_bord_v2;
    INT sl_stroke;
    INT sw_border_v;
    INT qi_bullet;
    INT qi_gris_stroke;
    INT qi_bord_v;
    INT qi_fond_second;
    INT sw_border_h;
    INT sw_coin;
    INT qi_fire;
    INT sl_coin;
    INT tu_select_mil;
    INT qi_clip;
    INT lf_niv_plein;
    INT qi_coin2;
    INT lf_niv_vide;
    INT tu_select_cote;
    INT trai_coin;
    INT qi_coin1;
    INT sb_filtre;
    INT trai_fleche_gaudroi;
    INT trai_fleche_topbas;
    INT cj_mire;
    INT li_degrade;
    INT svf2_bordernoir;
    INT tar_pistol;
    INT qi_light;
    INT inv_ic_mil;
    INT inv_ic_bord;
    INT inv_ic_menu_bord;
    INT inv_ic_menu_mil;
    INT qi_fond;
    INT sc_ic_surveillance;
    INT tu_ombre;
    INT svf2_border;
    INT sc_anim_border;
    INT comp_stroke_anim;
    INT sc_ic_diversion;
    INT cj_communication;
    INT rs_animvideo;
    INT rs_scan1;
    INT rs_scan2_h;
    INT rs_scan2_v;
    INT rs_stroke_h;
    INT rs_light;
    INT rs_fond_pale;
    INT rs_border;
    INT rs_fond_stroke;
    INT rs_coin;
    INT rs_stroke_v;
    INT sc_fleche2;
    INT sc_fleche;
    INT pi_mire_cote;
    INT controller_s_front_fond;
    INT inv_fleche_icones;
    DECLARE_CLASS(AETGAME,AETextureManager,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AETGAME)
};


class ECHELON_API AETMENU : public AETextureManager
{
public:
    INT inv_ic_batterie;
    INT pda_border_logo;
    INT but_a;
    INT pda_border1_4;
    INT but_b;
    INT inv_coin_2p;
    INT inv_nav_carre;
    INT pda_border1;
    INT pda_border1_3;
    INT pda_border3_2;
    INT pda_border2;
    INT pda_border4_4;
    INT pda_border4_2;
    INT pda_border4;
    INT pda_fond;
    INT slidder_degrade;
    INT but_y;
    INT but_x;
    INT inv_nav_fleche_tb;
    INT inv_nav_fleche_gd;
    INT sl_mil2;
    INT inv_coin_3p;
    INT sl_coin;
    INT inv_coin_4p;
    INT inv_coin_blanc;
    INT sl_cote2;
    INT kb_backspace;
    INT but_s_y;
    INT but_s_b;
    INT but_s_x;
    INT but_s_a;
    INT but_s_start;
    INT inv_volumebar_fleche;
    INT inv_dropdown_fleche;
    INT inv_scrollbar_fleche;
    DECLARE_CLASS(AETMENU,AETextureManager,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AETMENU)
};


class ECHELON_API AEPlayerCam : public AActor
{
public:
    FECamParam m_camParam[27];
    BYTE m_camMode;
    BYTE m_volSize;
    class AEPlayerController* m_EPC;
    class AEPawn* m_sam;
    FLOAT m_prevTargetZ;
    FVector m_prevLocalTarget;
    FLOAT m_prevDistance;
    FLOAT m_prevIdealDistance;
    BITFIELD m_rotatedSam:1 GCC_PACK(4);
    BITFIELD m_fixedTarget:1;
    FLOAT m_fixedTargetSpeed GCC_PACK(4);
    FVector m_fixedTargetPos;
    FVector m_fixedTargetPos2;
    FVector m_prevStartPos;
    FVector m_prevOffset;
    FVector m_prevGlobalOffset;
    FLOAT m_prevCloseupAdjust;
    FLOAT m_dampedTurn;
    FLOAT m_dampedLookUp;
    INT m_hitRoll;
    INT m_hitFadeOut;
    INT m_tiltPitch;
    INT m_tiltTargetPitch;
    INT m_tiltSpeed;
    INT m_tiltFadeOut;
    INT m_shakeRoll;
    INT m_shakeTargetRoll;
    INT m_shakeSpeed;
    INT m_shakeFadeOut;
    FLOAT m_yawSpeed;
    FLOAT m_pitchSpeed;
    INT m_minPitch;
    INT m_maxPitch;
    FLOAT m_pitchCurveBias;
    FLOAT m_constraintSpeed;
    FRotator m_resettingRotation;
    FLOAT m_resetPitchSpeed;
    FLOAT m_resetYawSpeed;
    FLOAT m_absoluteMinDist;
    FLOAT m_targetZMaxDist;
    FLOAT m_collisionRadius;
    FLOAT m_collisionHeight;
    FLOAT m_NPCDistance;
    FLOAT m_minCleanDist;
    FLOAT m_closeupDist;
    FLOAT m_closeupHeight;
    FLOAT m_closeupDamping;
    DECLARE_FUNCTION(execUpdateView);
    DECLARE_FUNCTION(execSetMode);
    DECLARE_FUNCTION(execFollowingCalcView);
    DECLARE_FUNCTION(execResettingRotation);
    DECLARE_FUNCTION(execFollowingRotation);
    DECLARE_FUNCTION(execInitCameraSettings);
    DECLARE_CLASS(AEPlayerCam,AActor,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEPlayerCam)
};

#define UCONST_SEARCH_BIT 0x00000002
#define UCONST_BARK_BIT 0x00000001
#define UCONST_KEY_RESETCAMERA_MASK 0x20000
#define UCONST_KEY_MENU_MASK 0x10000
#define UCONST_KEY_QUICK_MASK 0x08000
#define UCONST_KEY_CHANGE_ROF_MASK 0x04000
#define UCONST_KEY_ALT_FIRE_MASK 0x02000
#define UCONST_KEY_FIRE_MASK 0x01000
#define UCONST_KEY_DUCK_MASK 0x00800
#define UCONST_KEY_JUMP_MASK 0x00400
#define UCONST_KEY_SCOPE_MASK 0x00200
#define UCONST_KEY_INTERACTION_MASK 0x00100
#define UCONST_KEY_LOOK_RIGHT_MASK 0x00080
#define UCONST_KEY_LOOK_LEFT_MASK 0x00040
#define UCONST_KEY_LOOK_DOWN_MASK 0x00020
#define UCONST_KEY_LOOK_UP_MASK 0x00010
#define UCONST_KEY_MOVE_RIGHT_MASK 0x00008
#define UCONST_KEY_MOVE_LEFT_MASK 0x00004
#define UCONST_KEY_MOVE_DOWN_MASK 0x00002
#define UCONST_KEY_MOVE_UP_MASK 0x00001
#define UCONST_KEY_NONE_MASK 0x00000
#define UCONST_CAM_COMMUNICATOR 0
#define UCONST_CAM_CONVERSATION 0
#define UCONST_CAM_NONE 0

struct AEPattern_eventMicIsTouchingSession_Parms
{
    BITFIELD ReturnValue;
};
struct AEPattern_eventGotoPatternLabel_Parms
{
    FName Label;
};
struct AEPattern_eventCommunicationCallBack_Parms
{
    BYTE eType;
};
struct AEPattern_eventAdjustDefaultPatternState_Parms
{
    BYTE _GoalT;
};
struct AEPattern_eventEventCallBack_Parms
{
    class AEAIEvent* Event;
    class AActor* TriggerActor;
};
struct AEPattern_eventReflexCallBack_Parms
{
    class AEAIEvent* Event;
};
class ECHELON_API AEPattern : public AActor
{
public:
    class AECommunicationBox* CommBox;
    class AController* Characters[10];
    class AActor* SoundActors[3];
    INT CurrentCharacter;
    class USound* CurrentSound;
    class USound* LaserMicSound;
    class AActor* CurrentSpeaker;
    FLOAT CurrentProgression;
    FLOAT SpeechDuration;
    FName CurrentJumpLabel;
    BYTE CurrentGoalExpected;
    class AEAIEvent* TriggerEvent;
    class AEAIController* TriggerCharacter;
    class AController* C;
    BITFIELD bIsRunning:1 GCC_PACK(4);
    BITFIELD bConversationRunning:1;
    BITFIELD bDisableMessages:1;
    BITFIELD bDisableEventTrigger:1;
    BITFIELD bLookWithStickyCam:1;
    BITFIELD bRunningAlarm:1;
    BITFIELD bInit:1;
    BITFIELD bEventExclusivity:1;
    BITFIELD bDontResetMusic:1;
    BITFIELD LaserMicInit:1;
    BITFIELD m_blatent:1;
    BITFIELD m_bgameover:1;
    FName LastZoneTouched GCC_PACK(4);
    INT bCharge;
    class AEVolume* CurrentVolume;
    FLOAT SessionProgress;
    INT iSuggestedBehavior;
    class AEAIController* CommTarget;
    BYTE eCommType;
    class AELaserMicMover* MicrophoneMover;
    FVector CoverLocation;
    class AEPawn* NearestArmedNPC;
    FVector AlertLocation;
    FVector GrenadeLocation;
    FLOAT GrenadeTime;
    FVector ForceFocusVect;
    class AActor* LookActor;
    FLOAT fLastBegForLife;
    FLOAT fLastMasterOutOfRad;
    FLOAT fLastReflexTime;
    FStringNoInit m_String;
    class USound* m_Sound;
    INT m_CharacterIndex;
    BYTE m_eEvent;
    BYTE m_eType;
    FLOAT m_progression;
    FLOAT m_delay;
    FLOAT m_Time;
    class USound* SatelliteCom;
    BITFIELD WaitingForBeep:1 GCC_PACK(4);
    DECLARE_FUNCTION(execSetPatternAlwaysTick);
    DECLARE_FUNCTION(execLookTarget);
    DECLARE_FUNCTION(execFreezeTraining);
    DECLARE_FUNCTION(execStopSpeech);
    DECLARE_FUNCTION(execCheckAttackPoint);
    DECLARE_FUNCTION(execProcessAI);
    DECLARE_FUNCTION(execWaitForGoal);
    DECLARE_FUNCTION(execSpeech);
    DECLARE_FUNCTION(execWaitForCommBox);
    DECLARE_FUNCTION(execTalk);
    BITFIELD eventMicIsTouchingSession()
    {
        AEPattern_eventMicIsTouchingSession_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_MicIsTouchingSession),&Parms);
        return Parms.ReturnValue;
    }
    void eventGotoPatternLabel(FName Label)
    {
        AEPattern_eventGotoPatternLabel_Parms Parms;
        Parms.Label=Label;
        ProcessEvent(FindFunctionChecked(ECHELON_GotoPatternLabel),&Parms);
    }
    void eventCommunicationCallBack(BYTE eType)
    {
        AEPattern_eventCommunicationCallBack_Parms Parms;
        Parms.eType=eType;
        ProcessEvent(FindFunctionChecked(ECHELON_CommunicationCallBack),&Parms);
    }
    void eventAdjustDefaultPatternState(BYTE _GoalT)
    {
        AEPattern_eventAdjustDefaultPatternState_Parms Parms;
        Parms._GoalT=_GoalT;
        ProcessEvent(FindFunctionChecked(ECHELON_AdjustDefaultPatternState),&Parms);
    }
    void eventEventCallBack(class AEAIEvent* Event, class AActor* TriggerActor)
    {
        AEPattern_eventEventCallBack_Parms Parms;
        Parms.Event=Event;
        Parms.TriggerActor=TriggerActor;
        ProcessEvent(FindFunctionChecked(ECHELON_EventCallBack),&Parms);
    }
    void eventReflexCallBack(class AEAIEvent* Event)
    {
        AEPattern_eventReflexCallBack_Parms Parms;
        Parms.Event=Event;
        ProcessEvent(FindFunctionChecked(ECHELON_ReflexCallBack),&Parms);
    }
    DECLARE_CLASS(AEPattern,AActor,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEPattern)
};

enum ECanTriggerType
{
    PlayerTriggered         =0,
    NPCTriggered            =1,
    PawnTriggered           =2,
    NoRestriction           =3,
};
enum EDetectionType
{
    DETECT_Movement         =0,
    DETECT_Heat             =1,
    DETECT_MAX              =2,
};
enum EScannedActorType
{
    SCAN_PlayerOnly         =0,
    SCAN_ChangedPawns       =1,
    SCAN_AllPawns           =2,
    SCAN_AllChangedActors   =3,
    SCAN_AllPawnsAndChangedActors=4,
    SCAN_MAX                =5,
};
enum ELinkType
{
    EAlarm_None             =0,
    EAlarm_Trigger          =1,
    EAlarm_Object           =2,
    EAlarm_MAX              =3,
};
enum EGOMsgEvent
{
    GOEV_Trigger            =0,
    GOEV_TakeDamage         =1,
    GOEV_Destructed         =2,
    GOEV_MAX                =3,
};

struct AEGameplayObject_eventDestructed_Parms
{
};
class ECHELON_API AEGameplayObject : public AActor
{
public:
    FName ObjectName;
    class AEInventory* Inventory;
    BITFIELD bPickable:1 GCC_PACK(4);
    BITFIELD bPushable:1;
    FLOAT HitNoiseRadius GCC_PACK(4);
    TArrayNoInit<class AELight*> ObjectLights;
    TArrayNoInit<class AShadowProjector*> ObjectProjectors;
    FLOAT LastTimeChange;
    FColor RelevantAmbientColor;
    TArrayNoInit<class AActor*> RelevantLights;
    BITFIELD bDamageable:1 GCC_PACK(4);
    BITFIELD bShatterable:1;
    BITFIELD bExplodeWhenDestructed:1;
    BITFIELD bDestroyWhenDestructed:1;
    BITFIELD bDestroyOnlyByExplosion:1;
    INT HitPoints GCC_PACK(4);
    TArrayNoInit<FDamagedMesh> DamagedMeshes;
    TArrayNoInit<FSpawnInfo> SpawnableObjects;
    class UClass* ExplosionClass;
    class UClass* ExplosionDamageClass;
    FLOAT ExplosionDamage;
    FLOAT ExplosionMinRadius;
    FLOAT ExplosionMaxRadius;
    FLOAT ExplosionNoiseRadius;
    FLOAT ExplodeTimer;
    FLOAT DestroyTime;
    TArrayNoInit<class USound*> HitSound;
    class USound* BounceSound;
    class USound* ExplosionSound;
    INT ExplosionMomentum;
    INT InitialHitPoints;
    FLOAT DelayToDestruction;
    FLOAT DamagePercent;
    class AEAlarm* Alarm;
    BYTE AlarmLinkType;
    class AEGroupAI* GroupAI;
    FName JumpLabel;
    FName DestroyedJumpLabel;
    BITFIELD TriggerPatternJustOnce:1 GCC_PACK(4);
    BITFIELD ChangeListWhenThrown:1;
    BITFIELD ChangeListWhenDamaged:1;
    BITFIELD PatternAlreadyTrigger:1;
    BITFIELD bIsSwitchObject:1;
    BITFIELD bWasSeen:1;
    class UClass* ObjectHudClass GCC_PACK(4);
    class AEObjectHud* ObjectHud;
    BYTE TriggerType;
    DECLARE_FUNCTION(execCheckSBOwner);
    DECLARE_FUNCTION(execFrustumScanning);
    void eventDestructed()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_Destructed),NULL);
    }
    DECLARE_CLASS(AEGameplayObject,AActor,0|CLASS_Config,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEGameplayObject)
};


class ECHELON_API AEDoorOpener : public AEGameplayObject
{
public:
    TArrayNoInit<class AEDoorMover*> LinkedActors;
    BITFIELD bIsRetinalScanner:1 GCC_PACK(4);
    BITFIELD bIsKeypad:1;
    DECLARE_CLASS(AEDoorOpener,AEGameplayObject,0|CLASS_Config,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEDoorOpener)
};

#define UCONST_REN_NightVision 11
#define UCONST_REN_ThermalVision 10
#define UCONST_REN_DynLight 5

struct AEInventoryItem_eventRemovedFromInventory_Parms
{
};
struct AEInventoryItem_eventAddedToInventory_Parms
{
};
struct AEInventoryItem_eventCanAddThisItem_Parms
{
    class AEInventoryItem* ItemToAdd;
    BITFIELD ReturnValue;
};
struct AEInventoryItem_eventSelect_Parms
{
    class AEInventory* Inv;
};
class ECHELON_API AEInventoryItem : public AEGameplayObject
{
public:
    FStringNoInit ItemName;
    FStringNoInit ItemVideoName;
    FStringNoInit Description;
    FStringNoInit HowToUseMe;
    BYTE Category;
    INT InventoryTex;
    INT HUDTex;
    INT Quantity;
    INT MaxQuantity;
    BITFIELD bEquipable:1 GCC_PACK(4);
    class AController* Controller GCC_PACK(4);
    void eventRemovedFromInventory()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_RemovedFromInventory),NULL);
    }
    void eventAddedToInventory()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_AddedToInventory),NULL);
    }
    BITFIELD eventCanAddThisItem(class AEInventoryItem* ItemToAdd)
    {
        AEInventoryItem_eventCanAddThisItem_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ItemToAdd=ItemToAdd;
        ProcessEvent(FindFunctionChecked(ECHELON_CanAddThisItem),&Parms);
        return Parms.ReturnValue;
    }
    void eventSelect(class AEInventory* Inv)
    {
        AEInventoryItem_eventSelect_Parms Parms;
        Parms.Inv=Inv;
        ProcessEvent(FindFunctionChecked(ECHELON_Select),&Parms);
    }
    DECLARE_CLASS(AEInventoryItem,AEGameplayObject,0|CLASS_Config,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEInventoryItem)
};


class ECHELON_API AESecondaryAmmo : public AEInventoryItem
{
public:
    INT AmmoVelocity;
    class USound* UseSound;
    class AEMainGun* OwnerGun;
    INT HUDTexSD;
    DECLARE_CLASS(AESecondaryAmmo,AEInventoryItem,0|CLASS_Config,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AESecondaryAmmo)
};

enum ERateOfFireMode
{
    ROF_Single              =0,
    ROF_Burst               =1,
    ROF_Auto                =2,
    ROF_MAX                 =3,
};

struct AEWeapon_eventIsROFModeAvailable_Parms
{
    BYTE rof;
    BITFIELD ReturnValue;
};
struct AEWeapon_eventGetFireEnd_Parms
{
    FVector ReturnValue;
};
struct AEWeapon_eventGetFireStart_Parms
{
    FVector ReturnValue;
};
struct AEWeapon_eventFire_Parms
{
};
struct AEWeapon_eventSetSecondaryAmmo_Parms
{
    class AEInventoryItem* Item;
};
class ECHELON_API AEWeapon : public AEInventoryItem
{
public:
    INT Ammo;
    INT MaxAmmo;
    INT ClipAmmo;
    INT ClipMaxAmmo;
    FLOAT RateOfFire;
    INT BaseDamage;
    INT BaseMomentum;
    INT FireNoiseRadius;
    class USound* FireSingleShotSound;
    class USound* FireAutomaticSound;
    class USound* FireAutomaticEndSound;
    class USound* ReloadSound;
    class USound* EmptySound;
    class USound* BulletSound;
    class UMaterial* BulletMaterial;
    BYTE eROFMode;
    INT BulletsToFire;
    INT ShootingRange;
    INT NPCPreferredDistance;
    class UClass* EjectedClass;
    FVector EjectedOffset;
    FVector EjectedVel;
    class UClass* MuzzleFlashClass;
    FVector MuzzleOffset;
    class AEWeaponMagazine* Magazine;
    class UStaticMesh* MagazineMesh;
    FVector MagazineOffset;
    BITFIELD InTargetingMode:1 GCC_PACK(4);
    FName AttachAwayTag GCC_PACK(4);
    FLOAT RecoilStrength;
    FLOAT RecoilAngle;
    FLOAT RecoilStartAlpha;
    FLOAT RecoilFadeIn;
    FLOAT RecoilFadeOut;
    BITFIELD UseAccuracy:1 GCC_PACK(4);
    FLOAT AccuracyMovementModifier GCC_PACK(4);
    FLOAT AccuracyReturnModifier;
    FLOAT AccuracyBase;
    FLOAT AccuracyDesired;
    FLOAT Accuracy;
    FLOAT RealAccuracy;
    BITFIELD bJustFired:1 GCC_PACK(4);
    class AEObjectHud* WeaponReticle GCC_PACK(4);
    INT ReticuleTex;
    BITFIELD eventIsROFModeAvailable(BYTE rof)
    {
        AEWeapon_eventIsROFModeAvailable_Parms Parms;
        Parms.ReturnValue=0;
        Parms.rof=rof;
        ProcessEvent(FindFunctionChecked(ECHELON_IsROFModeAvailable),&Parms);
        return Parms.ReturnValue;
    }
    FVector eventGetFireEnd()
    {
        AEWeapon_eventGetFireEnd_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetFireEnd),&Parms);
        return Parms.ReturnValue;
    }
    FVector eventGetFireStart()
    {
        AEWeapon_eventGetFireStart_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetFireStart),&Parms);
        return Parms.ReturnValue;
    }
    void eventFire()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_Fire),NULL);
    }
    void eventSetSecondaryAmmo(class AEInventoryItem* Item)
    {
        AEWeapon_eventSetSecondaryAmmo_Parms Parms;
        Parms.Item=Item;
        ProcessEvent(FindFunctionChecked(ECHELON_SetSecondaryAmmo),&Parms);
    }
    DECLARE_CLASS(AEWeapon,AEInventoryItem,0|CLASS_Config,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEWeapon)
};


class ECHELON_API AETwoHandedWeapon : public AEWeapon
{
public:
    DECLARE_CLASS(AETwoHandedWeapon,AEWeapon,0|CLASS_Config,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AETwoHandedWeapon)
};


class ECHELON_API AESniperGun : public AETwoHandedWeapon
{
public:
    TArrayNoInit<FLOAT> FOVs;
    INT FOVIndex;
    FRotator SniperNoisedRotation;
    BITFIELD bSniperMode:1 GCC_PACK(4);
    class AESniperNoise* Sn GCC_PACK(4);
    FLOAT LastSniperModeTime;
    DECLARE_CLASS(AESniperGun,AETwoHandedWeapon,0|CLASS_Config,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AESniperGun)
};


class ECHELON_API AEGamePlayObjectLight : public AEGameplayObject
{
public:
    class UStaticMesh* OnMesh;
    class UStaticMesh* OffMesh;
    BYTE InitialLightType;
    BITFIELD InitialUsesBeam:1 GCC_PACK(4);
    FLOAT DesiredHeatIntensity GCC_PACK(4);
    DECLARE_CLASS(AEGamePlayObjectLight,AEGameplayObject,0|CLASS_Config,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEGamePlayObjectLight)
};

#define UCONST_NumberOfCat 3

struct AEInventory_eventGetCategoryName_Parms
{
    BYTE Category;
    FString ReturnValue;
};
struct AEInventory_eventGetPackageName_Parms
{
    FString ReturnValue;
};
struct AEInventory_eventGetNumberOfCategories_Parms
{
    INT ReturnValue;
};
struct AEInventory_eventUnEquipItem_Parms
{
    class AEInventoryItem* Item;
    BITFIELD bNoUpdate;
    class AEInventoryItem* NewItem;
};
struct AEInventory_eventSetSelectedItem_Parms
{
    class AEInventoryItem* Item;
};
struct AEInventory_eventIsSelected_Parms
{
    class AEInventoryItem* Item;
    BITFIELD ReturnValue;
};
class ECHELON_API AEInventory : public AActor
{
public:
    TArrayNoInit<FInvItemInfo> InventoryList;
    class AEInventoryItem* BackPackPrimSelectedItem;
    class AEInventoryItem* BackPackSecSelectedItem;
    class AEInventoryItem* PreviousEquipedItem;
    DECLARE_FUNCTION(execPossesses);
    DECLARE_FUNCTION(execGetItemByClass);
    DECLARE_FUNCTION(execGetItemInCategory);
    DECLARE_FUNCTION(execGetNbItemInCategory);
    DECLARE_FUNCTION(execRemoveItem);
    DECLARE_FUNCTION(execCanAddItem);
    DECLARE_FUNCTION(execAddInventoryItem);
    FString eventGetCategoryName(BYTE Category)
    {
        AEInventory_eventGetCategoryName_Parms Parms;
        Parms.Category=Category;
        ProcessEvent(FindFunctionChecked(ECHELON_GetCategoryName),&Parms);
        return Parms.ReturnValue;
    }
    FString eventGetPackageName()
    {
        AEInventory_eventGetPackageName_Parms Parms;
        ProcessEvent(FindFunctionChecked(ECHELON_GetPackageName),&Parms);
        return Parms.ReturnValue;
    }
    INT eventGetNumberOfCategories()
    {
        AEInventory_eventGetNumberOfCategories_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetNumberOfCategories),&Parms);
        return Parms.ReturnValue;
    }
    void eventUnEquipItem(class AEInventoryItem* Item, BITFIELD bNoUpdate, class AEInventoryItem* NewItem)
    {
        AEInventory_eventUnEquipItem_Parms Parms;
        Parms.Item=Item;
        Parms.bNoUpdate=bNoUpdate;
        Parms.NewItem=NewItem;
        ProcessEvent(FindFunctionChecked(ECHELON_UnEquipItem),&Parms);
    }
    void eventSetSelectedItem(class AEInventoryItem* Item)
    {
        AEInventory_eventSetSelectedItem_Parms Parms;
        Parms.Item=Item;
        ProcessEvent(FindFunctionChecked(ECHELON_SetSelectedItem),&Parms);
    }
    BITFIELD eventIsSelected(class AEInventoryItem* Item)
    {
        AEInventory_eventIsSelected_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Item=Item;
        ProcessEvent(FindFunctionChecked(ECHELON_IsSelected),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AEInventory,AActor,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEInventory)
};


struct AEGroupAI_eventAIEventCallBack_Parms
{
    class AEAIController* Instigator;
    class AEAIEvent* Event;
};
struct AEGroupAI_eventEndScriptedPattern_Parms
{
};
struct AEGroupAI_eventAddOrUpdateCheckPoint_Parms
{
    class AEAIController* oController;
    FLOAT fPatrolCheckPointTimeOut;
};
struct AEGroupAI_eventAIAlarmCallBack_Parms
{
    class AEAlarm* A;
    class AEAIEvent* Event;
    BITFIELD bForceUpdatePos;
};
struct AEGroupAI_eventGetClosestMember_Parms
{
    FVector _Location;
    class AActor* IgnoredActor;
    BITFIELD stopfiring;
    class AEAIController* ReturnValue;
};
struct AEGroupAI_eventGetMostRecentPlayerInfo_Parms
{
    FLOAT BestTime;
    FVector PlayerPos;
};
struct AEGroupAI_eventPlayerIsVisible_Parms
{
    BITFIELD ReturnValue;
};
struct AEGroupAI_eventSendJumpEvent_Parms
{
    FName LabelName;
    BITFIELD bAffectLastZone;
    BITFIELD bForceJump;
};
class ECHELON_API AEGroupAI : public AActor
{
public:
    class UClass* ScriptedPatternClass;
    BITFIELD bEventExclusivity:1 GCC_PACK(4);
    BITFIELD bAlwaysKeepScriptedPattern:1;
    BITFIELD bInternEventsTriggerDefault:1;
    BITFIELD bExternEventWasSent:1;
    BITFIELD bIsPrimary:1;
    BITFIELD bInitPatterns:1;
    BITFIELD bDestroyScriptedEventAfterEnd:1;
    BITFIELD bPlayerDeadSent:1;
    BITFIELD bLostPlayerSent:1;
    BITFIELD bGroupRunningForAlarm:1;
    BITFIELD bChangeHistory_Init:1;
    BITFIELD PlayFisherMusic:1;
    BITFIELD bDontMirrorAttack:1;
    class AEPattern* ScriptedPattern GCC_PACK(4);
    class UESList* AIMembers;
    INT MemberNb;
    class AEZoneInfo* LastZoneUsed;
    class AEAlarm* CurrentAlarm;
    TArrayNoInit<FAIEvent> EventList;
    class AEPlayerController* Player;
    class AEVolume* CurrentPlayerVolume;
    FLOAT DelayBetweenGrenades;
    FLOAT CurrentGrenadeTimer;
    FLOAT fSeeInterrogationTimer;
    TArrayNoInit<FCheckPointInfo> arCheckPointTimers;
    FEChangeEvent ChangeHistory[16];
    FLOAT ChangeHistory_LastChangeBark;
    FLOAT ChangeHistory_PrevChangeBark;
    DECLARE_FUNCTION(execChangeHistory_AddChangeAndSuggestBehavior);
    DECLARE_FUNCTION(execBroadcast);
    void eventAIEventCallBack(class AEAIController* Instigator, class AEAIEvent* Event)
    {
        AEGroupAI_eventAIEventCallBack_Parms Parms;
        Parms.Instigator=Instigator;
        Parms.Event=Event;
        ProcessEvent(FindFunctionChecked(ECHELON_AIEventCallBack),&Parms);
    }
    void eventEndScriptedPattern()
    {
        ProcessEvent(FindFunctionChecked(ECHELON_EndScriptedPattern),NULL);
    }
    void eventAddOrUpdateCheckPoint(class AEAIController* oController, FLOAT fPatrolCheckPointTimeOut)
    {
        AEGroupAI_eventAddOrUpdateCheckPoint_Parms Parms;
        Parms.oController=oController;
        Parms.fPatrolCheckPointTimeOut=fPatrolCheckPointTimeOut;
        ProcessEvent(FindFunctionChecked(ECHELON_AddOrUpdateCheckPoint),&Parms);
    }
    void eventAIAlarmCallBack(class AEAlarm* A, class AEAIEvent* Event, BITFIELD bForceUpdatePos)
    {
        AEGroupAI_eventAIAlarmCallBack_Parms Parms;
        Parms.A=A;
        Parms.Event=Event;
        Parms.bForceUpdatePos=bForceUpdatePos;
        ProcessEvent(FindFunctionChecked(ECHELON_AIAlarmCallBack),&Parms);
    }
    class AEAIController* eventGetClosestMember(FVector _Location, class AActor* IgnoredActor, BITFIELD stopfiring)
    {
        AEGroupAI_eventGetClosestMember_Parms Parms;
        Parms.ReturnValue=0;
        Parms._Location=_Location;
        Parms.IgnoredActor=IgnoredActor;
        Parms.stopfiring=stopfiring;
        ProcessEvent(FindFunctionChecked(ECHELON_GetClosestMember),&Parms);
        return Parms.ReturnValue;
    }
    void eventGetMostRecentPlayerInfo(FLOAT& BestTime, FVector& PlayerPos)
    {
        AEGroupAI_eventGetMostRecentPlayerInfo_Parms Parms;
        Parms.BestTime=BestTime;
        Parms.PlayerPos=PlayerPos;
        ProcessEvent(FindFunctionChecked(ECHELON_GetMostRecentPlayerInfo),&Parms);
        BestTime=Parms.BestTime;
        PlayerPos=Parms.PlayerPos;
    }
    BITFIELD eventPlayerIsVisible()
    {
        AEGroupAI_eventPlayerIsVisible_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_PlayerIsVisible),&Parms);
        return Parms.ReturnValue;
    }
    void eventSendJumpEvent(FName LabelName, BITFIELD bAffectLastZone, BITFIELD bForceJump)
    {
        AEGroupAI_eventSendJumpEvent_Parms Parms;
        Parms.LabelName=LabelName;
        Parms.bAffectLastZone=bAffectLastZone;
        Parms.bForceJump=bForceJump;
        ProcessEvent(FindFunctionChecked(ECHELON_SendJumpEvent),&Parms);
    }
    DECLARE_CLASS(AEGroupAI,AActor,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEGroupAI)
};


struct AEGObjectGroup_eventGetNextTarget_Parms
{
    class AActor* ReturnValue;
};
struct AEGObjectGroup_eventGetCurrentTarget_Parms
{
    class AActor* ReturnValue;
};
class ECHELON_API AEGObjectGroup : public AActor
{
public:
    BITFIELD bIsDead:1 GCC_PACK(4);
    INT CurrentIndex GCC_PACK(4);
    FName ObjectsTag;
    TArrayNoInit<class AActor*> ItemsToDestroy;
    class AActor* eventGetNextTarget()
    {
        AEGObjectGroup_eventGetNextTarget_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetNextTarget),&Parms);
        return Parms.ReturnValue;
    }
    class AActor* eventGetCurrentTarget()
    {
        AEGObjectGroup_eventGetCurrentTarget_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetCurrentTarget),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AEGObjectGroup,AActor,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEGObjectGroup)
};

enum eSpecialEvent
{
    ST_NONE                 =0,
    ST_NOTEBOOK             =1,
    ST_GOAL                 =2,
    ST_RECON                =3,
    ST_MAX                  =4,
};
#define UCONST_REAL_BOX_HEIGHT 80
#define UCONST_ICON_WIDTH 40
#define UCONST_COMBOX_WIDTH 338
#define UCONST_OPEN_SPEED_FACTOR 5
#define UCONST_MIN_COMBOX_HEIGHT 42

struct AECommunicationBox_eventResetClipZone_Parms
{
    class UECanvas* C;
};
struct AECommunicationBox_eventSetClipZone_Parms
{
    class UECanvas* C;
};
struct AECommunicationBox_eventGetCurrentNode_Parms
{
    class UEListNode* ReturnValue;
};
class ECHELON_API AECommunicationBox : public AActor
{
public:
    class UESList* HQList;
    class UESList* NPCList;
    class UESList* ConsoleList;
    class UESList* InventoryList;
    class UESList* QueuedList;
    class UECanvas* GCanvas;
    INT NPCNb;
    INT ConsoleNb;
    INT InventoryNb;
    FLOAT TimeElapsed;
    BYTE CurrentTransmission;
    BYTE CurrentSpecialEvent;
    class AActor* CurrentOwner;
    FLOAT BlinkTime;
    BITFIELD bBlink:1 GCC_PACK(4);
    BITFIELD bLock:1;
    BITFIELD bFree:1;
    class UEListNode* ConversationNode GCC_PACK(4);
    class AEchelonGameInfo* eGame;
    class AEchelonLevelInfo* ELevel;
    INT openHeight;
    FLOAT fTimer;
    FLOAT fDuration;
    BITFIELD bWithVoice:1 GCC_PACK(4);
    DECLARE_FUNCTION(execGetCurrentSize);
    DECLARE_FUNCTION(execAddTransmission);
    void eventResetClipZone(class UECanvas* C)
    {
        AECommunicationBox_eventResetClipZone_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(ECHELON_ResetClipZone),&Parms);
    }
    void eventSetClipZone(class UECanvas* C)
    {
        AECommunicationBox_eventSetClipZone_Parms Parms;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(ECHELON_SetClipZone),&Parms);
    }
    class UEListNode* eventGetCurrentNode()
    {
        AECommunicationBox_eventGetCurrentNode_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetCurrentNode),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AECommunicationBox,AActor,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AECommunicationBox)
};


class ECHELON_API AEMusic : public AActor
{
public:
    INT CurrentMusicType;
    class AActor* CurrentOwner;
    INT MaxMusicRequest;
    INT CombatMusicType;
    BITFIELD PlayPunch:1 GCC_PACK(4);
    class USound* CombatA GCC_PACK(4);
    class USound* CombatB;
    class USound* CombatC;
    class USound* CombatD;
    class USound* StressA;
    class USound* StressB;
    class USound* StressC;
    class USound* StressD;
    class USound* FisherA;
    class USound* FisherB;
    class USound* FisherC;
    class USound* FisherD;
    FSMusicRequest MusicR[20];
    DECLARE_CLASS(AEMusic,AActor,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEMusic)
};


struct AEGoalList_eventGetCurrent_Parms
{
    class AEGoal* ReturnValue;
};
class ECHELON_API AEGoalList : public AActor
{
public:
    class AEGoal* pHead;
    class AEAIController* pOwner;
    class AEGoal* eventGetCurrent()
    {
        AEGoalList_eventGetCurrent_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ECHELON_GetCurrent),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AEGoalList,AActor,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEGoalList)
};


class ECHELON_API AEGoal : public AActor
{
public:
    BYTE m_GoalType;
    class AEGoal* Next;
    FVector GoalLocation;
    FVector GoalFocus;
    FVector GoalDirection;
    class AActor* GoalTarget;
    class AActor* GoalSubject;
    FName GoalTag;
    class USound* GoalSound;
    FName GoalAnim;
    FName GoalAnimB;
    FLOAT GoalTimer;
    FLOAT GoalValue;
    BYTE GoalMoveFlags;
    BYTE GoalWaitFlags;
    BITFIELD bInitialized:1 GCC_PACK(4);
    BITFIELD GoalFlag:1;
    BITFIELD GoalFlagB:1;
    BITFIELD GoalUpdatePlayerPos:1;
    BYTE Priority GCC_PACK(4);
    DECLARE_CLASS(AEGoal,AActor,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(AEGoal)
};


class ECHELON_API UETransmissionObj : public UObject
{
public:
    BYTE TransmissionType;
    BYTE SpecialEvent;
    FStringNoInit Data;
    FStringNoInit SpecialMessage;
    INT YSpace;
    FLOAT InsertionTime;
    class USound* VoiceMessage;
    class AActor* Owner;
    DECLARE_CLASS(UETransmissionObj,UObject,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(UETransmissionObj)
};


class ECHELON_API UETrainingData : public UObject
{
public:
    FStringNoInit Description;
    BITFIELD bShowController:1 GCC_PACK(4);
    TArrayNoInit<BYTE> ArrayKey GCC_PACK(4);
    DECLARE_CLASS(UETrainingData,UObject,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(UETrainingData)
};


class ECHELON_API UERecon : public UObject
{
public:
    INT ReconType;
    FStringNoInit ReconName;
    class UTexture* ReconPicName;
    FStringNoInit ReconPreviewText;
    FStringNoInit ReconText;
    TArrayNoInit<FsReconPos> ReconDynMapArray;
    INT NbrOfCoord;
    BITFIELD bIsRead:1 GCC_PACK(4);
    DECLARE_CLASS(UERecon,UObject,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(UERecon)
};


class ECHELON_API UEReconDataStick : public UERecon
{
public:
    FStringNoInit ObjName;
    FStringNoInit MemoryTextSection;
    FStringNoInit From;
    FStringNoInit To;
    FStringNoInit SentStringID;
    FStringNoInit SubjectStringID;
    FStringNoInit MemoryTextID;
    DECLARE_CLASS(UEReconDataStick,UERecon,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(UEReconDataStick)
};


class ECHELON_API UENote : public UObject
{
public:
    FStringNoInit Note;
    FStringNoInit NoteShrink;
    BITFIELD bCompleted:1 GCC_PACK(4);
    FName ID GCC_PACK(4);
    INT iPriority;
    FStringNoInit Section;
    FStringNoInit Key;
    FStringNoInit Package;
    FStringNoInit SectionShrink;
    FStringNoInit KeyShrink;
    FStringNoInit PackageShrink;
    DECLARE_CLASS(UENote,UObject,0,Echelon)
    NO_DEFAULT_CONSTRUCTOR(UENote)
};

#endif

AUTOGENERATE_FUNCTION(AETextureManager,1310,execGetOriginY);
AUTOGENERATE_FUNCTION(AETextureManager,1309,execGetOriginX);
AUTOGENERATE_FUNCTION(AETextureManager,1308,execGetHeight);
AUTOGENERATE_FUNCTION(AETextureManager,1307,execGetWidth);
AUTOGENERATE_FUNCTION(AETextureManager,1306,execGetTextureInfo);
AUTOGENERATE_FUNCTION(AETextureManager,1305,execDrawTileFromManager);
AUTOGENERATE_FUNCTION(AEPlayerController,1146,execCalculatePipeDestination);
AUTOGENERATE_FUNCTION(AEPlayerController,1172,execCanGetOutTopPipe);
AUTOGENERATE_FUNCTION(AEPlayerController,1147,execCalculateLadderDestination);
AUTOGENERATE_FUNCTION(AEPlayerController,1171,execCanGetOutTopLadder);
AUTOGENERATE_FUNCTION(AEPlayerController,1169,execCheckBTWSide);
AUTOGENERATE_FUNCTION(AEPlayerController,1168,execCheckBTWEyes);
AUTOGENERATE_FUNCTION(AEPlayerController,1167,execCheckBTWRelease);
AUTOGENERATE_FUNCTION(AEPlayerController,1170,execCheckForCrouchBTW);
AUTOGENERATE_FUNCTION(AEPlayerController,1175,execCheckWallJump);
AUTOGENERATE_FUNCTION(AEPlayerController,1160,execSetGroundSpeed);
AUTOGENERATE_FUNCTION(AEPlayerController,1159,execSetWalkingCameraMode);
AUTOGENERATE_FUNCTION(AEPlayerController,1178,execShouldReleaseNPC);
AUTOGENERATE_FUNCTION(AEPlayerController,1166,execCheckBTW);
AUTOGENERATE_FUNCTION(AEPlayerController,1163,execTryHoisting);
AUTOGENERATE_FUNCTION(AEPlayerController,1162,execCheckFallGrab);
AUTOGENERATE_FUNCTION(AEPlayerController,1165,execListItemsNative);
AUTOGENERATE_FUNCTION(AEPlayerController,1280,execTCheck);
AUTOGENERATE_FUNCTION(AEPlayerController,1158,execGetPushingDir);
AUTOGENERATE_FUNCTION(AEPlayerController,1157,execGetPushingForce);
AUTOGENERATE_FUNCTION(AEPlayerController,1156,execIsPushingTowardBack);
AUTOGENERATE_FUNCTION(AEPlayerController,1155,execIsPushingTowardFront);
AUTOGENERATE_FUNCTION(AEPlayerController,1154,execIsPushingToward);
AUTOGENERATE_FUNCTION(AEPlayerController,1153,execIsPushingFull);
AUTOGENERATE_FUNCTION(AEPlayerController,1152,execIsPushingGentle);
AUTOGENERATE_FUNCTION(AEPlayerController,1151,execIsPushing);
AUTOGENERATE_FUNCTION(AEPlayerController,1150,execArrivalTimeApprox);
AUTOGENERATE_FUNCTION(AEPlayerController,1149,execKillPawnSpeed);
AUTOGENERATE_FUNCTION(AEPlayerController,1177,execMirrorCameraLocalTarget);
AUTOGENERATE_FUNCTION(AEPlayerController,1148,execFlipCameraLocalTarget);
AUTOGENERATE_FUNCTION(AEPlayerController,1292,execPopCamera);
AUTOGENERATE_FUNCTION(AEPlayerController,1291,execSetCameraMode);
AUTOGENERATE_FUNCTION(AEPlayerController,1290,execSetCameraFOV);
AUTOGENERATE_FUNCTION(AEPlayerCam,1140,execUpdateView);
AUTOGENERATE_FUNCTION(AEPlayerCam,1120,execSetMode);
AUTOGENERATE_FUNCTION(AEPlayerCam,1119,execFollowingCalcView);
AUTOGENERATE_FUNCTION(AEPlayerCam,1124,execResettingRotation);
AUTOGENERATE_FUNCTION(AEPlayerCam,1118,execFollowingRotation);
AUTOGENERATE_FUNCTION(AEPlayerCam,1117,execInitCameraSettings);
AUTOGENERATE_FUNCTION(AEDog,1536,execResetMotionBones);
AUTOGENERATE_FUNCTION(AEDog,1535,execSetMotionBones);
AUTOGENERATE_FUNCTION(AEPawn,1176,execSetupChairDeath);
AUTOGENERATE_FUNCTION(AEPawn,1145,execRotateAroundZ);
AUTOGENERATE_FUNCTION(AEPawn,1143,execEyeBlink);
AUTOGENERATE_FUNCTION(AEPawn,1128,execStartLipSynch);
AUTOGENERATE_FUNCTION(AEPawn,1126,execRollPawn);
AUTOGENERATE_FUNCTION(AEPawn,1113,execRecoil);
AUTOGENERATE_FUNCTION(AEPawn,1108,execAimAt);
AUTOGENERATE_FUNCTION(AEPawn,1106,execLookAt);
AUTOGENERATE_FUNCTION(AEPawn,1554,execArePointsConnected);
AUTOGENERATE_FUNCTION(AEPawn,1553,execGetAnchor);
AUTOGENERATE_FUNCTION(AEPawn,1552,execGetAnchorForLocation);
AUTOGENERATE_FUNCTION(AEPawn,1173,execChooseChairDeathAnimation);
AUTOGENERATE_FUNCTION(AEPawn,1548,execChooseDeathAnimation);
AUTOGENERATE_FUNCTION(AEPawn,1546,execIsPawnTalking);
AUTOGENERATE_FUNCTION(AEPawn,1541,execBlendAnims);
AUTOGENERATE_FUNCTION(AEPawn,1540,execIsSequenceInCurrentAnim);
AUTOGENERATE_FUNCTION(AEPawn,1534,execForceAnimParams);
AUTOGENERATE_FUNCTION(AEPawn,1537,execExitRootMotion);
AUTOGENERATE_FUNCTION(AEPawn,1503,execReachedDestination);
AUTOGENERATE_FUNCTION(AEPattern,1322,execSetPatternAlwaysTick);
AUTOGENERATE_FUNCTION(AEPattern,1271,execLookTarget);
AUTOGENERATE_FUNCTION(AEPattern,1270,execFreezeTraining);
AUTOGENERATE_FUNCTION(AEPattern,1425,execStopSpeech);
AUTOGENERATE_FUNCTION(AEPattern,1420,execCheckAttackPoint);
AUTOGENERATE_FUNCTION(AEPattern,1416,execProcessAI);
AUTOGENERATE_FUNCTION(AEPattern,1410,execWaitForGoal);
AUTOGENERATE_FUNCTION(AEPattern,1407,execSpeech);
AUTOGENERATE_FUNCTION(AEPattern,1409,execWaitForCommBox);
AUTOGENERATE_FUNCTION(AEPattern,1408,execTalk);
AUTOGENERATE_FUNCTION(AEGameplayObject,1129,execCheckSBOwner);
AUTOGENERATE_FUNCTION(AEGameplayObject,1230,execFrustumScanning);
AUTOGENERATE_FUNCTION(AEDoorMover,1558,execPropagateSound);
AUTOGENERATE_FUNCTION(AEchelonLevelInfo,1532,execIsLadderLockedBy);
AUTOGENERATE_FUNCTION(AEchelonLevelInfo,1530,execIsLadderLocked);
AUTOGENERATE_FUNCTION(AEchelonLevelInfo,1529,execUnlockLadder);
AUTOGENERATE_FUNCTION(AEchelonLevelInfo,1528,execLockLadder);
AUTOGENERATE_FUNCTION(AEInventory,1216,execPossesses);
AUTOGENERATE_FUNCTION(AEInventory,1215,execGetItemByClass);
AUTOGENERATE_FUNCTION(AEInventory,1214,execGetItemInCategory);
AUTOGENERATE_FUNCTION(AEInventory,1213,execGetNbItemInCategory);
AUTOGENERATE_FUNCTION(AEInventory,1212,execRemoveItem);
AUTOGENERATE_FUNCTION(AEInventory,1211,execCanAddItem);
AUTOGENERATE_FUNCTION(AEInventory,1210,execAddInventoryItem);
AUTOGENERATE_FUNCTION(AEGroupAI,1550,execChangeHistory_AddChangeAndSuggestBehavior);
AUTOGENERATE_FUNCTION(AEGroupAI,1418,execBroadcast);
AUTOGENERATE_FUNCTION(AECommunicationBox,1402,execGetCurrentSize);
AUTOGENERATE_FUNCTION(AECommunicationBox,1401,execAddTransmission);
AUTOGENERATE_FUNCTION(AEchelonGameInfo,2346,execGetKeyBinding);
AUTOGENERATE_FUNCTION(AEchelonGameInfo,2345,execGetStringBinding);
AUTOGENERATE_FUNCTION(AEAIController,1543,execNotifyBumpPawn);
AUTOGENERATE_FUNCTION(AEAIController,1549,execUpdatePlayerLocation);
AUTOGENERATE_FUNCTION(AEAIController,1519,execCheckTargetDead);
AUTOGENERATE_FUNCTION(AEAIController,1527,execSubGoal_AttackTarget);
AUTOGENERATE_FUNCTION(AEAIController,1520,execStopMovement);
AUTOGENERATE_FUNCTION(AEAIController,1518,execEMoveToward);
AUTOGENERATE_FUNCTION(AEAIController,1538,execWalkToDestination);
AUTOGENERATE_FUNCTION(AEAIController,1521,execSubGoal_NavigateTo);
AUTOGENERATE_FUNCTION(AEAIController,1522,execExecuteCurrentGoal);
AUTOGENERATE_FUNCTION(AEAIController,1516,execFindLadder);
AUTOGENERATE_FUNCTION(AEAIController,1544,execClearRoutes);
AUTOGENERATE_FUNCTION(AEAIController,1421,execLockNavPoint);
AUTOGENERATE_FUNCTION(AEAIController,1512,execUnlockNavPoint);
AUTOGENERATE_FUNCTION(AEAIController,1547,execChooseHidePoint);
AUTOGENERATE_FUNCTION(AEAIController,1511,execChooseCoverPoint);
AUTOGENERATE_FUNCTION(AEAIController,1510,execChooseAttackPoint);
AUTOGENERATE_FUNCTION(AEAIController,1545,execUpdateSearchGoal);
AUTOGENERATE_FUNCTION(AEAIController,1509,execChooseSearchPoint);
AUTOGENERATE_FUNCTION(AEAIController,1424,execEvaluateCorner);
AUTOGENERATE_FUNCTION(AEAIController,1434,execRelocatePawnOnGround);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif
